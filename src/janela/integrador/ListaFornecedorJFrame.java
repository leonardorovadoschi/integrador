/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janela.integrador;

import integrador.fornecedores.EntidadeColecao;
import integrador.fornecedores.IntegracaoAgis;
import integrador.fornecedores.IntegracaoAllnations;
import integrador.fornecedores.IntegracaoColecao;
import integrador.fornecedores.IntegracaoNhs;
import integrador.fornecedores.IntegracaoOderco;
import integrador.fornecedores.OrdenaNomeAll;
import integrador.fornecedores.ProdutoAll;
import integrador.relatorio.ImprimeRelatorio;
import janela.cplus.FormataCampos;
import java.awt.Toolkit;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import query.integrador.QueryIntegrador;

/**
 *
 * @author leonardo
 */
public class ListaFornecedorJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ImportacaoListasFornecedoresJFrame    
     */
    public ListaFornecedorJFrame() {
        initComponents();
    
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelConfiguracao = new javax.swing.JPanel();
        jButtonImportarProdutosColecao = new javax.swing.JButton();
        jButtonImportarProdutosAgis = new javax.swing.JButton();
        jButtonImportarAllNations = new javax.swing.JButton();
        jButtonListaAlcateia = new javax.swing.JButton();
        jButtonImprimeAll = new javax.swing.JButton();
        jButtonListaOderco = new javax.swing.JButton();
        jButtonImportaNhs = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenção de Preços Fornecedores");

        jPanelConfiguracao.setBorder(javax.swing.BorderFactory.createTitledBorder("Ações"));

        jButtonImportarProdutosColecao.setText("Importa Lista Coleção");
        jButtonImportarProdutosColecao.setToolTipText("Referencia - Descrição - Modelo - NCM - EAN - Marca - Caixa Master - %IPI - Giro - %ICMS - Sem IPI - Com IPI");
        jButtonImportarProdutosColecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportarProdutosColecaoActionPerformed(evt);
            }
        });

        jButtonImportarProdutosAgis.setText("Importa Lista Agis");
        jButtonImportarProdutosAgis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportarProdutosAgisActionPerformed(evt);
            }
        });

        jButtonImportarAllNations.setText("Importar Lista All Nations");
        jButtonImportarAllNations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportarAllNationsActionPerformed(evt);
            }
        });

        jButtonListaAlcateia.setText("Importar Lista Alcatéia");
        jButtonListaAlcateia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListaAlcateiaActionPerformed(evt);
            }
        });

        jButtonImprimeAll.setText("Imprimir Lista de Produtos All Nations");
        jButtonImprimeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimeAllActionPerformed(evt);
            }
        });

        jButtonListaOderco.setText("Importar Lista Oderço");
        jButtonListaOderco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListaOdercoActionPerformed(evt);
            }
        });

        jButtonImportaNhs.setText("Importa Lista NHS");
        jButtonImportaNhs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportaNhsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConfiguracaoLayout = new javax.swing.GroupLayout(jPanelConfiguracao);
        jPanelConfiguracao.setLayout(jPanelConfiguracaoLayout);
        jPanelConfiguracaoLayout.setHorizontalGroup(
            jPanelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracaoLayout.createSequentialGroup()
                .addGroup(jPanelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonImportaNhs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonListaOderco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImportarProdutosColecao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImportarProdutosAgis, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImportarAllNations, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(jButtonListaAlcateia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButtonImprimeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelConfiguracaoLayout.setVerticalGroup(
            jPanelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracaoLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButtonImportarProdutosColecao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportarProdutosAgis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConfiguracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonImportarAllNations)
                    .addComponent(jButtonImprimeAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonListaAlcateia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonListaOderco)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportaNhs)
                .addGap(0, 56, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelConfiguracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConfiguracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImportarProdutosColecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportarProdutosColecaoActionPerformed
        // String campos = "Referencia - Descrição - Modelo - NCM - EAN - Marca - Caixa Master - %IPI - Giro - %ICMS - Sem IPI - Com IPI";
        new Thread(() -> {
            manutencaoBotoes(false);
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                //new IntegracaoColecao().integradorColecao(managerIntegrador, managerCplus);

                Scanner scanner;
                List<EntidadeColecao> listProdCole = new ArrayList<>();
                try {
                    scanner = new Scanner(new FileReader(new QueryIntegrador().valorConfiguracao("caminho_ARQUIVO_TXT_COLECAO"))).useDelimiter("\\t|\\n");
                    String tex = "";
                    while (scanner.hasNext()) {
                        EntidadeColecao proColecao = new EntidadeColecao();
                        proColecao.setReferencia(scanner.next());
                        proColecao.setDescricao(scanner.next());
                        proColecao.setModelo_comercial(scanner.next());
                        proColecao.setNcm(scanner.next());
                        proColecao.setEan(scanner.next());
                        proColecao.setMarca(scanner.next());
                        /* Caixa Master */
                        scanner.next();
                         proColecao.setPorcentagemIPI(scanner.next());
                        /* Tipo de giro */
                        scanner.next();                     
                        /* porcentagem ICMS*/
                        scanner.next();
                        String semIpi = scanner.next().replace(".", "");
                        proColecao.setPrecoSemIPI(semIpi.replace(",", "."));
                        String comIpi = scanner.next().replace(".", "");
                        proColecao.setPrecoComIPI(comIpi.replace("\r", "").replace(",", "."));
                        //String stRs = scanner.next().replace(".", "");
                        //proColecao.setStRs(stRs.replace(",", "."));
                        //String comSt = scanner.next().replace(".", "");
                        //proColecao.setPrecoComSt(comSt.replace("\r", "").replace(",", "."));
                        proColecao.setQuantidade("10");
                        if (!"".equals(proColecao.getEan()) && proColecao.getEan() != null) {
                            listProdCole.add(proColecao);

                            tex = tex + proColecao.getReferencia()
                                    + " - " + proColecao.getDescricao()
                                    + " - " + proColecao.getEan() + "\n";
                            jTextArea1.setText(tex);

                        }
                    }
//                    new IntegracaoColecao().integradorColecao(listProdCole, managerIntegrador, managerCplus);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ListaFornecedorJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            manutencaoBotoes(true);
        }).start();

    }//GEN-LAST:event_jButtonImportarProdutosColecaoActionPerformed

    private void jButtonImportarProdutosAgisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportarProdutosAgisActionPerformed
        new Thread(() -> {
            manutencaoBotoes(false);
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
//                new IntegracaoAgis().integracaoAgis(managerIntegrador, managerCplus, managerDigimacro);
            }
            manutencaoBotoes(true);
        }).start();

    }//GEN-LAST:event_jButtonImportarProdutosAgisActionPerformed

    private void jButtonImportarAllNationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportarAllNationsActionPerformed
        new Thread(() -> {
            manutencaoBotoes(false);
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                //new IntegracaoAllnations().integracaoAllnations(managerIntegrador, managerCplus, managerDigimacro);

                List<ProdutoAll> listProdAll = new ArrayList<>();

                try {
                    String requestSoap;//requisicao/request no formato xml, repare que isto foi copiado da regiao destacada em azul na figura 1
                    requestSoap = "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n"
                            + "<soap:Body>\n"
                            + "<RetornarListaProdutosEstoque xmlns=\"http://allnations/wsintegracao/\">\n"
                            + "<CodigoCliente>0057910</CodigoCliente>\n"
                            + "<Senha>743275</Senha>\n"
                            + "<Data>" + new FormataCampos().dataStringSoData(new Date(System.currentTimeMillis()), -700) + "</Data>\n"
                            + "</RetornarListaProdutosEstoque>\n"
                            + "</soap:Body>\n"
                            + "</soap:Envelope>";
                    SOAPConnectionFactory soapConnectionFactory;

                    soapConnectionFactory = SOAPConnectionFactory.newInstance();

                    SOAPConnection soapConnection = soapConnectionFactory.createConnection();
                    String url = "http://wspub.allnations.com.br/wsIntEstoqueClientesV2/ServicoReservasPedidosExt.asmx";//url do webservice nao e a url do wsdl do webservice, repare que isto foi copia da parte vermelha da figura 1
                    MimeHeaders headers = new MimeHeaders();
                    headers.addHeader("Content-Type", "text/xml");

                    //exclua esta regiao caso o webservice nao possua a proprieade SOAPAction
                    headers.addHeader("SOAPAction", "http://allnations/wsintegracao/RetornarListaProdutosEstoque"); // header SOAPAction e sua respectiva url, esta url muda de webservice para webservice. Alguns webservice nao possuem esta proprieade, nestes webservice esta linha deve ser excluida
                    // o valor "http://tempuri.org/CalcPrazo" foi obtido com base na regiï¿½o destacada em verde da figura 2.

                    //fim da regiao a ser excluida caso o webservice nao possua a proprieade SOAPAction
                    MessageFactory messageFactory = MessageFactory.newInstance();

                    SOAPMessage msg = messageFactory.createMessage(headers, (new ByteArrayInputStream(requestSoap.getBytes())));

                    SOAPMessage soapResponse = soapConnection.call(msg, url);

                    Document xmlRespostaARequisicao = soapResponse.getSOAPBody().getOwnerDocument();
                    Element raiz = xmlRespostaARequisicao.getDocumentElement();

                    NodeList list = raiz.getElementsByTagName("Produtos");

                    String tex = "";
                    for (int i = 0; i < list.getLength(); i++) {
                        ProdutoAll prod = new ProdutoAll();
                        Element endElement = (Element) list.item(i);
                        // prod.setTIMESTAMP(Date.valueOf(getChildTagValue(endElement, "TIMESTAMP")));
                        prod.setDEPARTAMENTO(getChildTagValue(endElement, "DEPARTAMENTO"));
                        prod.setCATEGORIA(getChildTagValue(endElement, "CATEGORIA"));
                        prod.setSUBCATEGORIA(getChildTagValue(endElement, "SUBCATEGORIA"));
                        prod.setFABRICANTE(getChildTagValue(endElement, "FABRICANTE"));
                        prod.setCODIGO(getChildTagValue(endElement, "CODIGO"));
                        prod.setDESCRICAO(getChildTagValue(endElement, "DESCRICAO"));
                        prod.setDESCRTEC(getChildTagValue(endElement, "DESCRTEC"));
                        prod.setPARTNUMBER(getChildTagValue(endElement, "PARTNUMBER"));
                        prod.setEAN(getChildTagValue(endElement, "EAN"));
                        prod.setGARANTIA(Integer.parseInt(getChildTagValue(endElement, "GARANTIA")));
                        prod.setPESOKG(new BigDecimal(getChildTagValue(endElement, "PESOKG")));
                        prod.setPRECOREVENDA(new BigDecimal(getChildTagValue(endElement, "PRECOREVENDA")));
                        prod.setPRECOSEMST(new BigDecimal(getChildTagValue(endElement, "PRECOSEMST")));
                        prod.setDISPONIVEL(Integer.parseInt(getChildTagValue(endElement, "DISPONIVEL")));
                        prod.setURLFOTOPRODUTO(getChildTagValue(endElement, "URLFOTOPRODUTO"));
                        prod.setESTOQUE(getChildTagValue(endElement, "ESTOQUE"));
                        prod.setNCM(getChildTagValue(endElement, "NCM"));
                        prod.setLARGURA(new BigDecimal(getChildTagValue(endElement, "LARGURA")));
                        prod.setALTURA(new BigDecimal(getChildTagValue(endElement, "ALTURA")));
                        prod.setPROFUNDIDADE(new BigDecimal(getChildTagValue(endElement, "PROFUNDIDADE")));
                        prod.setATIVO(Integer.parseInt(getChildTagValue(endElement, "ATIVO")));
                        prod.setSUBSTTRIBUTARIA(Integer.parseInt(getChildTagValue(endElement, "SUBSTTRIBUTARIA")));
                        prod.setORIGEMPRODUTO(getChildTagValue(endElement, "ORIGEMPRODUTO"));
                        prod.setESTOQUEDISPONIVEL(new BigDecimal(getChildTagValue(endElement, "ESTOQUEDISPONIVEL")));

                        if (!"".equals(prod.getEAN()) && prod.getEAN() != null) {
                            if(prod.getDISPONIVEL() > 0){
                            listProdAll.add(prod);
                            
                            }
                        }
                    }
                    Comparator ordemNome = new OrdenaNomeAll();
                    Collections.sort(listProdAll, ordemNome);
                    for(ProdutoAll prod : listProdAll){
                        tex = tex + prod.getCODIGO()
                                    + " - " + prod.getDESCRICAO()
                                    + " - " + prod.getPRECOSEMST()
                                    + " - " + prod.getEAN() + "\n";
                            jTextArea1.setText(tex);
                    }
                    new IntegracaoAllnations().integracaoAllnations(listProdAll);

                } catch (SOAPException ex) {
                    JOptionPane.showMessageDialog(null, "Erro na conexão SOAP /n" + ex);
                } catch (UnsupportedOperationException | IOException ex) {
                    JOptionPane.showMessageDialog(null, "Erro de leitura XML /n" + ex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro de importação /n" + ex);
                }

            }
            manutencaoBotoes(true);
        }).start();
    }//GEN-LAST:event_jButtonImportarAllNationsActionPerformed


    private void jButtonListaAlcateiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListaAlcateiaActionPerformed
        new Thread(() -> {
            manutencaoBotoes(false);
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                //  new IntegracaoAlcateia().integradorAlcateia(managerIntegrador, managerCplus, managerDigimacro);
            }
            manutencaoBotoes(true);
        }).start();

    }//GEN-LAST:event_jButtonListaAlcateiaActionPerformed

    private void jButtonImprimeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimeAllActionPerformed
        imprimirListaAllNations();
    }//GEN-LAST:event_jButtonImprimeAllActionPerformed

    private void jButtonListaOdercoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListaOdercoActionPerformed
        new Thread(() -> {
            manutencaoBotoes(false);
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
//                new IntegracaoOderco().integracaoOderco();
            }
            manutencaoBotoes(true);
        }).start();

    }//GEN-LAST:event_jButtonListaOdercoActionPerformed

    private void jButtonImportaNhsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportaNhsActionPerformed
        new Thread(() -> {
            manutencaoBotoes(false);
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
              //  new IntegracaoNhs().integradorNhs();
            }
            manutencaoBotoes(true);
        }).start();
    }//GEN-LAST:event_jButtonImportaNhsActionPerformed

    private void manutencaoBotoes(boolean condicao) {
        jButtonImportarAllNations.setEnabled(condicao);
        jButtonImportarProdutosAgis.setEnabled(condicao);
        jButtonImportarProdutosColecao.setEnabled(condicao);
        jButtonListaAlcateia.setEnabled(condicao);
        jButtonImprimeAll.setEnabled(condicao);
        jButtonListaOderco.setEnabled(condicao);
        jButtonImportaNhs.setEnabled(condicao);
    }

    private void imprimirListaAllNations() {
        try {
            String requestSoap;//requisicao/request no formato xml, repare que isto foi copiado da regiao destacada em azul na figura 1
            requestSoap = "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n"
                    + "<soap:Body>\n"
                    + "<RetornarListaProdutosEstoque xmlns=\"http://allnations/wsintegracao/\">\n"
                    + "<CodigoCliente>0057910</CodigoCliente>\n"
                    + "<Senha>743275</Senha>\n"
                    + "<Data>" + new FormataCampos().dataStringSoData(new Date(System.currentTimeMillis()), -700) + "</Data>\n"
                    + "</RetornarListaProdutosEstoque>\n"
                    + "</soap:Body>\n"
                    + "</soap:Envelope>";
            SOAPConnectionFactory soapConnectionFactory;

            soapConnectionFactory = SOAPConnectionFactory.newInstance();

            SOAPConnection soapConnection = soapConnectionFactory.createConnection();
            String url = "http://wspub.allnations.com.br/wsIntEstoqueClientesV2/ServicoReservasPedidosExt.asmx";//url do webservice nao e a url do wsdl do webservice, repare que isto foi copia da parte vermelha da figura 1
            MimeHeaders headers = new MimeHeaders();
            headers.addHeader("Content-Type", "text/xml");

            //exclua esta regiao caso o webservice nao possua a proprieade SOAPAction
            headers.addHeader("SOAPAction", "http://allnations/wsintegracao/RetornarListaProdutosEstoque"); // header SOAPAction e sua respectiva url, esta url muda de webservice para webservice. Alguns webservice nao possuem esta proprieade, nestes webservice esta linha deve ser excluida
            // o valor "http://tempuri.org/CalcPrazo" foi obtido com base na região destacada em verde da figura 2.

            //fim da regiao a ser excluida caso o webservice nao possua a proprieade SOAPAction
            MessageFactory messageFactory = MessageFactory.newInstance();

            SOAPMessage msg = messageFactory.createMessage(headers, (new ByteArrayInputStream(requestSoap.getBytes())));

            SOAPMessage soapResponse = soapConnection.call(msg, url);

            Document xmlRespostaARequisicao = soapResponse.getSOAPBody().getOwnerDocument();
            Element raiz = xmlRespostaARequisicao.getDocumentElement();

            NodeList list = raiz.getElementsByTagName("Produtos");

            List<ProdutoAll> listProdAll = new ArrayList<>();

            for (int i = 0; i < list.getLength(); i++) {
                ProdutoAll prod = new ProdutoAll();
                Element endElement = (Element) list.item(i);
                // prod.setTIMESTAMP(Date.valueOf(getChildTagValue(endElement, "TIMESTAMP")));
                prod.setDEPARTAMENTO(getChildTagValue(endElement, "DEPARTAMENTO"));
                prod.setCATEGORIA(getChildTagValue(endElement, "CATEGORIA"));
                prod.setSUBCATEGORIA(getChildTagValue(endElement, "SUBCATEGORIA"));
                prod.setFABRICANTE(getChildTagValue(endElement, "FABRICANTE"));
                prod.setCODIGO(getChildTagValue(endElement, "CODIGO"));
                prod.setDESCRICAO(getChildTagValue(endElement, "DESCRICAO"));
                prod.setDESCRTEC(getChildTagValue(endElement, "DESCRTEC"));
                prod.setPARTNUMBER(getChildTagValue(endElement, "PARTNUMBER"));
                prod.setEAN(getChildTagValue(endElement, "EAN"));
                prod.setGARANTIA(Integer.parseInt(getChildTagValue(endElement, "GARANTIA")));
                prod.setPESOKG(new BigDecimal(getChildTagValue(endElement, "PESOKG")));
                prod.setPRECOREVENDA(new BigDecimal(getChildTagValue(endElement, "PRECOREVENDA")));
                prod.setPRECOSEMST(new BigDecimal(getChildTagValue(endElement, "PRECOSEMST")));
                prod.setDISPONIVEL(Integer.parseInt(getChildTagValue(endElement, "DISPONIVEL")));
                prod.setURLFOTOPRODUTO(getChildTagValue(endElement, "URLFOTOPRODUTO"));
                prod.setESTOQUE(getChildTagValue(endElement, "ESTOQUE"));
                prod.setNCM(getChildTagValue(endElement, "NCM"));
                prod.setLARGURA(new BigDecimal(getChildTagValue(endElement, "LARGURA")));
                prod.setALTURA(new BigDecimal(getChildTagValue(endElement, "ALTURA")));
                prod.setPROFUNDIDADE(new BigDecimal(getChildTagValue(endElement, "PROFUNDIDADE")));
                prod.setATIVO(Integer.parseInt(getChildTagValue(endElement, "ATIVO")));
                prod.setSUBSTTRIBUTARIA(Integer.parseInt(getChildTagValue(endElement, "SUBSTTRIBUTARIA")));
                prod.setORIGEMPRODUTO(getChildTagValue(endElement, "ORIGEMPRODUTO"));
                prod.setESTOQUEDISPONIVEL(new BigDecimal(getChildTagValue(endElement, "ESTOQUEDISPONIVEL")));
                if(prod.getESTOQUEDISPONIVEL().doubleValue() > 0.0){
                listProdAll.add(prod);
                }
            }
            if (listProdAll.size() > 0) {
                Comparator ordemNome = new OrdenaNomeAll();
                Collections.sort(listProdAll, ordemNome);
                new ImprimeRelatorio().imprimeRelatorioPeloJar("/integrador/relatorio/ListaProdutosAllNations.jrxml", listProdAll);
            } else {
                JOptionPane.showMessageDialog(null, "Não ha dados a serem impressos \n");
            }

        } catch (SOAPException ex) {
            JOptionPane.showMessageDialog(null, "Erro na conexão SOAP /n" + ex);
        } catch (UnsupportedOperationException | IOException ex) {
            JOptionPane.showMessageDialog(null, "Erro de leitura XML /n" + ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro de importação /n" + ex);
        }

    }

    private static String getChildTagValue(Element elem, String tagName) throws Exception {
        NodeList children = elem.getElementsByTagName(tagName);
        String result = null;
        //children, a tag pai que estamos lendo,
        // por exemplo a tag 
        if (children == null) {
            return result;
        }
        //child, a tag que queremos recuperar o valor, por exemplo
        //a tag 
        Element child = (Element) children.item(0);

        if (child == null) {
            return result;
        }
        //recuperamos o texto contido na tagName   
        result = child.getTextContent();

        return result;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaFornecedorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaFornecedorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaFornecedorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaFornecedorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaFornecedorJFrame().setVisible(true);
            }
        });
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonImportaNhs;
    private javax.swing.JButton jButtonImportarAllNations;
    private javax.swing.JButton jButtonImportarProdutosAgis;
    private javax.swing.JButton jButtonImportarProdutosColecao;
    private javax.swing.JButton jButtonImprimeAll;
    private javax.swing.JButton jButtonListaAlcateia;
    private javax.swing.JButton jButtonListaOderco;
    private javax.swing.JPanel jPanelConfiguracao;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
