/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janela.integrador;

import entidade.cplus.Calculoicms;
import entidade.cplus.Cliente;
import entidade.cplus.Clientecaracteristica;
import entidade.cplus.Produto;
import entidade.cplus.Produtocaracteristica;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Produtopreco;
import entidade.integrador.IntConfiguracao;
import entidade.integrador.IntExecucao;
import entidade.integrador.IntLogs;
import entidade.prestaShop.PsCart;
import entidade.prestaShop.PsCustomer;
import entidade.prestaShop.PsOrders;
import entidade.prestaShop.PsProduct;
import entidade.prestaShop.PsProductLang;
import entidade.prestaShop.PsStockAvailable;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.CalculoicmsJpaController;
import jpa.cplus.ProdutoJpaController;
import jpa.cplus.exceptions.NonexistentEntityException;
import jpa.integrador.IntConfiguracaoJpaController;
import jpa.integrador.IntExecucaoJpaController;
import jpa.integrador.IntLogsJpaController;
import pedido.AtualizaPedidoCplusDigimacro;
import pedido.ManutencaoCarrinhoSite;
import produto.ProdutoCplusDigimacro;
import produto.TaxRuleGroup;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;
import query.prestaShop.QueryPrestaShop;

/**
 *
 * @author leonardo
 */
public class IntegracaoJFrame extends javax.swing.JFrame {

    /**
     * Creates new form IntegracaoJFrame
     *
     * @param managerIntegrador1
     * @param managerCplus1
     * @param managerPrestaShop1
     */
    public IntegracaoJFrame(EntityManagerFactory managerIntegrador1, EntityManagerFactory managerCplus1, EntityManagerFactory managerPrestaShop1) {
        managerIntegrador = managerIntegrador1;
        managerCplus = managerCplus1;
        managerPrestaShop = managerPrestaShop1;
        //managerLegiao = managerMagentoLegiao1;
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        queryCplus = new QueryCplus(managerCplus);
        queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        initComponents();
        //executaManual = new Executa();
        condicaoParaBotaoIniciar = true;
        // integradorPUEntityManager.close();
        // var = var1;

        codCaracteristicaCliente = queryIntegrador.valorConfiguracao("cliente_CARACTERISTICA_CPLUS_DIGIMACRO");
        //shopUrl = queryIntegrador.valorConfiguracao("shopURL");
        //key = queryIntegrador.valorConfiguracao("shopKEY");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        insereIpIntegrador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jButton1 = new javax.swing.JButton();
        integradorPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("integradorPU").createEntityManager();
        logsDeExecucaoQuery = java.beans.Beans.isDesignTime() ? null : integradorPUEntityManager.createQuery("SELECT l FROM IntLogs l order by l.entityId desc").setMaxResults(200);
        intLogsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(logsDeExecucaoQuery.getResultList());
        jTabbedPaneIntegradorDigimacro = new javax.swing.JTabbedPane();
        jPanelintegradorDigimacro = new javax.swing.JPanel();
        jPanelDigimacroBotoes = new javax.swing.JPanel();
        jButtonAtualizaClienteCplusParaMagento = new javax.swing.JButton();
        jButtonAtualizaTaxa = new javax.swing.JButton();
        jButtonAtualizaPedido = new javax.swing.JButton();
        jButtonExecucao = new javax.swing.JButton();
        jButtonParaExecucao = new javax.swing.JButton();
        jButtonAtualizaProduto = new javax.swing.JButton();
        jComboBoxNewToDate = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonVerificarProdutos = new javax.swing.JButton();
        jCheckBoxVerificaProdutoIntegrado = new javax.swing.JCheckBox();
        jCheckBoxInativoComEstoque = new javax.swing.JCheckBox();
        jButtonAtualizaTodosProdutos = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jPanelLogs = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLogs = new javax.swing.JTable();
        jButtonAtualizaTabela = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBarIntegrador = new javax.swing.JProgressBar();
        jLabelTotalRegistro = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Integração");

        jPanelDigimacroBotoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Configurações"));

        jButtonAtualizaClienteCplusParaMagento.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonAtualizaClienteCplusParaMagento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        jButtonAtualizaClienteCplusParaMagento.setText("Atualiza Cliente");
        jButtonAtualizaClienteCplusParaMagento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizaClienteCplusParaMagentoActionPerformed(evt);
            }
        });

        jButtonAtualizaTaxa.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonAtualizaTaxa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cuidado.png"))); // NOI18N
        jButtonAtualizaTaxa.setText("Atualiza Taxas");
        jButtonAtualizaTaxa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizaTaxaActionPerformed(evt);
            }
        });

        jButtonAtualizaPedido.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonAtualizaPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        jButtonAtualizaPedido.setText("Atualiza Pedido");
        jButtonAtualizaPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizaPedidoActionPerformed(evt);
            }
        });

        jButtonExecucao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonExecucao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/play.png"))); // NOI18N
        jButtonExecucao.setText("Execução");
        jButtonExecucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecucaoActionPerformed(evt);
            }
        });

        jButtonParaExecucao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonParaExecucao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        jButtonParaExecucao.setText("Parar Integrador");
        jButtonParaExecucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParaExecucaoActionPerformed(evt);
            }
        });

        jButtonAtualizaProduto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonAtualizaProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        jButtonAtualizaProduto.setText("Atualiza Produto");
        jButtonAtualizaProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizaProdutoActionPerformed(evt);
            }
        });

        jComboBoxNewToDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7" }));
        jComboBoxNewToDate.setSelectedIndex(2);
        jComboBoxNewToDate.setToolTipText("");

        jLabel1.setText("Dias Para Frente Site:");

        jButtonVerificarProdutos.setText("Verifica divergencias de estoque e preços");
        jButtonVerificarProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerificarProdutosActionPerformed(evt);
            }
        });

        jCheckBoxVerificaProdutoIntegrado.setText("Verifica Produto Está no Site");

        jCheckBoxInativoComEstoque.setText("Verifica Inativo com Estoque Site");

        jButtonAtualizaTodosProdutos.setText("Atualizar todos produtos com estoque");
        jButtonAtualizaTodosProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizaTodosProdutosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDigimacroBotoesLayout = new javax.swing.GroupLayout(jPanelDigimacroBotoes);
        jPanelDigimacroBotoes.setLayout(jPanelDigimacroBotoesLayout);
        jPanelDigimacroBotoesLayout.setHorizontalGroup(
            jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDigimacroBotoesLayout.createSequentialGroup()
                .addGroup(jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAtualizaPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAtualizaClienteCplusParaMagento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVerificarProdutos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAtualizaProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxVerificaProdutoIntegrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxInativoComEstoque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxNewToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAtualizaTaxa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExecucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonParaExecucao, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)))
            .addGroup(jPanelDigimacroBotoesLayout.createSequentialGroup()
                .addComponent(jButtonAtualizaTodosProdutos)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelDigimacroBotoesLayout.setVerticalGroup(
            jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDigimacroBotoesLayout.createSequentialGroup()
                .addGroup(jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAtualizaClienteCplusParaMagento)
                    .addComponent(jButtonAtualizaTaxa)
                    .addComponent(jButtonAtualizaProduto)
                    .addComponent(jComboBoxNewToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExecucao)
                    .addComponent(jButtonAtualizaPedido)
                    .addComponent(jCheckBoxVerificaProdutoIntegrado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDigimacroBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonParaExecucao)
                    .addComponent(jButtonVerificarProdutos)
                    .addComponent(jCheckBoxInativoComEstoque))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAtualizaTodosProdutos)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jButtonSair.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/stop.png"))); // NOI18N
        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelintegradorDigimacroLayout = new javax.swing.GroupLayout(jPanelintegradorDigimacro);
        jPanelintegradorDigimacro.setLayout(jPanelintegradorDigimacroLayout);
        jPanelintegradorDigimacroLayout.setHorizontalGroup(
            jPanelintegradorDigimacroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDigimacroBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelintegradorDigimacroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelintegradorDigimacroLayout.setVerticalGroup(
            jPanelintegradorDigimacroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelintegradorDigimacroLayout.createSequentialGroup()
                .addComponent(jButtonSair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDigimacroBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneIntegradorDigimacro.addTab("Integração Digimacro", jPanelintegradorDigimacro);

        jPanelLogs.setBorder(javax.swing.BorderFactory.createTitledBorder("Logs de Processamento"));

        jTableLogs.setAutoCreateRowSorter(true);
        jTableLogs.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, intLogsList, jTableLogs);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tipoLog}"));
        columnBinding.setColumnName("Tipo Log");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${mensagem}"));
        columnBinding.setColumnName("Mensagem");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dataExecucao}"));
        columnBinding.setColumnName("Data Execucao");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entityId}"));
        columnBinding.setColumnName("Entity Id");
        columnBinding.setColumnClass(Integer.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTableLogs);
        if (jTableLogs.getColumnModel().getColumnCount() > 0) {
            jTableLogs.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableLogs.getColumnModel().getColumn(0).setCellRenderer(new integrador.render.RenderRedGreenLogs());
            jTableLogs.getColumnModel().getColumn(1).setPreferredWidth(600);
            jTableLogs.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTableLogs.getColumnModel().getColumn(2).setCellRenderer(new integrador.render.RenderDataEHora());
            jTableLogs.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jButtonAtualizaTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        jButtonAtualizaTabela.setText("Atualiza Tabela");
        jButtonAtualizaTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizaTabelaActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableLogs, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.mensagem}"), jTextArea1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanelLogsLayout = new javax.swing.GroupLayout(jPanelLogs);
        jPanelLogs.setLayout(jPanelLogsLayout);
        jPanelLogsLayout.setHorizontalGroup(
            jPanelLogsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanelLogsLayout.createSequentialGroup()
                .addComponent(jButtonAtualizaTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanelLogsLayout.setVerticalGroup(
            jPanelLogsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLogsLayout.createSequentialGroup()
                .addComponent(jButtonAtualizaTabela)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jProgressBarIntegrador.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jProgressBarIntegrador.setForeground(new java.awt.Color(0, 204, 51));
        jProgressBarIntegrador.setCursor(new java.awt.Cursor(java.awt.Cursor.E_RESIZE_CURSOR));
        jProgressBarIntegrador.setStringPainted(true);

        jLabelTotalRegistro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelTotalRegistro.setForeground(new java.awt.Color(0, 0, 204));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelLogs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPaneIntegradorDigimacro)
                    .addComponent(jProgressBarIntegrador, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelTotalRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPaneIntegradorDigimacro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarIntegrador, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabelTotalRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelLogs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecucaoActionPerformed
        if (condicaoParaBotaoIniciar) {
            condicaoParaBotaoIniciar = false;
            jButtonExecucao.setEnabled(false);
            condicao = true;
            execucaoAutomatica();
        }
    }//GEN-LAST:event_jButtonExecucaoActionPerformed

    private void jButtonParaExecucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParaExecucaoActionPerformed
        condicao = false;
        execucaoAutomatica();
    }//GEN-LAST:event_jButtonParaExecucaoActionPerformed

    private void jButtonAtualizaClienteCplusParaMagentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaClienteCplusParaMagentoActionPerformed
        // for (Cliente cli : queryCplus.listCaracteristicaCliente("000000004")) {
        //    new ClienteCplusDigimacro().atualizaClienteDigimacro(managerCplus, managerIntegrador, cli, managerPrestaShop);
        // }
        // new ClienteCplusDigimacro().atualizaClienteDigimacro(managerCplus, managerIntegrador, new ClienteJpaController(managerCplus).findCliente("00000001"), managerPrestaShop);
        integrarCliente(true);
    }//GEN-LAST:event_jButtonAtualizaClienteCplusParaMagentoActionPerformed

    private void jButtonAtualizaProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaProdutoActionPerformed
        //  new ProdutoCplusDigimacro().produtoCplusDigimacro(managerIntegrador, managerCplus, managerPrestaShop, new ProdutoJpaController(managerCplus).findProduto("000000730"));
        /// for(Produto prod : queryCplus.listProdutoCaracteristica("000000005"))
        integrarProduto(true);


    }//GEN-LAST:event_jButtonAtualizaProdutoActionPerformed

    private void jButtonAtualizaTaxaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaTaxaActionPerformed
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            if (condicaoParaBotaoIniciar) {
                condicaoParaBotaoIniciar = false;
                // executaManual.executaCalculoIcms(false, managerIntegracao, managerCplus, managerDigimacro);
                for (Calculoicms calIcms : new CalculoicmsJpaController(managerCplus).findCalculoicmsEntities()) {
                    new TaxRuleGroup().atualizarPsTaxRuleGroup(managerCplus, managerPrestaShop, calIcms);
                }
                condicaoParaBotaoIniciar = true;
            }
        }
    }//GEN-LAST:event_jButtonAtualizaTaxaActionPerformed

    private void jButtonAtualizaPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaPedidoActionPerformed
        if (condicaoParaBotaoIniciar) {
            condicaoParaBotaoIniciar = false;
            integrarCliente(true);
            atualizarPedido(true);
            integrarProduto(true);
            integrarEstoque();
            //  executaContasReceber();
            condicaoParaBotaoIniciar = true;
        }
        //new Executa().executaContasReceber(managerIntegracao, managerCplus, managerMagentoDigimacro);
    }//GEN-LAST:event_jButtonAtualizaPedidoActionPerformed

    private void jButtonAtualizaTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaTabelaActionPerformed
        atualizaLogs();
    }//GEN-LAST:event_jButtonAtualizaTabelaActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocalIntegracao());
        for (IntConfiguracao config : listConfig) {
            try {
                new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Integrador", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (condicao) {
            for (IntExecucao ex : new IntExecucaoJpaController(managerIntegrador).findIntExecucaoEntities()) {
                ex.setCondicao(1);
                try {
                    new IntExecucaoJpaController(managerIntegrador).edit(ex);
                } catch (Exception ex1) {
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR A EXECUÇÃO, Verifique!! \n" + ex1, "Erro Integrador", JOptionPane.ERROR_MESSAGE);
                }
            }
            dispose();
            setVisible(false);
        }
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonVerificarProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerificarProdutosActionPerformed
        new Thread(() -> {
            abrirFecharBotoes(false);
            List<PsProduct> prodPresta = queryPrestaShop.lisProdutoCachIsPack(false);
            int numRegistro = prodPresta.size();
            int count = 0;
            jProgressBarIntegrador.setMaximum(numRegistro);
            jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
            jProgressBarIntegrador.setMinimum(0);
            for (PsProduct pp : prodPresta) {
                jProgressBarIntegrador.setString(String.valueOf("Produtos Site verificados: " + count));
                List<Produto> prodCplus = queryCplus.listProduto(pp.getReference());
                if (prodCplus.isEmpty()) {
                    criaLog(new Date(System.currentTimeMillis()), ", O produto com EAN: " + pp.getEan13() + "\n está no site mas não deveria estar", "Erro Informar", managerIntegrador);
                } else {
                    for (Produto produto : prodCplus) {
                        List<PsStockAvailable> estok = queryPrestaShop.listEstoqueProduto(pp.getIdProduct());
                        for (PsStockAvailable ps : estok) {
                            if (ps.getPhysicalQuantity() != estoqueCplus(managerCplus, produto)) {
                                criaLog(new Date(System.currentTimeMillis()), ", O produto com EAN: " + pp.getEan13() + " está com estoque diferente \n"
                                        + "Estoque C-Plus: " + estoqueCplus(managerCplus, produto)
                                        + "\n Estoque Site: " + ps.getPhysicalQuantity(), "Erro Informar", managerIntegrador);
                                produto.setLastChange(new Date(System.currentTimeMillis()));
                                try {
                                    new ProdutoJpaController(managerCplus).edit(produto);
                                } catch (NonexistentEntityException ex) {
                                    JOptionPane.showMessageDialog(null, "Erro ao Atualizar Produto, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(null, "Erro ao Atualizar Produto, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                        double prC = precoPrincipal(managerCplus, produto).doubleValue();
                        double prP = pp.getPrice().doubleValue();
                        if (prC != prP) {
                            for (PsProductLang lan : queryPrestaShop.listPsProductLang(pp.getIdProduct(), 2)) {
                                criaLog(new Date(System.currentTimeMillis()), ", O produto: " + lan.getName() + " está com preço diferente \n"
                                        + "Preço C-Plus: " + precoPrincipal(managerCplus, produto)
                                        + "\n Preço Site: " + pp.getPrice(), "Erro Informar", managerIntegrador);
                                produto.setLastChange(new Date(System.currentTimeMillis()));
                                try {
                                    new ProdutoJpaController(managerCplus).edit(produto);
                                } catch (NonexistentEntityException ex) {
                                    JOptionPane.showMessageDialog(null, "Erro ao Atualizar Produto, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(null, "Erro ao Atualizar Produto, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                        if (jCheckBoxInativoComEstoque.isSelected()) {
                            if (pp.getActive() == false && estoqueCplus(managerCplus, produto) > 0) {
                                criaLog(new Date(System.currentTimeMillis()), ", O produto: " + produto.getNomeprod() + " está com estoque e inativo\n",
                                        "Erro Informar", managerIntegrador);
                                produto.setLastChange(new Date(System.currentTimeMillis()));
                                try {
                                    new ProdutoJpaController(managerCplus).edit(produto);
                                } catch (NonexistentEntityException ex) {
                                    JOptionPane.showMessageDialog(null, "Erro ao Atualizar Produto, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(null, "Erro ao Atualizar Produto, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                    }
                }
                count++;
                jProgressBarIntegrador.setValue(count);
                jLabelTotalRegistro.setText(count + " de " + numRegistro + " Registros");
            }
            if (jCheckBoxVerificaProdutoIntegrado.isSelected()) {
                boolean existe;
                List<Produto> listProd = queryCplus.listProdutoCaracteristica("000000005");
                numRegistro = listProd.size();
                count = 0;
                jProgressBarIntegrador.setMaximum(numRegistro);
                jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
                jProgressBarIntegrador.setMinimum(0);
                for (Produto prod : listProd) {
                    jProgressBarIntegrador.setString(String.valueOf("Produtos Site Cplus: " + count));
                    existe = true;
                    if (estoqueCplus(managerCplus, prod) > 0) {
                        for (PsProduct pp : prodPresta) {
                            if (prod.getCodprod() == null ? pp.getReference() == null : prod.getCodprod().equals(pp.getReference())) {
                                existe = false;
                            }
                        }
                        if (existe) {
                            criaLog(new Date(System.currentTimeMillis()), ", O produto: " + prod.getNomeprod() + "\n Não está no site ", "Erro Informar", managerIntegrador);
                        }
                    }
                    count++;
                    jProgressBarIntegrador.setValue(count);
                    jLabelTotalRegistro.setText(count + " de " + numRegistro + " Registros");
                }
            }
            abrirFecharBotoes(true);
        }).start();

    }//GEN-LAST:event_jButtonVerificarProdutosActionPerformed

    private void jButtonAtualizaTodosProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaTodosProdutosActionPerformed
        atualizaTodosProdutosComEstoque();
    }//GEN-LAST:event_jButtonAtualizaTodosProdutosActionPerformed

    private void atualizaTodosProdutosComEstoque() {
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente executar essa tarefa", "Executar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            new Thread(() -> {
                abrirFecharBotoes(false);
                for (Produto proCplus : new ProdutoJpaController(managerCplus).findProdutoEntities()) {
                    if (estoqueCplus(managerCplus, proCplus) > 0) {
                        proCplus.setLastChange(new Date(System.currentTimeMillis()));
                        try {
                            new ProdutoJpaController(managerCplus).edit(proCplus);
                        } catch (NonexistentEntityException ex) {
                            Logger.getLogger(IntegracaoJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            Logger.getLogger(IntegracaoJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                abrirFecharBotoes(true);
            }).start();
        }
    }

    private BigDecimal precoPrincipal(EntityManagerFactory managerCplus, Produto proCplus) {
        BigDecimal preco = BigDecimal.ZERO;
        List<Produtopreco> listPreco = new QueryCplus(managerCplus).listPrecos(proCplus.getCodprod(), "000000001");
        for (Produtopreco pr : listPreco) {
            preco = pr.getPreco().multiply(new BigDecimal("1.11"));
        }
        return preco.setScale(2, RoundingMode.HALF_UP);
    }

    private Integer estoqueCplus(EntityManagerFactory managerCplus, Produto proCplus) {
        BigDecimal estoque = BigDecimal.ZERO;
        int stock;
        List<Produtoestoque> listEsroque = new QueryCplus(managerCplus).listEstoquesPorProd(proCplus.getCodprod());
        for (Produtoestoque est : listEsroque) {
            estoque = est.getEstatu().subtract(est.getReservadoorcamento().subtract(est.getReservadoos()));
        }
        stock = estoque.intValue();
        return stock;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntegracaoJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntegracaoJFrame(managerIntegrador, managerCplus, managerPrestaShop).setVisible(true);
            }
        });
    }

    private void integrarProduto(boolean manual) {
        IntExecucao exeProduto = new IntExecucaoJpaController(managerIntegrador).findIntExecucao("produto");
        if (exeProduto.getCondicao() == 1) {
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(exeProduto, 0, managerIntegrador);
            boolean condicaoErro = true;
            int cont = 0;
            Calendar dataAtual = Calendar.getInstance();
            dataAtual.setTime(new Date(System.currentTimeMillis()));
            Calendar dataBanco = Calendar.getInstance();
            dataBanco.setTime(exeProduto.getUltimaExecucao());
            dataBanco.add(Calendar.SECOND, exeProduto.getTempo());
            if (dataAtual.after(dataBanco) || manual) {
                Calendar fimExecucao = Calendar.getInstance();
                fimExecucao.setTime(new Date(System.currentTimeMillis()));
                // List<Produto> listaProdCplus = queryCplus.listDataAtualizacao(exeCliente.getUltimaExecucao(), fimExecucao.getTime());
                //List<Produto> listaProdCplus = queryCplus.listDataAtualizacao(exeProduto.getUltimaExecucao());              
                List<Produto> listaProdCplus = queryCplus.listLastChange(exeProduto.getUltimaExecucao());
                int numRegistro = listaProdCplus.size();
                jProgressBarIntegrador.setMaximum(numRegistro);
                jProgressBarIntegrador.setMinimum(cont);
                jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
                for (Produto proCplus : listaProdCplus) {
                    List<Produtocaracteristica> lisCar = queryCplus.listCaracteristicaProduto(proCplus.getCodprod());
                    if (lisCar.size() == 1) {
                        if (new ProdutoCplusDigimacro().produtoCplusDigimacro(managerIntegrador, managerCplus, managerPrestaShop, proCplus) == false) {
                            condicaoErro = false;
                            criaLog(proCplus.getLastChange(), ", Erro ao Atualizar produto C-Plus Integrador Digimacro, Produto: " + proCplus.getNomeprod(), "Erro Editar", managerIntegrador);
                        }
                    }
                    jProgressBarIntegrador.setString(String.valueOf("Atualizando Produto: " + proCplus.getNomeprod()));
                    cont++;
                    jLabelTotalRegistro.setText(cont + " de " + numRegistro + " Registros");
                    jProgressBarIntegrador.setValue(cont);
                }
                if (condicaoErro == true) {
                    fimExecucao.add(Calendar.SECOND, -200);
                    new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorData(exeProduto, fimExecucao.getTime(), managerIntegrador);
                }
            }
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(exeProduto, 1, managerIntegrador);
        }
        jProgressBarIntegrador.setString("");
        jProgressBarIntegrador.setMinimum(0);
        jProgressBarIntegrador.setValue(0);
    }

    private void atualizarPedido(boolean manual) {
        IntExecucao execucaoAjustaPedido = new IntExecucaoJpaController(managerIntegrador).findIntExecucao("ajusta_pedido");
        boolean condicao = true;
        if (execucaoAjustaPedido.getCondicao() == 1) {
            Calendar dataAtual = Calendar.getInstance();
            dataAtual.setTime(new Date(System.currentTimeMillis()));
            Calendar dataBanco = Calendar.getInstance();
            dataBanco.setTime(execucaoAjustaPedido.getUltimaExecucao());
            dataBanco.add(Calendar.SECOND, execucaoAjustaPedido.getTempo());
            if (dataAtual.after(dataBanco) || manual) {
                new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(execucaoAjustaPedido, 0, managerIntegrador);
                List<Integer> list = new ArrayList<>();
                list.add(1);
                list.add(2);
                list.add(3);
                list.add(4);
                list.add(10);
                List<PsOrders> listPsOrders = queryPrestaShop.listPsOrdersState(list);
                int numRegistro = listPsOrders.size();
                int cont = 0;
                jProgressBarIntegrador.setMaximum(numRegistro);
                jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
                jProgressBarIntegrador.setMinimum(0);
                for (PsOrders order : listPsOrders) {
                    // PsCustomer cus = new PsCustomerJpaController(managerPrestaShop).findPsCustomer(order.getIdCustomer());
                    String text = "";
                    for (PsCustomer cus : queryPrestaShop.listCustomer(order.getIdCustomer())) {
                        text = cus.getFirstname()
                                + " " + cus.getLastname();
                    }
                    if (1 == order.getCurrentState()) {
                        jProgressBarIntegrador.setString(String.valueOf("Atualizando Pedido: " + text + " Não Faturado"));
                    } else {
                        jProgressBarIntegrador.setString(String.valueOf("Atualizando Pedido: " + order.getReference() + " Numero Pedido: " + order.getIdOrder()));
                    }
                    new AtualizaPedidoCplusDigimacro().atualizarPedido(managerIntegrador, managerPrestaShop, managerCplus, order);
                    cont++;
                    jProgressBarIntegrador.setValue(cont);
                    jLabelTotalRegistro.setText(cont + " de " + numRegistro + " Registros");
                    if (condicao) {
                        new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorData(execucaoAjustaPedido, new Date(System.currentTimeMillis()), managerIntegrador);
                    }
                }
                new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(execucaoAjustaPedido, 1, managerIntegrador);
            }//fim if que verifica se ha execuÃ§Ã£o
        }
        jProgressBarIntegrador.setString("");
        jProgressBarIntegrador.setMinimum(0);
        jProgressBarIntegrador.setValue(0);
    }

    private void DeletarCarrinhoVazio() {
        IntExecucao exeCart = new IntExecucaoJpaController(managerIntegrador).findIntExecucao("deletar_carrinho_vazio");
        if (exeCart.getCondicao() == 1) {
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(exeCart, 0, managerIntegrador);
            boolean condicaoErro = true;
            Calendar dataAtual = Calendar.getInstance();
            dataAtual.setTime(new Date(System.currentTimeMillis()));
            Calendar dataBanco = Calendar.getInstance();

            dataBanco.setTime(exeCart.getUltimaExecucao());
            dataBanco.add(Calendar.SECOND, exeCart.getTempo());
            if (dataAtual.after(dataBanco)) {
                Calendar inicioExecucao = Calendar.getInstance();
                inicioExecucao.setTime(exeCart.getUltimaExecucao());
                //inicioExecucao.add(Calendar.DAY_OF_MONTH, -2);
                //Date dataAtual = new Date(System.currentTimeMillis());
                Calendar fimExecucao = Calendar.getInstance();
                fimExecucao.setTime(dataAtual.getTime());
                List<PsCart> listCart = queryPrestaShop.listCartMenorData(inicioExecucao.getTime());
                int cont = 0;
                jProgressBarIntegrador.setMinimum(cont);
                int numRegistro = listCart.size();
                jProgressBarIntegrador.setMaximum(numRegistro);
                jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
                for (PsCart cart : listCart) {
                    //String cod = cliC.getCodcli();
                    List<PsCustomer> listCustomer = queryPrestaShop.listCustomer(cart.getIdCustomer());
                    for (PsCustomer cus : listCustomer) {
                        jProgressBarIntegrador.setString(String.valueOf("Deletando Carrinho do Cliente: " + cus.getFirstname()));
                    }
                                      
                    new ManutencaoCarrinhoSite().DeletaCarrinhoVazio(cart, managerPrestaShop);
                    cont++;
                    jLabelTotalRegistro.setText(cont + " de " + numRegistro + " Registros");
                    jProgressBarIntegrador.setValue(cont);
                }
                if (condicaoErro == true) {
                    fimExecucao.add(Calendar.MINUTE, -5);
                    new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorData(exeCart, fimExecucao.getTime(), managerIntegrador);
                    criaLog(new Date(System.currentTimeMillis()), "Exclusão de Carrinhos vazios executada com sucesso: ", "Informar", managerIntegrador);
                }
            }
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(exeCart, 1, managerIntegrador);
            jProgressBarIntegrador.setString("");
            jProgressBarIntegrador.setMinimum(0);
            jProgressBarIntegrador.setValue(0);
        }//if que verifica se está em execução
    }

    private void integrarCliente(boolean manual) {
        IntExecucao exeCliente = new IntExecucaoJpaController(managerIntegrador).findIntExecucao("cliente_integrador");
        if (exeCliente.getCondicao() == 1) {
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(exeCliente, 0, managerIntegrador);
            boolean condicaoErro = true;
            Calendar dataAtual = Calendar.getInstance();
            dataAtual.setTime(new Date(System.currentTimeMillis()));
            Calendar dataBanco = Calendar.getInstance();

            dataBanco.setTime(exeCliente.getUltimaExecucao());
            dataBanco.add(Calendar.SECOND, exeCliente.getTempo());
            if (dataAtual.after(dataBanco) || manual) {
                Calendar inicioExecucao = Calendar.getInstance();
                inicioExecucao.setTime(exeCliente.getUltimaExecucao());
                inicioExecucao.add(Calendar.MINUTE, -10);
                //Date dataAtual = new Date(System.currentTimeMillis());
                Calendar fimExecucao = Calendar.getInstance();
                fimExecucao.setTime(dataAtual.getTime());
                List<Cliente> listClienteCplusDigi = queryCplus.listClienteData(inicioExecucao);
                int cont = 0;
                jProgressBarIntegrador.setMinimum(cont);
                int numRegistro = listClienteCplusDigi.size();
                jProgressBarIntegrador.setMaximum(numRegistro);
                jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
                for (Cliente cliC : listClienteCplusDigi) {
                    //String cod = cliC.getCodcli();
                    List<Clientecaracteristica> lisCar = queryCplus.listClienteCaracteristica(codCaracteristicaCliente, cliC.getCodcli());
                    if (lisCar.size() == 1) {
                        new ClienteCplusDigimacro().atualizaClienteDigimacro(managerCplus, managerIntegrador, cliC, managerPrestaShop);
                        jProgressBarIntegrador.setString(String.valueOf("Atualização Cliente: " + cliC.getNomecli()));
                    } else {
                        jProgressBarIntegrador.setString(String.valueOf("Cliente não Integrado: " + cliC.getNomecli()));
                    }
                    jProgressBarIntegrador.setString(String.valueOf("Atualização Cliente: " + cliC.getNomecli()));
                    cont++;
                    jLabelTotalRegistro.setText(cont + " de " + numRegistro + " Registros");
                    jProgressBarIntegrador.setValue(cont);
                }
                if (condicaoErro == true) {
                    fimExecucao.add(Calendar.MINUTE, -5);
                    new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorData(exeCliente, fimExecucao.getTime(), managerIntegrador);
                }
            }
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(exeCliente, 1, managerIntegrador);
            jProgressBarIntegrador.setString("");
            jProgressBarIntegrador.setMinimum(0);
            jProgressBarIntegrador.setValue(0);
        }//if que verifica se estÃ¡ em execuÃ§Ã£o
    }

    private int newToDate() {
        int valor;
        switch (jComboBoxNewToDate.getSelectedIndex()) {
            case 0:
                valor = 24;
                break;
            case 1:
                valor = 48;
                break;
            case 2:
                valor = 72;
                break;
            case 3:
                valor = 96;
                break;
            case 4:
                valor = 120;
                break;
            case 5:
                valor = 144;
                break;
            case 6:
                valor = 168;
                break;
            default:
                valor = 48;
        }
        return valor;
    }

    private void integrarEstoque() {
        IntExecucao execucaoEstoque = new IntExecucaoJpaController(managerIntegrador).findIntExecucao("ajusta_estoque");
        if (execucaoEstoque.getCondicao() == 1) {
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(execucaoEstoque, 0, managerIntegrador);
            int cont = 0;
            Calendar dataAtual = Calendar.getInstance();
            dataAtual.setTime(new Date(System.currentTimeMillis()));
            Calendar dataBanco = Calendar.getInstance();

            dataBanco.setTime(execucaoEstoque.getUltimaExecucao());
            dataBanco.add(Calendar.SECOND, execucaoEstoque.getTempo());
            if (dataAtual.after(dataBanco)) {
                boolean condicaoErro = true;
                Calendar inicioExecucao = Calendar.getInstance();
                inicioExecucao.setTime(execucaoEstoque.getUltimaExecucao());
                Calendar fimExecucao = Calendar.getInstance();
                fimExecucao.setTime(new Date(System.currentTimeMillis()));

                List<Produtoestoque> listProdEstoque = queryCplus.resultProData(inicioExecucao);
                int numRegistro = listProdEstoque.size();
                cont = 0;
                jProgressBarIntegrador.setMinimum(cont);
                jProgressBarIntegrador.setMaximum(numRegistro);
                jLabelTotalRegistro.setText("0 de " + numRegistro + " Registros");
                for (Produtoestoque pe : listProdEstoque) {
                   List<Produtocaracteristica> lisCar = queryCplus.listCaracteristicaProduto(pe.getProduto().getCodprod());
                    if (lisCar.size() == 1) {
                    if (new ProdutoCplusDigimacro().produtoCplusDigimacroEstoque(managerIntegrador, managerCplus, managerPrestaShop, pe.getProduto()) == false) {
                        condicaoErro = false;
                        criaLog(pe.getLastChange(), ", Erro ao Atualizar produto C-Plus Integrador Digimacro, Produto: " + pe.getProduto().getNomeprod(), "Erro Editar", managerIntegrador);
                    }
                    }
                    jProgressBarIntegrador.setString(String.valueOf("Atualizando Produto: " + pe.getProduto().getNomeprod()));
                    jLabelTotalRegistro.setText(cont + " de " + numRegistro + " Registros");
                    cont++;
                    jProgressBarIntegrador.setValue(cont);
                }
                if (condicaoErro == true) {
                    fimExecucao.add(Calendar.SECOND, -20);
                    //execucaoEstoque.setUltimaExecucao(fimExecucao.getTime());
                    new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorData(execucaoEstoque, fimExecucao.getTime(), managerIntegrador);
                    //criaLog(fimExecucao.getTime(), " Ajuste de Estoque Executado com sucesso!!  ", "Ediï¿½ï¿½o", managerIntegracao);                                      
                }
            }
            new AtualizaExecucaoIntegrador().atualizaExecucaoIntegradorCondicao(execucaoEstoque, 1, managerIntegrador);
        } else {//fim if que verifica se já está sendo executado
            criaLog(new Date(System.currentTimeMillis()), "A execução do Estoque está desativada, verificar no banco de dados integrador: ", "Erro Informar", managerIntegrador);
        }
        jProgressBarIntegrador.setString("");
        jProgressBarIntegrador.setValue(0);
    }

    private void criaLog(Date dataExecucao, String mensagem, String tipoLog, EntityManagerFactory managerIntegracao) {
        IntLogs log = new IntLogs();
        log.setDataExecucao(dataExecucao);

        log.setMensagem(mensagem);
        log.setTipoLog(tipoLog);
        new IntLogsJpaController(managerIntegracao).create(log);
    }

    private void abrirFecharBotoes(boolean condicao) {
        jButtonAtualizaClienteCplusParaMagento.setEnabled(condicao);
        jButtonAtualizaTaxa.setEnabled(condicao);

        jButtonAtualizaProduto.setEnabled(condicao);
        jButtonExecucao.setEnabled(condicao);
        jButtonAtualizaPedido.setEnabled(condicao);

        jButtonParaExecucao.setEnabled(condicao);

        jProgressBarIntegrador.setValue(0);
        jProgressBarIntegrador.setString(String.valueOf(""));
        jLabelTotalRegistro.setText("");
        //jButton1.setEnabled(condicao);
        jButtonVerificarProdutos.setEnabled(condicao);
        jButtonAtualizaTodosProdutos.setEnabled(condicao);
    }

    private void atualizaLogs() {
        intLogsList.clear();
        List<IntLogs> exe = queryIntegrador.resultLogs();
        for (IntLogs log : exe) {
            intLogsList.add(log);
        }
    }

    private void execucaoAutomatica() {
        new Thread(() -> {
            while (condicao) {
                try {
                    abrirFecharBotoes(false);
                    jButtonParaExecucao.setEnabled(false);
                    integrarCliente(false);
                    //execucaoAutomaticaCliente();
                    atualizarPedido(false);
                    //execucaoAutomaticaAjustaPedido();
                    integrarProduto(false);
                    // execucaoAutomaticaProduto(jCheckBoxExecutaIntegracaoLegiao.isSelected());
                    integrarEstoque();

                    
                    DeletarCarrinhoVazio();
                    atualizaLogs();
                    jButtonParaExecucao.setEnabled(true);
                    jProgressBarIntegrador.setString(String.valueOf(""));
                    jLabelTotalRegistro.setText("");
                    Thread.sleep(120000);
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(null, "Houve um erro na execução automatica! \n" + ex);
                }
            }
            condicaoParaBotaoIniciar = true;//quando parar execuï¿½ï¿½o vai carregar variavel para executar novamente
        }).start();
        abrirFecharBotoes(true);
    }

    private boolean insereIpIntegrador() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocalIntegracao());
        if (listConfig.isEmpty()) {
            IntConfiguracao c = new IntConfiguracao();
            c.setTipo(retornaIpLocalIntegracao());
            c.setDescricao("Maquina onde está sendo executado o Integrador");
            c.setDataAtualizacao(new Date(System.currentTimeMillis()));
            c.setValor("integracao_1");
            c.setDataCriacao(new Date(System.currentTimeMillis()));
            try {
                new IntConfiguracaoJpaController(managerIntegrador).create(c);
            } catch (Exception ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO CRIAR CONFIGURACAO, Verifique!! \n" + ex, "Erro Integrador", JOptionPane.ERROR_MESSAGE);
            }
        } else if (listConfig.size() == 1) {
            for (IntConfiguracao config : listConfig) {
                config.setValor("integracao_1");
                try {
                    new IntConfiguracaoJpaController(managerIntegrador).edit(config);
                } catch (Exception ex) {
                    condicao = false;
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR CONFIGURACAO, Verifique!! \n" + ex, "Erro Integrador", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            int cont = 0;
            for (IntConfiguracao config : listConfig) {
                if (cont > 0) {
                    try {
                        new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
                    } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                        condicao = false;
                        JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Integrador", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        return condicao;
    }

    private String retornaIpLocalIntegracao() {
        InetAddress ia = null;
        try {
            ia = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO OBTER IP LOCAL, Verifique!! \n" + e, "Erro Integrador", JOptionPane.ERROR_MESSAGE);
        }
        return "integracao_" + ia.getHostAddress() + "_" + ia.getHostName();
    }

    boolean condicao;
    boolean condicaoParaBotaoIniciar;
    private final QueryIntegrador queryIntegrador;
    private final QueryCplus queryCplus;
    private final QueryPrestaShop queryPrestaShop;
    private static EntityManagerFactory managerIntegrador;
    private static EntityManagerFactory managerCplus;
    private static EntityManagerFactory managerPrestaShop;
    private final String codCaracteristicaCliente;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<entidade.integrador.IntLogs> intLogsList;
    private javax.persistence.EntityManager integradorPUEntityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAtualizaClienteCplusParaMagento;
    private javax.swing.JButton jButtonAtualizaPedido;
    private javax.swing.JButton jButtonAtualizaProduto;
    private javax.swing.JButton jButtonAtualizaTabela;
    private javax.swing.JButton jButtonAtualizaTaxa;
    private javax.swing.JButton jButtonAtualizaTodosProdutos;
    private javax.swing.JButton jButtonExecucao;
    private javax.swing.JButton jButtonParaExecucao;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonVerificarProdutos;
    private javax.swing.JCheckBox jCheckBoxInativoComEstoque;
    private javax.swing.JCheckBox jCheckBoxVerificaProdutoIntegrado;
    private javax.swing.JComboBox<String> jComboBoxNewToDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelTotalRegistro;
    private javax.swing.JPanel jPanelDigimacroBotoes;
    private javax.swing.JPanel jPanelLogs;
    private javax.swing.JPanel jPanelintegradorDigimacro;
    private javax.swing.JProgressBar jProgressBarIntegrador;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneIntegradorDigimacro;
    private javax.swing.JTable jTableLogs;
    private javax.swing.JTextArea jTextArea1;
    private javax.persistence.Query logsDeExecucaoQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
