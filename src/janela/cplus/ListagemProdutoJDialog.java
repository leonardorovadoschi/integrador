/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janela.cplus;

import entidade.cplus.Localizacao;
import entidade.cplus.Produto;
import entidade.cplus.Produtoestoque;
import integrador.render.produto.RenderEstoqueDisponivel;
import integrador.render.produto.RenderLocalizacao;
import integrador.separacao.ColorirLinhaImpar;
import integrador.separacao.ColorirTabelaEntradaSerial;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import jpa.cplus.ProdutoJpaController;
import query.cplus.QueryCplus;

/**
 *
 * @author leonardo
 */
public class ListagemProdutoJDialog extends javax.swing.JDialog {

    /**
     * Creates new form ListagemProdutoJDialog
     *
     * @param parent
     * @param modal
     * @param managerCplus1
     */
    public ListagemProdutoJDialog(java.awt.Frame parent, boolean modal, EntityManagerFactory managerCplus1) {
        super(parent, modal);
        initComponents();
        managerCplus = managerCplus1;
        queryCplus = new QueryCplus(managerCplus);
        formatacaoCampos = new FormataCampos();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        this.listagemLocalizacaoJDialog = new ListagemLocalizacaoJDialog(parent, true, managerCplus);
        //new RenderEstoqueDisponivel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cplusPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("cplusPU").createEntityManager();
        produtoQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT p FROM Produto p where p.codprod =0000000");
        produtoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(produtoQuery.getResultList());
        jPanelPesquisa = new javax.swing.JPanel();
        jComboBoxTipo = new javax.swing.JComboBox();
        jTextFieldTermoDaPesquisa = new javax.swing.JTextField();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonOk = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jCheckBoxAtivo = new javax.swing.JCheckBox();
        jButtonEditarSetorEstoque = new javax.swing.JButton();
        jTextFieldMaxResult = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProdutos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelPesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa"));

        jComboBoxTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome ou Codigo" }));
        jComboBoxTipo.setFocusable(false);

        jTextFieldTermoDaPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTermoDaPesquisaActionPerformed(evt);
            }
        });

        jButtonPesquisar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jButtonOk.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ok.png"))); // NOI18N
        jButtonOk.setText("OK!");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jCheckBoxAtivo.setText("Ativo:");

        jButtonEditarSetorEstoque.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonEditarSetorEstoque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Edit.png"))); // NOI18N
        jButtonEditarSetorEstoque.setText("Editar Setor Estoque");
        jButtonEditarSetorEstoque.setEnabled(false);
        jButtonEditarSetorEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarSetorEstoqueActionPerformed(evt);
            }
        });

        jTextFieldMaxResult.setText("20");

        jLabel1.setText("Máximo de Resultados:");

        javax.swing.GroupLayout jPanelPesquisaLayout = new javax.swing.GroupLayout(jPanelPesquisa);
        jPanelPesquisa.setLayout(jPanelPesquisaLayout);
        jPanelPesquisaLayout.setHorizontalGroup(
            jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                .addGroup(jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                        .addComponent(jCheckBoxAtivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)))
                .addGroup(jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                        .addComponent(jTextFieldMaxResult, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButtonEditarSetorEstoque)
                        .addGap(27, 27, 27)
                        .addComponent(jButtonOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCancelar))
                    .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                        .addComponent(jTextFieldTermoDaPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButtonPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelPesquisaLayout.setVerticalGroup(
            jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                .addGroup(jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTermoDaPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonCancelar)
                    .addComponent(jCheckBoxAtivo)
                    .addComponent(jButtonEditarSetorEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMaxResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Uidade", "Setor", "Estoque", "Codprod"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProdutos.getTableHeader().setReorderingAllowed(false);
        jTableProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProdutos);
        if (jTableProdutos.getColumnModel().getColumnCount() > 0) {
            jTableProdutos.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTableProdutos.getColumnModel().getColumn(1).setPreferredWidth(340);
            jTableProdutos.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTableProdutos.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTableProdutos.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 336, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        pesquisas();
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        finalizacao();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        cancelamento();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonEditarSetorEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarSetorEstoqueActionPerformed
        this.listagemLocalizacaoJDialog.setVisible(true);
        if (this.listagemLocalizacaoJDialog.isCancelamento() == false) {
            for (Produto p : queryCplus.listProduto(getProduto().getCodprod())) {
                try {
                    p.setCodloc(this.listagemLocalizacaoJDialog.getLocalizacao().getCodloc());
                    new ProdutoJpaController(managerCplus).edit(p);
                    pesquisas();
                } catch (jpa.cplus.exceptions.NonexistentEntityException ex) {
                    JOptionPane.showMessageDialog(null, "Houve um ero ao editar produto! \n" + ex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Houve um ero ao editar produto! \n" + ex);
                }
            }
        }
    }//GEN-LAST:event_jButtonEditarSetorEstoqueActionPerformed

    private void jTableProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutosMouseClicked
        int colunaCodMoVenda = jTableProdutos.getColumnModel().getColumnIndex("Codprod");
        String cod = jTableProdutos.getValueAt(jTableProdutos.getSelectedRow(), colunaCodMoVenda).toString();
        if (cod != null) {
            setProduto(new ProdutoJpaController(managerCplus).findProduto(cod));
            jButtonEditarSetorEstoque.setEnabled(true);
        }
    }//GEN-LAST:event_jTableProdutosMouseClicked

    private void jTextFieldTermoDaPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTermoDaPesquisaActionPerformed
       pesquisas();
    }//GEN-LAST:event_jTextFieldTermoDaPesquisaActionPerformed

    public void setTermoPesquisa(String termo) {
        jComboBoxTipo.setSelectedIndex(0);
        jTextFieldTermoDaPesquisa.setText(termo);
        jTextFieldTermoDaPesquisa.selectAll();
        this.termoPesquisa = termo;
        List<Produto> listP = new ArrayList<>();       
        if (!"".equals(termoPesquisa)) {
            listP = queryCplus.resultPorNomeProdutoOuCodigo(termoPesquisa, jCheckBoxAtivo.isSelected(), maximoResultado(jTextFieldMaxResult.getText()));
            if (listP.size() < 1) {
                JOptionPane.showMessageDialog(null, "Não foi encontrado resultado para essa pesquisa!!! ");
            } else {
                produtoList.clear();
                for (Produto sai : listP) {
                    produtoList.add(sai);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "A digite algo na pesquisa!!! ");
        }
        carregarTabela(listP);
        jButtonEditarSetorEstoque.setEnabled(false);
    }

    private void cancelamento() {
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente cancelar? \n O processo será encerrado!!", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            setCancelamento(true);
            dispose();
        }
    }

    private void finalizacao() {
        int colunaCodMoVenda = jTableProdutos.getColumnModel().getColumnIndex("Codprod");
        if (jTableProdutos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela!!! ");
        } else {
            String cod = jTableProdutos.getValueAt(jTableProdutos.getSelectedRow(), colunaCodMoVenda).toString();
            if (cod != null) {
                setProduto(new ProdutoJpaController(managerCplus).findProduto(cod));
                setCancelamento(false);
                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "O Cdigo está nullo por favor verifique!!! ");
            }
        }
    }

    private Integer maximoResultado(String txt) {
        boolean condicao = true;
        if (txt == null || txt.equals("")) {
            condicao = false;
        }
        for (int i = 0; i < txt.length(); i++) {
            char c = txt.charAt(i);
            if (c < '0' || c > '9') {
                condicao = false;
            }
        }
        int maxResult = 20;
        if (condicao) {
            maxResult = Integer.parseInt(this.jTextFieldMaxResult.getText());
        } else {
            maxResult = 30;
            jTextFieldMaxResult.setText("30");
            JOptionPane.showMessageDialog(null, "São aceitos apenas numeros!!! ");
        }
        return maxResult;
    }

    private void pesquisas() {
        List<Produto> listP = new ArrayList<>();     
        switch (jComboBoxTipo.getSelectedIndex()) {
            case 0://por numero do pedido 
                produtoList.clear();
                if (!"".equals(jTextFieldTermoDaPesquisa.getText())) {
                    listP = queryCplus.resultPorNomeProdutoOuCodigo(jTextFieldTermoDaPesquisa.getText(), jCheckBoxAtivo.isSelected(), maximoResultado(jTextFieldMaxResult.getText()));
                    if (listP.size() < 1) {
                        JOptionPane.showMessageDialog(null, "Não foi encontrado resultado para essa pesquisa!!! ");
                    } else {
                        for (Produto sai : listP) {
                            produtoList.add(sai);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "A digite algo na pesquisa!!! ");
                }
                carregarTabela(listP);
                break;
        }
        jTextFieldTermoDaPesquisa.selectAll();
        jButtonEditarSetorEstoque.setEnabled(false);
    }

    private void carregarTabela(List<Produto> listProd) {
        DefaultTableModel tab = (DefaultTableModel) jTableProdutos.getModel();
        while (jTableProdutos.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableProdutos.getModel()).removeRow(0);
        }
        for (Produto prod : listProd) {
            tab.addRow(new Object[]{prod.getCodigo(), prod.getNomeprod(), prod.getUnidade(), setor(prod), EstoqueCplus(prod.getCodprod()), prod.getCodprod()});
            TableCellRenderer rendererSeparado = new ColorirLinhaImpar();
            for (int c = 0; c < jTableProdutos.getColumnCount(); c++) {
                jTableProdutos.setDefaultRenderer(jTableProdutos.getColumnClass(c), rendererSeparado);
            }
        }
    }

    private Integer EstoqueCplus(String codProd) {
        BigDecimal estoque = BigDecimal.ZERO;
        List<Produtoestoque> listEsroque = new QueryCplus(managerCplus).listEstoquesPorProd(codProd);
        for (Produtoestoque est : listEsroque) {
            estoque = est.getEstatu().subtract(est.getReservadoorcamento().subtract(est.getReservadoos()));
        }
        return estoque.intValue();
    }

    private String setor(Produto codProd) {
        String text = "";
        for (Localizacao loc : queryCplus.listLocalizacao(codProd.getCodloc())) {
            text = loc.getDescricao();
        }
        return text;
    }

    public Produto getProduto() {
        return produto;
    }

    public void setProduto(Produto produto) {
        this.produto = produto;
    }

    public boolean isCancelamento() {
        return cancelamento;
    }

    public void setCancelamento(boolean cancelamento) {
        this.cancelamento = cancelamento;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListagemProdutoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListagemProdutoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListagemProdutoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListagemProdutoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ListagemProdutoJDialog dialog = new ListagemProdutoJDialog(new javax.swing.JFrame(), true, managerCplus);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private final QueryCplus queryCplus;
    private static EntityManagerFactory managerCplus;
    private final FormataCampos formatacaoCampos;
    private Produto produto;
    private boolean cancelamento;
    private final ListagemLocalizacaoJDialog listagemLocalizacaoJDialog;
    private String termoPesquisa;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager cplusPUEntityManager;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditarSetorEstoque;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JCheckBox jCheckBoxAtivo;
    private javax.swing.JComboBox jComboBoxTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelPesquisa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProdutos;
    private javax.swing.JTextField jTextFieldMaxResult;
    private javax.swing.JTextField jTextFieldTermoDaPesquisa;
    private java.util.List<entidade.cplus.Produto> produtoList;
    private javax.persistence.Query produtoQuery;
    // End of variables declaration//GEN-END:variables

}
