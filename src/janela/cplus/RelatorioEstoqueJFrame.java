/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janela.cplus;

import entidade.cplus.Documento;
import entidade.cplus.Movenda;
import entidade.cplus.Movendaprod;
import entidade.cplus.Moventrada;
import entidade.cplus.Moventradaprod;
import entidade.cplus.Nfceletronica;
import entidade.cplus.Produto;
import entidade.cplus.Produtoestoque;
import integrador.relatorio.ImprimeRelatorio;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.MoventradaJpaController;
import jpa.cplus.ProdutoestoqueJpaController;
import jpa.cplus.exceptions.NonexistentEntityException;
import query.cplus.QueryCplus;

/**
 *
 * @author leonardo
 */
public class RelatorioEstoqueJFrame extends javax.swing.JFrame {

    /**
     * Creates new form RelatorioInventarioJFrame
     *
     * @param managerCplus1
     */
    public RelatorioEstoqueJFrame(EntityManagerFactory managerCplus1) {
        initComponents();

        managerCplus = managerCplus1;
        queryCplus = new QueryCplus(managerCplus);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        formatacaoCampos = new FormataCampos();
        jDateChooserDataInventario.setDate(formatacaoCampos.alteraHoraData(formatacaoCampos.dataAtual()));
        jDateChooserFim.setDate(formatacaoCampos.alteraHoraData(formatacaoCampos.dataAtual()));
        jDateChooserInicio.setDate(formatacaoCampos.alteraDiaData(formatacaoCampos.dataAtual(), -30));
        jDateChooserDataSemVenda.setDate(formatacaoCampos.alteraDiaData(formatacaoCampos.dataAtual(), -365));
        //System.out.println(jDateChooserDataInventario.getDate());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGeraDados = new javax.swing.JButton();
        jDateChooserDataInventario = new com.toedter.calendar.JDateChooser();
        jLabelDataInventario = new javax.swing.JLabel();
        jCheckBoxRelatorioUmaLinha = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jToggleButtonImprimir = new javax.swing.JToggleButton();
        jToggleButtonCalculoDiferencaTributos = new javax.swing.JToggleButton();
        jDateChooserInicio = new com.toedter.calendar.JDateChooser();
        jDateChooserFim = new com.toedter.calendar.JDateChooser();
        jLabelInicio = new javax.swing.JLabel();
        jLabelFim = new javax.swing.JLabel();
        jCheckBoxComDocumentoEmitido = new javax.swing.JCheckBox();
        jButtonProdSemVendas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jDateChooserDataSemVenda = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatório Estoque");

        jButtonGeraDados.setText("Gerar Dados");
        jButtonGeraDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGeraDadosActionPerformed(evt);
            }
        });

        jLabelDataInventario.setText("Data Inventário:");

        jCheckBoxRelatorioUmaLinha.setText("Relatório uma Linha");

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        jToggleButtonImprimir.setText("Imprimir");
        jToggleButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonImprimirActionPerformed(evt);
            }
        });

        jToggleButtonCalculoDiferencaTributos.setText("Calcular Diferença Tributos por Periodo");
        jToggleButtonCalculoDiferencaTributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonCalculoDiferencaTributosActionPerformed(evt);
            }
        });

        jLabelInicio.setText("Inicio:");

        jLabelFim.setText("Fim:");

        jCheckBoxComDocumentoEmitido.setSelected(true);
        jCheckBoxComDocumentoEmitido.setText("Somente com Documento Fiscal Emitido");

        jButtonProdSemVendas.setText("Produtos sem Vendas");
        jButtonProdSemVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProdSemVendasActionPerformed(evt);
            }
        });

        jLabel1.setText("Sem Venda Des De:");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(55, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonGeraDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToggleButtonImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonProdSemVendas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxRelatorioUmaLinha)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelDataInventario)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooserDataInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooserDataSemVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButtonCalculoDiferencaTributos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooserFim, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jCheckBoxComDocumentoEmitido, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 254, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabelInicio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jDateChooserInicio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelFim, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(78, 78, 78))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jCheckBoxComDocumentoEmitido))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooserDataInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonGeraDados)
                                        .addComponent(jLabelDataInventario)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBoxRelatorioUmaLinha)
                                    .addComponent(jToggleButtonImprimir))
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jToggleButtonCalculoDiferencaTributos)
                                    .addComponent(jDateChooserFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelInicio)
                                    .addComponent(jLabelFim))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooserInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jDateChooserDataSemVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonProdSemVendas)
                                    .addComponent(jLabel1)))
                            .addComponent(jButton1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGeraDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGeraDadosActionPerformed
        List<Produtoestoque> listProdEstoque = new ProdutoestoqueJpaController(managerCplus).findProdutoestoqueEntities();
        List<Produtoestoque> listProd = new ArrayList<>();
        verificaDataEmissaoNula();
        for (Produtoestoque prodEstoque : listProdEstoque) {
            int quantidadeEstoque = 0;
            if (formatacaoCampos.comparaDuasDatas(prodEstoque.getLastChange(), formatacaoCampos.alteraHoraData(jDateChooserDataInventario.getDate()))) {//PRIMEIRA DATA for MENOR ou IGUAL a SEGUNDA DATA vai retornar FALSE
                //aqui sera verificado a quantidade em estoque do dia do relatório             
                for (Moventradaprod entradaProd : queryCplus.resultProdutoEntrada(prodEstoque.getProduto().getCodprod(), formatacaoCampos.alteraHoraData(jDateChooserDataInventario.getDate()), false)) {
                    quantidadeEstoque = quantidadeEstoque + entradaProd.getQuantidade().intValue();
                }
                for (Movendaprod saidaProd : queryCplus.resultProdutoSaida(prodEstoque.getProduto().getCodprod(), formatacaoCampos.alteraHoraData(jDateChooserDataInventario.getDate()))) {
                    quantidadeEstoque = quantidadeEstoque - saidaProd.getQuantidade().intValue();
                }
            } else {
                quantidadeEstoque = prodEstoque.getEstatu().intValue();
            }

            if (quantidadeEstoque > 0) {

                double custoProdutoUnitario;
                double creditoPisCofins;
                double creditoIcms;
                double valorIpiUnitario;
                double valorStUnitario;
                //quantidadeEstoque = prodEstoque.getEstatu().intValue();                            
                double valorProdutos = 0.00;
                double valorTotalIcms = 0.00;
                double valorTotalPisCofins = 0.00;
                double valorTotalIpi = 0.00;
                double valorTotalSt = 0.00;
                int estoqueCompra = 0;
                int incremetEstoque = 0;
                // queryCplus.resultProdutoEntrada(prodEstoque.getProduto().getCodprod(), true, 10)
                for (Moventradaprod movProd : queryCplus.resultProdutoEntrada(prodEstoque.getProduto().getCodprod(), formatacaoCampos.alteraHoraData(jDateChooserDataInventario.getDate()), true)) {
                    estoqueCompra = estoqueCompra + movProd.getQuantidade().intValue();
                    if (quantidadeEstoque >= estoqueCompra) {
                        valorProdutos = valorProdutos + movProd.getValortotal().doubleValue();
                        valorTotalIcms = valorTotalIcms + movProd.getValoricms().doubleValue();
                        valorTotalPisCofins = valorTotalPisCofins + movProd.getValorpis().doubleValue() + movProd.getValorcofins().doubleValue();
                        if (movProd.getValorsubsttributaria() != null) {
                            valorTotalSt = valorTotalSt + movProd.getValorsubsttributaria().doubleValue();
                        }
                        if (movProd.getValoripi() != null) {
                            valorTotalIpi = valorTotalIpi + movProd.getValoripi().doubleValue();
                        }
                        incremetEstoque = incremetEstoque + movProd.getQuantidade().intValue();
                    } else {
                        valorProdutos = valorProdutos + ((quantidadeEstoque - incremetEstoque) * movProd.getValorunitario().doubleValue());
                        double valorRestanteIcmsUnitario = movProd.getValoricms().doubleValue() / movProd.getQuantidade().doubleValue();
                        valorTotalIcms = valorTotalIcms + (valorRestanteIcmsUnitario * (quantidadeEstoque - incremetEstoque));
                        double valorRestantePisCofinsUnitario = (movProd.getValorpis().doubleValue() + movProd.getValorcofins().doubleValue()) / (movProd.getQuantidade().doubleValue());
                        valorTotalPisCofins = valorTotalPisCofins + (valorRestantePisCofinsUnitario * (quantidadeEstoque - incremetEstoque));
                        if (movProd.getValorsubsttributaria() != null) {
                            double valorRestanteStUnitario = movProd.getValorsubsttributaria().doubleValue() / movProd.getQuantidade().doubleValue();
                            valorTotalSt = valorTotalSt + (valorRestanteStUnitario * (quantidadeEstoque - incremetEstoque));
                        }
                        if (movProd.getValoripi() != null) {
                            double valorRestanteIpi = movProd.getValoripi().doubleValue() / movProd.getQuantidade().doubleValue();
                            valorTotalIpi = valorTotalIpi + (valorRestanteIpi * (quantidadeEstoque - incremetEstoque));
                        }
                        break;
                    } //             
                } //fim for listagem entrada de compra

                if ("102".equals(prodEstoque.getProduto().getCfopdentrouf())) {
                    creditoIcms = valorTotalIcms;
                    prodEstoque.getProduto().setPercoutroscustos(new BigDecimal(creditoIcms).setScale(2, BigDecimal.ROUND_HALF_UP));
                } else {
                    prodEstoque.getProduto().setPercoutroscustos(BigDecimal.ZERO);
                }
                creditoPisCofins = valorTotalPisCofins;
                prodEstoque.getProduto().setPercoutroscustos2(new BigDecimal(creditoPisCofins).setScale(2, BigDecimal.ROUND_HALF_UP));

                valorStUnitario = valorTotalSt;
                prodEstoque.getProduto().setValorsubsttributaria(new BigDecimal(valorStUnitario).setScale(2, BigDecimal.ROUND_HALF_UP));

                valorIpiUnitario = valorTotalIpi;
                prodEstoque.getProduto().setValoripi(new BigDecimal(valorIpiUnitario).setScale(2, BigDecimal.ROUND_HALF_UP));

                creditoIcms = valorTotalIcms / quantidadeEstoque;
                creditoPisCofins = valorTotalPisCofins / quantidadeEstoque;
                valorStUnitario = valorTotalSt / quantidadeEstoque;
                valorIpiUnitario = valorTotalIpi / quantidadeEstoque;
                custoProdutoUnitario = valorProdutos / quantidadeEstoque;
                custoProdutoUnitario = custoProdutoUnitario + valorIpiUnitario + valorStUnitario - creditoIcms - creditoPisCofins;
                prodEstoque.getProduto().setPrecusto(new BigDecimal(custoProdutoUnitario).setScale(2, BigDecimal.ROUND_HALF_UP));

                prodEstoque.setEstatu(new BigDecimal(quantidadeEstoque));
                double custoreal = custoProdutoUnitario + creditoPisCofins;
                prodEstoque.getProduto().setCustoreal(new BigDecimal(custoreal));
                listProd.add(prodEstoque);

            }//fim if com estoque maior que zero
        }//fim for
        listaProdutosEstoque = listProd;
    }//GEN-LAST:event_jButtonGeraDadosActionPerformed

    private void jToggleButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonImprimirActionPerformed
        imprimirRelatorio();
    }//GEN-LAST:event_jToggleButtonImprimirActionPerformed

    private void jToggleButtonCalculoDiferencaTributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonCalculoDiferencaTributosActionPerformed
        diferencaTributos();
    }//GEN-LAST:event_jToggleButtonCalculoDiferencaTributosActionPerformed

    private void jButtonProdSemVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProdSemVendasActionPerformed
        String tex = "";
        jTextArea.setText("");
        List<Produtoestoque> prodList = new ArrayList<>();
        for (Produtoestoque prodestoque : queryCplus.resultComEstoque()) {
            if (queryCplus.naoVendidoDesDe(prodestoque.getProduto().getCodprod(), jDateChooserDataSemVenda.getDate()).isEmpty()) {
                if (queryCplus.compradoAntes(prodestoque.getProduto().getCodprod(), jDateChooserDataSemVenda.getDate()).isEmpty()) {
                    prodList.add(prodestoque);
                }
            }
        }
        if (prodList.size() > 0) {
            Comparator ordemNome = new ComparadorNomeProduto();
            Collections.sort(prodList, ordemNome);
            for (Produtoestoque pe : prodList) {
                tex = tex + pe.getProduto().getCodigo()
                        + " - " + pe.getProduto().getNomeprod()
                        + "\n";
                jTextArea.setText(tex);
            }
        }
    }//GEN-LAST:event_jButtonProdSemVendasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        calculaBaseSTdeArquivo();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void calculaBaseSTdeArquivo() {
        Scanner scanner;
        try {
            scanner = new Scanner(new FileReader("D:\\inventario.txt")).useDelimiter("\\t|\\n");
            List<EntidadeInventario> listInventario = new ArrayList<>();
            while (scanner.hasNext()) {
                EntidadeInventario ei = new EntidadeInventario();
                ei.setCodigo(scanner.next());
                ei.setNome(scanner.next());
                ei.setQuatidade(scanner.next());
                ei.setValorUnitario(scanner.next());
                ei.setValorTotal(scanner.next());
                listInventario.add(ei);
            }

            String textArea = "";
            for (EntidadeInventario e : listInventario) {
                System.out.println(e.getNome());
                List<Moventradaprod> lisMovProd = queryCplus.lisProdEntrada(e.getCodigo());
                if (lisMovProd.size() > 0) {
                    for (Moventradaprod movProd : lisMovProd) {
                        System.out.println(movProd.getValorunitario().add(movProd.getValoripi().divide(movProd.getQuantidade(), 4, RoundingMode.UP)).setScale(4, RoundingMode.UP));
                        textArea = textArea + e.getCodigo()
                                + "\t" + movProd.getCodprod().getCodclassificacaofiscal().getCodigoclassificacaofiscal()
                                + "\t" + e.getNome()
                                + "\t" + e.getQuatidade()
                                + "\t" + formatacaoCampos.bigDecimalParaString(movProd.getValorunitario().add(movProd.getValoripi().divide(movProd.getQuantidade(), 4, RoundingMode.UP)).setScale(4, RoundingMode.UP), 2)
                                + "\t" + formatacaoCampos.bigDecimalParaString(new BigDecimal(e.getQuatidade()).multiply(movProd.getValorunitario().add(movProd.getValoripi().divide(movProd.getQuantidade(), 4, RoundingMode.UP))).setScale(4, RoundingMode.UP), 2)
                                + "\t" + formatacaoCampos.bigDecimalParaString(new BigDecimal(e.getQuatidade()).multiply(movProd.getBasesubsttributaria().divide(movProd.getQuantidade(), 4, RoundingMode.UP)).setScale(4, RoundingMode.UP), 2)
                                + "\t" + formatacaoCampos.dataStringSoData(movProd.getCodmoventr().getData(), 0)
                                + "\t" + movProd.getCodmoventr().getNumnota()
                                + "\n";
                        break;
                    }
                } else {
                    for (Moventradaprod movProd : queryCplus.lisProdEntrada2(e.getCodigo())) {
                        System.out.println("cst 60: "+movProd.getValorunitario().add(movProd.getValoripi().divide(movProd.getQuantidade(), 4, RoundingMode.UP)).setScale(4, RoundingMode.UP));
                        textArea = textArea + e.getCodigo()
                                + "\t" + movProd.getCodprod().getCodclassificacaofiscal().getCodigoclassificacaofiscal()
                                + "\t" + e.getNome()
                                + "\t" + e.getQuatidade()
                                + "\t" + movProd.getValorunitario().add(movProd.getValoripi().divide(movProd.getQuantidade(), 4, RoundingMode.UP)).setScale(4, RoundingMode.UP)
                                + "\t" + new BigDecimal(e.getQuatidade()).multiply(movProd.getValorunitario().add(movProd.getValoripi().divide(movProd.getQuantidade(), 4, RoundingMode.UP))).setScale(4, RoundingMode.UP)
                                + "\t" + new BigDecimal(e.getQuatidade()).multiply(movProd.getBasesubsttributaria().divide(movProd.getQuantidade(), 4, RoundingMode.UP)).setScale(4, RoundingMode.UP)
                                + "\t" + formatacaoCampos.dataStringSoData(movProd.getCodmoventr().getData(), 0)
                                + "\t" + movProd.getCodmoventr().getNumnota()
                                + "\n";
                        break;
                    }
                }
            }
            jTextArea.setText(textArea);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hove um erro ao ler arquivo \n");
        }
    }

    private void diferencaTributos() {
        double icmsCredito = 0.00;
        double pisCredito = 0.00;
        double cofinsCredito = 0.00;
        double icmsDebito = 0.00;
        double pisDebito = 0.00;
        double cofinsDebito = 0.00;
        if (jCheckBoxComDocumentoEmitido.isSelected()) {
            for (Nfceletronica nfc : queryCplus.listaNFC(jDateChooserInicio.getDate(), jDateChooserFim.getDate())) {
                if ("A".equals(nfc.getStatusnfceletronica())) {
                    icmsDebito = icmsDebito + nfc.getCodmovenda().getValoricms().doubleValue();
                    pisDebito = pisDebito + nfc.getCodmovenda().getValortotalpis().doubleValue();
                    cofinsDebito = cofinsDebito + nfc.getCodmovenda().getValortotalcofins().doubleValue();
                }
            }
            for (Documento doc : queryCplus.listDocumento(jDateChooserInicio.getDate(), jDateChooserFim.getDate())) {
                for (Movenda ven : queryCplus.listaMovendaPorNumeroNota(doc.getNumnota())) {
                    icmsDebito = icmsDebito + ven.getValoricms().doubleValue();
                    pisDebito = pisDebito + ven.getValortotalpis().doubleValue();
                    cofinsDebito = cofinsDebito + ven.getValortotalcofins().doubleValue();
                }
            }
        } else {
            for (Movenda ven : queryCplus.listaMovendaPorDataPedido(jDateChooserInicio.getDate(), jDateChooserFim.getDate())) {
                icmsDebito = icmsDebito + ven.getValoricms().doubleValue();
                pisDebito = pisDebito + ven.getValortotalpis().doubleValue();
                cofinsDebito = cofinsDebito + ven.getValortotalcofins().doubleValue();
            }
        }
        for (Moventradaprod entradaProd : queryCplus.resultProdutoEntradaEmissao(jDateChooserInicio.getDate(), jDateChooserFim.getDate())) {
            if ("00".equals(entradaProd.getCodsituacaotributaria())) {
                icmsCredito = icmsCredito + entradaProd.getValoricms().doubleValue();
            }
            if (entradaProd.getValorpis() != null && entradaProd.getValorcofins() != null) {
                pisCredito = pisCredito + entradaProd.getValorpis().doubleValue();
                cofinsCredito = cofinsCredito + entradaProd.getValorcofins().doubleValue();
            } else {
                System.out.println("Nota com pis ou cofins nulo Cod MovEntrada: " + entradaProd.getCodmoventr().getCodmoventr());
            }
        }
        jTextArea.setText("Crédito ICMS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(icmsCredito), 2) + "\n"
                + "Crédito PIS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(pisCredito), 2) + "\n"
                + "Crédito COFINS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(cofinsCredito), 2) + "\n"
                + "Débito ICMS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(icmsDebito), 2) + "\n"
                + "Débito PIS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(pisDebito), 2) + "\n"
                + "Débito COFINS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(cofinsDebito), 2) + "\n"
                + "A pagar ICMS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(icmsDebito - icmsCredito), 2) + "\n"
                + "A pagar PIS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(pisDebito - pisCredito), 2) + "\n"
                + "A pagar COFINS: " + formatacaoCampos.bigDecimalParaString(new BigDecimal(cofinsDebito - cofinsCredito), 2) + "\n"
        );
    }

    private void imprimirRelatorio() {
        if (listaProdutosEstoque.size() > 0) {
            Comparator ordemNome = new ComparadorNomeProduto();
            Collections.sort(listaProdutosEstoque, ordemNome);
            if (jCheckBoxRelatorioUmaLinha.isSelected()) {
                new ImprimeRelatorio().imprimeRelatorio("/integrador/relatorio/Relatorio_Inventario_contabil.jrxml", listaProdutosEstoque);
            } else {
                new ImprimeRelatorio().imprimeRelatorio("/integrador/relatorio/Relatorio_Inventario.jrxml", listaProdutosEstoque);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Não ha dados a serem impressos \n");
        }
    }

    private void verificaDataEmissaoNula() {
        for (Moventrada ent : new MoventradaJpaController(managerCplus).findMoventradaEntities()) {
            if (ent.getDataemissao() == null) {
                ent.setDataemissao(ent.getData());
                try {
                    new MoventradaJpaController(managerCplus).edit(ent);
                    System.out.println("Foi alterado data emissão " + ent.getCodmoventr());
                } catch (NonexistentEntityException ex) {
                    JOptionPane.showMessageDialog(null, "Houve um erro ao editar data emissão \n" + ex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Houve um erro ao editar data emissão \n" + ex);
                }
            }
        }
    }

    private void calculaPorcentagemCusto(Produto prod) {
        List<Produtoestoque> listProdEstoque = new ProdutoestoqueJpaController(managerCplus).findProdutoestoqueEntities();
        List<Produtoestoque> listProd = new ArrayList<>();
        for (Produtoestoque prodEstoque : listProdEstoque) {
            if (prodEstoque.getEstatu().doubleValue() > 0.00) {
                int quantidadeEstoque = 0;
                double custoProdutoUnitario;
                double creditoPisCofins;
                double creditoIcms = 0.00;
                double valorIpiUnitario;
                double valorStUnitario;
                quantidadeEstoque = prodEstoque.getEstatu().intValue();
                double valorProdutos = 0.00;
                double valorTotalIcms = 0.00;
                double valorTotalPisCofins = 0.00;
                double valorTotalIpi = 0.00;
                double valorTotalSt = 0.00;
                int estoqueCompra = 0;
                int incremetEstoque = 0;
                for (Moventradaprod movProd : queryCplus.resultProdutoEntrada(prodEstoque.getProduto().getCodprod(), true, 10)) {
                    estoqueCompra = estoqueCompra + movProd.getQuantidade().intValue();
                    if (quantidadeEstoque >= estoqueCompra) {
                        valorProdutos = valorProdutos + movProd.getValortotal().doubleValue();
                        valorTotalIcms = valorTotalIcms + movProd.getValoricms().doubleValue();
                        valorTotalPisCofins = valorTotalPisCofins + movProd.getValorpis().doubleValue() + movProd.getValorcofins().doubleValue();
                        if (movProd.getValorsubsttributaria() != null) {
                            valorTotalSt = valorTotalSt + movProd.getValorsubsttributaria().doubleValue();
                        }
                        if (movProd.getValoripi() != null) {
                            valorTotalIpi = valorTotalIpi + movProd.getValoripi().doubleValue();
                        }
                        incremetEstoque = incremetEstoque + movProd.getQuantidade().intValue();
                    } else {
                        valorProdutos = valorProdutos + ((quantidadeEstoque - incremetEstoque) * movProd.getValorunitario().doubleValue());
                        double valorRestanteIcmsUnitario = movProd.getValoricms().doubleValue() / movProd.getQuantidade().doubleValue();
                        valorTotalIcms = valorTotalIcms + (valorRestanteIcmsUnitario * (quantidadeEstoque - incremetEstoque));
                        double valorRestantePisCofinsUnitario = (movProd.getValorpis().doubleValue() + movProd.getValorcofins().doubleValue()) / (movProd.getQuantidade().doubleValue());
                        valorTotalPisCofins = valorTotalPisCofins + (valorRestantePisCofinsUnitario * (quantidadeEstoque - incremetEstoque));
                        if (movProd.getValorsubsttributaria() != null) {
                            double valorRestanteStUnitario = movProd.getValorsubsttributaria().doubleValue() / movProd.getQuantidade().doubleValue();
                            valorTotalSt = valorTotalSt + (valorRestanteStUnitario * (quantidadeEstoque - incremetEstoque));
                        }
                        if (movProd.getValoripi() != null) {
                            double valorRestanteIpi = movProd.getValoripi().doubleValue() / movProd.getQuantidade().doubleValue();
                            valorTotalIpi = valorTotalIpi + (valorRestanteIpi * (quantidadeEstoque - incremetEstoque));
                        }
                        break;
                    } //fim else que verifica se quantidade estóque é maior que ultima entrada             
                } //fim for listagem entrada de compra
                //valor crédito ICMS caso tenha                                                           
                if ("102".equals(prodEstoque.getProduto().getCfopdentrouf())) {
                    creditoIcms = valorTotalIcms;
                    prodEstoque.getProduto().setPercoutroscustos(new BigDecimal(creditoIcms).setScale(2, BigDecimal.ROUND_HALF_UP));
                } else {
                    prodEstoque.getProduto().setPercoutroscustos(BigDecimal.ZERO);
                }
                //valor total crédito PIS e COFINS
                creditoPisCofins = valorTotalPisCofins;
                prodEstoque.getProduto().setPercoutroscustos2(new BigDecimal(creditoPisCofins).setScale(2, BigDecimal.ROUND_HALF_UP));
                //valor total sub. tributária
                valorStUnitario = valorTotalSt;
                prodEstoque.getProduto().setValorsubsttributaria(new BigDecimal(valorStUnitario).setScale(2, BigDecimal.ROUND_HALF_UP));

                valorIpiUnitario = valorTotalIpi;//valor total IPI
                prodEstoque.getProduto().setValoripi(new BigDecimal(valorIpiUnitario).setScale(2, BigDecimal.ROUND_HALF_UP));
                //custo unitário tirando crédito impostos
                creditoIcms = valorTotalIcms / quantidadeEstoque;
                creditoPisCofins = valorTotalPisCofins / quantidadeEstoque;
                valorStUnitario = valorTotalSt / quantidadeEstoque;
                valorIpiUnitario = valorTotalIpi / quantidadeEstoque;
                custoProdutoUnitario = valorProdutos / quantidadeEstoque;
                custoProdutoUnitario = custoProdutoUnitario + valorIpiUnitario + valorStUnitario - creditoIcms - creditoPisCofins;
                prodEstoque.getProduto().setPrecusto(new BigDecimal(custoProdutoUnitario).setScale(2, BigDecimal.ROUND_HALF_UP));

                listProd.add(prodEstoque);
            }//fim if com estoque maior que zero
        }//fim for
        if (listProd.size() > 0) {
            Comparator ordemNome = new ComparadorNomeProduto();
            Collections.sort(listProd, ordemNome);
            new ImprimeRelatorio().imprimeRelatorio("/integrador/relatorio/Relatorio_Inventario.jrxml", listProd);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioEstoqueJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioEstoqueJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioEstoqueJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioEstoqueJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatorioEstoqueJFrame(managerCplus).setVisible(true);
            }
        });
    }
    static EntityManagerFactory managerCplus;
    private List<Produtoestoque> listaProdutosEstoque;
    QueryCplus queryCplus;
    private final FormataCampos formatacaoCampos;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonGeraDados;
    private javax.swing.JButton jButtonProdSemVendas;
    private javax.swing.JCheckBox jCheckBoxComDocumentoEmitido;
    private javax.swing.JCheckBox jCheckBoxRelatorioUmaLinha;
    private com.toedter.calendar.JDateChooser jDateChooserDataInventario;
    private com.toedter.calendar.JDateChooser jDateChooserDataSemVenda;
    private com.toedter.calendar.JDateChooser jDateChooserFim;
    private com.toedter.calendar.JDateChooser jDateChooserInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDataInventario;
    private javax.swing.JLabel jLabelFim;
    private javax.swing.JLabel jLabelInicio;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JToggleButton jToggleButtonCalculoDiferencaTributos;
    private javax.swing.JToggleButton jToggleButtonImprimir;
    // End of variables declaration//GEN-END:variables

}
