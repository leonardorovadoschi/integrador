/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package janela.prestaShop;

import acesso.ControleAcesso;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Usuario;
import entidade.prestaShop.PsOrderDetail;
import entidade.prestaShop.PsOrders;
import entidade.prestaShop.PsPack;
import entidade.prestaShop.PsProduct;
import entidade.prestaShop.PsProductLang;
import entidade.prestaShop.PsStockAvailable;
import janela.cplus.FormataCampos;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.ProdutoestoqueJpaController;
import jpa.prestaShop.PsProductJpaController;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;
import query.prestaShop.QueryPrestaShop;


/**
 *
 * @author leonardo
 */
public class InsereSalesFlatOrderItemJDialog extends javax.swing.JDialog {

    /**
     * Creates new form InsereSalesFlatOrderItemJDialog
     * @param parent
     * @param modal
     * @param managerPrestaShop1
     * @param managerCplus1
     * @param usuario1
     */
    public InsereSalesFlatOrderItemJDialog(java.awt.Frame parent, boolean modal, EntityManagerFactory managerPrestaShop1, EntityManagerFactory managerCplus1, Usuario usuario1) {
        super(parent, modal);
        initComponents();
        managerPrestaShop = managerPrestaShop1;
        managerCplus = managerCplus1;       
        queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        queryCplus =  new QueryCplus(managerCplus);
        formataCampos = new FormataCampos();
       usuario = usuario1;
       acesso = new ControleAcesso(managerCplus);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
       if(acesso.verificaAcessoUsuario(usuario, "Alterar preço de venda")){
           jTextFieldValorUnitarioComDesconto.setEnabled(true);
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInformacaoProduto = new javax.swing.JPanel();
        jLabelSku = new javax.swing.JLabel();
        jTextFieldSku = new javax.swing.JTextField();
        jLabelDescricaoProduto = new javax.swing.JLabel();
        jTextFieldDescricaoProduto = new javax.swing.JTextField();
        jPanelValorProduto = new javax.swing.JPanel();
        jLabelPrecoOriginal = new javax.swing.JLabel();
        jTextFieldPriceOriginal = new javax.swing.JTextField();
        jLabelTaxParcent = new javax.swing.JLabel();
        jTextFieldTaxParcent = new javax.swing.JTextField();
        jLabelPriceInclTax = new javax.swing.JLabel();
        jTextFieldPriceInclTax = new javax.swing.JTextField();
        jLabelTotalTaxa = new javax.swing.JLabel();
        jTextFieldTotalTaxa = new javax.swing.JTextField();
        jLabelDiscontParcent = new javax.swing.JLabel();
        jTextFieldDiscontParcent = new javax.swing.JTextField();
        jLabelDiscontAmount = new javax.swing.JLabel();
        jTextFieldDiscontAmount = new javax.swing.JTextField();
        jLabelRowTotal = new javax.swing.JLabel();
        jTextFieldRowTotal = new javax.swing.JTextField();
        jLabelValorUnitarioComDesconto = new javax.swing.JLabel();
        jTextFieldValorUnitarioComDesconto = new javax.swing.JTextField();
        jLabelQuantidade = new javax.swing.JLabel();
        jTextFieldQtyOrdered = new javax.swing.JTextField();
        jButtonGravar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insere Produto no Pedido");

        jPanelInformacaoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações do Produto"));

        jLabelSku.setText("SKU:");

        jLabelDescricaoProduto.setText("Descrição:");

        javax.swing.GroupLayout jPanelInformacaoProdutoLayout = new javax.swing.GroupLayout(jPanelInformacaoProduto);
        jPanelInformacaoProduto.setLayout(jPanelInformacaoProdutoLayout);
        jPanelInformacaoProdutoLayout.setHorizontalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelDescricaoProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(jLabelSku, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSku)
                    .addComponent(jTextFieldDescricaoProduto))
                .addContainerGap())
        );
        jPanelInformacaoProdutoLayout.setVerticalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSku)
                    .addComponent(jTextFieldSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescricaoProduto)
                    .addComponent(jTextFieldDescricaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanelValorProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores:"));

        jLabelPrecoOriginal.setText("Preço Original:");

        jTextFieldPriceOriginal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPriceOriginal.setEnabled(false);

        jLabelTaxParcent.setText("Taxa: %");

        jTextFieldTaxParcent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTaxParcent.setEnabled(false);

        jLabelPriceInclTax.setText("Unitário com Taxa:");

        jTextFieldPriceInclTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPriceInclTax.setEnabled(false);

        jLabelTotalTaxa.setText("Total Taxa:");

        jTextFieldTotalTaxa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTotalTaxa.setEnabled(false);

        jLabelDiscontParcent.setText("Desconto: %");

        jTextFieldDiscontParcent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDiscontParcent.setEnabled(false);

        jLabelDiscontAmount.setText("Total Desconto:");

        jTextFieldDiscontAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDiscontAmount.setEnabled(false);

        jLabelRowTotal.setText("Valor Total:");

        jTextFieldRowTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldRowTotal.setEnabled(false);

        jLabelValorUnitarioComDesconto.setText("Valor Uni. Com Desconto:");

        jTextFieldValorUnitarioComDesconto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldValorUnitarioComDesconto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldValorUnitarioComDesconto.setToolTipText("Valor Unitário com desconto não inclui taxas");
        jTextFieldValorUnitarioComDesconto.setEnabled(false);
        jTextFieldValorUnitarioComDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldValorUnitarioComDescontoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldValorUnitarioComDescontoFocusLost(evt);
            }
        });
        jTextFieldValorUnitarioComDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldValorUnitarioComDescontoActionPerformed(evt);
            }
        });

        jLabelQuantidade.setText("Quantidade:");

        jTextFieldQtyOrdered.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldQtyOrdered.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQtyOrdered.setToolTipText("Insira a quantidade que deseja inserir!");
        jTextFieldQtyOrdered.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtyOrderedFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQtyOrderedFocusLost(evt);
            }
        });
        jTextFieldQtyOrdered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQtyOrderedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelValorProdutoLayout = new javax.swing.GroupLayout(jPanelValorProduto);
        jPanelValorProduto.setLayout(jPanelValorProdutoLayout);
        jPanelValorProdutoLayout.setHorizontalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelRowTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDiscontAmount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDiscontParcent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelPriceInclTax, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(jLabelPrecoOriginal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldPriceInclTax)
                    .addComponent(jTextFieldDiscontParcent)
                    .addComponent(jTextFieldDiscontAmount)
                    .addComponent(jTextFieldRowTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelTaxParcent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTotalTaxa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelValorUnitarioComDesconto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelQuantidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldTaxParcent)
                    .addComponent(jTextFieldTotalTaxa)
                    .addComponent(jTextFieldValorUnitarioComDesconto)
                    .addComponent(jTextFieldQtyOrdered, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addGap(0, 76, Short.MAX_VALUE))
        );
        jPanelValorProdutoLayout.setVerticalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPrecoOriginal)
                            .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTaxParcent)
                            .addComponent(jTextFieldTaxParcent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPriceInclTax)
                            .addComponent(jTextFieldPriceInclTax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTotalTaxa)
                            .addComponent(jTextFieldTotalTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDiscontParcent)
                            .addComponent(jTextFieldDiscontParcent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDiscontAmount)
                            .addComponent(jTextFieldDiscontAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelValorUnitarioComDesconto)
                            .addComponent(jTextFieldValorUnitarioComDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelQuantidade)
                            .addComponent(jTextFieldQtyOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRowTotal)
                    .addComponent(jTextFieldRowTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 49, Short.MAX_VALUE))
        );

        jButtonGravar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/add.png"))); // NOI18N
        jButtonGravar.setText("Gravar");
        jButtonGravar.setEnabled(false);
        jButtonGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGravar)
                        .addGap(8, 8, 8)
                        .addComponent(jButtonCancelar)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanelValorProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGravar)
                    .addComponent(jButtonCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldValorUnitarioComDescontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldValorUnitarioComDescontoFocusGained
        jTextFieldValorUnitarioComDesconto.selectAll();

    }//GEN-LAST:event_jTextFieldValorUnitarioComDescontoFocusGained

    private void jTextFieldValorUnitarioComDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldValorUnitarioComDescontoFocusLost
        eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldValorUnitarioComDescontoFocusLost

    private void jTextFieldValorUnitarioComDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldValorUnitarioComDescontoActionPerformed
        eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldValorUnitarioComDescontoActionPerformed

    private void jTextFieldQtyOrderedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtyOrderedFocusGained
        jTextFieldQtyOrdered.selectAll();
    }//GEN-LAST:event_jTextFieldQtyOrderedFocusGained

    private void jTextFieldQtyOrderedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtyOrderedFocusLost
       
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQtyOrderedFocusLost

    private void jTextFieldQtyOrderedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQtyOrderedActionPerformed
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQtyOrderedActionPerformed

    private void jButtonGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarActionPerformed
        insereSalesFlatOrderItem();
    }//GEN-LAST:event_jButtonGravarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        cancelamento();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

     private void eventoValorUnitario() {
     /*   BigDecimal valorComDesconto = formataCampos.stringParaDecimal(jTextFieldValorUnitarioComDesconto.getText(), 4);
        //double porcentagemTaxa = formataCampos.stringParaDecimal(jTextFieldTaxParcent.getText(), 4).doubleValue();
        BigDecimal valorOriginal = formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4);
        BigDecimal quan = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
        jTextFieldPriceInclTax.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioComTaxa(valorComDesconto, porcentagemTaxa), 2));
        jTextFieldDiscontParcent.setText(formataCampos.bigDecimalParaString(calculaPorcentagemDesconto(valorOriginal, valorComDesconto), 4));
        jTextFieldDiscontAmount.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).multiply(quan), var.casas_decimais_ARREDONDAMENTO));
        jTextFieldTotalTaxa.setText(formataCampos.bigDecimalParaString(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).multiply(quan), var.casas_decimais_ARREDONDAMENTO));
        jTextFieldRowTotal.setText(formataCampos.bigDecimalParaString(calculaValorTotal(valorComDesconto, porcentagemTaxa, quan.doubleValue()), var.casas_decimais_ARREDONDAMENTO));
        if((formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4).doubleValue() % quantidadeProdutoAgrupado().doubleValue()) == 0){
        jButtonGravar.setEnabled(true);
        jButtonGravar.requestFocus();
        }
         */
    }
    
    private void eventoQuantidade(){
       /*
        if((formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4).doubleValue() % quantidadeProdutoAgrupado().doubleValue()) == 0){
         Integer quan = Integer.valueOf(jTextFieldQtyOrdered.getText());
         //jButtonGravar.setEnabled(true);
        if (verificaEstoqueDisponivel(quan, psProduct , managerPrestaShop)) {          
            double porcentagemDesconto = 1 - (formataCampos.stringParaDecimal(jTextFieldDiscontParcent.getText(), 4).doubleValue() / 100.00);
            double porcentagemTaxa = formataCampos.stringParaDecimal(jTextFieldTaxParcent.getText(), 4).doubleValue();
            double valorOriginal = valorOriginal(quan.doubleValue());
            double valorComDesconto = valorOriginal * porcentagemDesconto ;          
            jTextFieldPriceInclTax.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioComTaxa(valorComDesconto, porcentagemTaxa), var.casas_decimais_ARREDONDAMENTO));
            jTextFieldValorUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(new BigDecimal(valorComDesconto), var.casas_decimais_ARREDONDAMENTO));            
            jTextFieldDiscontAmount.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).multiply(quan), var.casas_decimais_ARREDONDAMENTO));
            jTextFieldTotalTaxa.setText(formataCampos.bigDecimalParaString(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).multiply(quan), var.casas_decimais_ARREDONDAMENTO));
            jTextFieldRowTotal.setText(formataCampos.bigDecimalParaString(calculaValorTotal(valorComDesconto, porcentagemTaxa, quan.doubleValue()), var.casas_decimais_ARREDONDAMENTO));
            jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(new BigDecimal(valorOriginal) , var.casas_decimais_ARREDONDAMENTO));
            jButtonGravar.setEnabled(true);
            jButtonGravar.requestFocus();
        }else{
           jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(this.quantidade, 0));
            int qunt = verificaQuantidadeEstoque(productEntity, managerPrestaShop);
             JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + qunt) ;
        }
        }else{
            jButtonGravar.setEnabled(false);
            //jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(this.quantidade, 0));
            JOptionPane.showMessageDialog(null, "A quantidade deve ser multipla de: " +quantidadeProdutoAgrupado().intValue()) ;            
        }
        */
    }
    
     private Integer quantidadeProdutoAgrupado(PsOrderDetail item){
         Integer quan = 1;
       if(psProduct.getCacheIsPack()){
           for (PsPack psP : queryPrestaShop.listPack(item.getIdOrderDetail())) {
               quan = psP.getQuantity();
           }
       }
           
        return quan;
    }
    
    private void insereSalesFlatOrderItem(){
        
        BigDecimal quan = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
        BigDecimal valorTotalDesconto = formataCampos.stringParaDecimal(jTextFieldDiscontAmount.getText(), 4);
        BigDecimal valorOriginal = formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4);
         //BigDecimal quan = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
     //   if (verificaEstoqueDisponivel(quan, psProduct, managerPrestaShop)) {
        
            atualizaCplus(psProduct, managerCplus);
        jButtonGravar.setEnabled(false);
        dispose();
      //  }else{
     //     jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(quantidade, 0));
//            int qunt = verificaQuantidadeEstoque(psProduct, managerPrestaShop).intValue();
     //        JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + qunt) ;
     //   }
        
    }
    
    private void atualizaCplus(PsProduct entity, EntityManagerFactory managerCplus){
        List<Produtoestoque> listestoque = queryCplus.listagemProdutoEstoque(entity.getReference());
        for(Produtoestoque estoque : listestoque){          
            estoque.setLastChange(new Date(System.currentTimeMillis()));
            try {
                new ProdutoestoqueJpaController(managerCplus).edit(estoque);
            } catch (Exception ex) {
               JOptionPane.showMessageDialog(null, "Houve um erro ao Atualizar Estoque Produto!!!\n " + ex);
            }
        }
    }
    
    private double valorOriginal(double quantidade){
       
        double menorValor = 0;
      //  if(comparaDataAtualComDoBanco(productEntity, var.EavAttribute_SPECIAL_TO_DATE, managerPrestaShop) == false){
      //      menorValor = retornaDecimal(var.EavAttribute_SPECIAL_PRICE, productEntity, managerPrestaShop);
    //    }else{
    //         menorValor = retornaDecimal(var.EavAttribute_PRICE, productEntity, managerPrestaShop);
    //    }
    //    List< CatalogProductEntityGroupPrice> listGroupPrice = new CatalogProductEntityGroupPriceJpaController(managerPrestaShop).listGroupPrice(productEntity.getEntityId(), groupId);
    //    for(CatalogProductEntityGroupPrice groupPrice :listGroupPrice){
    //        menorValor = groupPrice.getValue().doubleValue();
   //     }       
   //     List< CatalogProductEntityTierPrice> listTierPrice = new CatalogProductEntityTierPriceJpaController(managerPrestaShop).listadeTierPricePorProduto(productEntity, groupId);
   //      for (CatalogProductEntityTierPrice tierPrice : listTierPrice) {
   //          if(quantidade >= tierPrice.getQty().doubleValue()){
  //               if(menorValor > tierPrice.getValue().doubleValue()){
   //                  menorValor = tierPrice.getValue().doubleValue();
     //            }
   //          }
    //     }       
        return menorValor;
        
    }
    
   
     /**
     * Função que verifica somente o dia mes e ano atual compara com a data do
     * banco de dados do magento data magento SPECIAL_TO_DATE
     *
     * @param entity
     * @param atributo
     * @param managerMagentoDigimacro
     * @return true se a data atual é igual ou menos que a data do banco
     */
    private boolean comparaDataAtualComDoBanco(PsProduct entity, short atributo, EntityManagerFactory managerMagentoDigimacro) {
        boolean condicao = false;
     
        Calendar dataAtualCal = Calendar.getInstance();
        dataAtualCal.setTime(new Date(System.currentTimeMillis()));
        String diaAtualStr = String.format("%02d", dataAtualCal.get(Calendar.DAY_OF_MONTH));
        String mesAtualStr = String.format("%02d", dataAtualCal.get(Calendar.MONTH));
        String anoAtualStr = String.format("%04d", dataAtualCal.get(Calendar.YEAR));
        Calendar dataBancoCal = Calendar.getInstance();
        int totalDataAtual = Integer.valueOf(anoAtualStr + mesAtualStr + diaAtualStr);
       
        return condicao;
    }
    
    private Integer verificaQuantidadeEstoque(PsOrderDetail item , EntityManagerFactory managerMagento){
        Integer qty = 0; 
        List<PsStockAvailable> listEstoqItem = new QueryPrestaShop(managerMagento).listEstoqueProduto(item.getProductId());
            for (PsStockAvailable estoqItem : listEstoqItem) {
              
                 qty = estoqItem.getQuantity();
            }//fim for estoque magento
            return qty;
    }
    
    private void editaEstoqueMagento(BigDecimal quantidade, PsProduct entity, EntityManagerFactory managerMagento) {
        //BigDecimal quantidadeRequerida = quan ;
       // List<CataloginventoryStockItem> listEstoqItem = new CataloginventoryStockItemJpaController(managerMagento).finalAtributo(entity, var.Stok_CATALOG_INVENTORY_STOCK);
       // for (CataloginventoryStockItem estoqItem : listEstoqItem) {
       //     BigDecimal novaQuantidade = estoqItem.getQty().subtract(quantidade);
       //     estoqItem.setQty(novaQuantidade);
        //    try {
       //         new CataloginventoryStockItemJpaController(managerMagento).edit(estoqItem);              
       //     } catch (Exception ex) {
       //        JOptionPane.showMessageDialog(null, "Hove um erro ao editar Estoque no Magento!\n" + ex);
       //     }
      //  }
    }
    
   private boolean verificaEstoqueDisponivel(Integer quan, PsOrderDetail item, EntityManagerFactory managerPrestaShop){
      // double quantidadeRequerida = quan.doubleValue() - quantidadeAntiga.doubleValue();
       boolean condicao = true;             
            List<PsStockAvailable> listEstoqItem = new QueryPrestaShop(managerPrestaShop).listEstoqueProduto(item.getProductId());
            for (PsStockAvailable estoqItem : listEstoqItem) {
                if(quan.doubleValue() <= estoqItem.getQuantity()){
                condicao = true;
            }else{
                condicao = false;
            }                               
       }//fim if que verifica se a quan requerida é maior que zero       
       return condicao;
   }
   
    private BigDecimal calculaValorUnitarioComTaxa(double valorComDesconto, double porcentagemTaxa ){
        BigDecimal valUniComTaxa = new BigDecimal(valorComDesconto).add(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa));
        return valUniComTaxa;
    }
    
    private BigDecimal calculaValorTotal(double valorComDesconto, double porcentagemTaxa, double quantidade){
        double valTotal = (valorComDesconto + calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).doubleValue()) * quantidade;
        return new BigDecimal(valTotal);
    }
    
    private BigDecimal calculaTaxaUnitario(double valorComDesconto, double porcentagemTaxa){       
        double valorUnitarioTaxa = (valorComDesconto * porcentagemTaxa)/100;
        return new BigDecimal(valorUnitarioTaxa).setScale(4, BigDecimal.ROUND_HALF_UP);
    }
    
    private BigDecimal calculaPorcentagemDesconto(double valorOriginal, double valorComDesconto){       
        double valorDescontoUnitario = calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).doubleValue();
        double porcentagemDesconto = (valorDescontoUnitario / valorOriginal) * 100;
        return new BigDecimal(porcentagemDesconto).setScale(4, BigDecimal.ROUND_HALF_UP);
    }
    
    private BigDecimal calculaValorUnitarioDesconto(double valorOriginal, double valorComDesconto){        
        double valorDesconto = valorOriginal - valorComDesconto;
        return new BigDecimal(valorDesconto);       
    }
       
    private void carregaCampos() {
        jTextFieldDescricaoProduto.setText(retornaProducLang().getName());       
        BigDecimal porcentagemTaxa = retornaPorcentagemTaxa() ;
        double valorOriginal = valorOriginal(quantidade.doubleValue());
        //BigDecimal quan = flatOrderItem.getQtyOrdered();
        double porcentagemDesconto = 0.00;
      
                if("ps_wirepayment".equals(psOrders.getModule())){
                    porcentagemDesconto = 1.50;
               }else{
                    porcentagemDesconto = 0.00;
                }                   
       
        double valorComDesconto = valorOriginal * (1-(porcentagemDesconto/100));        
       // jTextFieldPriceInclTax.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioComTaxa(valorComDesconto, porcentagemTaxa), var.casas_decimais_ARREDONDAMENTO));
      //  jTextFieldRowTotal.setText(formataCampos.bigDecimalParaString(calculaValorTotal(valorComDesconto, porcentagemTaxa, quantidade.doubleValue()), var.casas_decimais_ARREDONDAMENTO));
      //  jTextFieldValorUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(new BigDecimal(valorComDesconto), var.casas_decimais_ARREDONDAMENTO));
       // jTextFieldDiscontAmount.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).multiply(quantidade)));
        jTextFieldDiscontParcent.setText(formataCampos.bigDecimalParaString(new BigDecimal(porcentagemDesconto), 4));
       // jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(new BigDecimal(valorOriginal), var.casas_decimais_ARREDONDAMENTO));
        jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(quantidade, 0));
       // jTextFieldSku.setText(productEntity.getSku());
       // jTextFieldTotalTaxa.setText(formataCampos.bigDecimalParaString(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).multiply(quantidade), var.casas_decimais_ARREDONDAMENTO));
      //  jTextFieldTaxParcent.setText(formataCampos.bigDecimalParaString(new BigDecimal(porcentagemTaxa), 4));  
       //if((formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4).doubleValue() % quantidadeProdutoAgrupado().doubleValue()) == 0){
        jButtonGravar.setEnabled(true);
      // }
    }
    
    private BigDecimal retornaPorcentagemTaxa() {
        BigDecimal valor = BigDecimal.ZERO;
        
        
        return valor.setScale(4, BigDecimal.ROUND_HALF_UP);
    }
    
    private int retornaIdEstado( EntityManagerFactory managerMagento){
        int idRegiao = 0;
        
          return idRegiao;           
    }
    
     private int retornaCatalogEntityInt(){
        int inteiro = 0;
        
        return inteiro;
    }
    
    private PsProductLang retornaProducLang(){
        PsProductLang retorno = null ;
        List<PsProductLang> listEntityVarchar = queryPrestaShop.listPsProductLang(psProduct.getIdProduct(), 2);
        for(PsProductLang str : listEntityVarchar){
            retorno = str;
        }
        return retorno;
    }
  
    private void cancelamento(){
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente cancelar? \n O processo será encerrado!!", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                setCancelamento(true);
                dispose();
            }
    }
    
    public void setProduct(PsProduct catalogProductEntity, PsOrders salesFlatOrder) {
        //this.flatOrderItem = salesFlatOrderItem;
        this.psOrders = salesFlatOrder;
        //this.groupId = salesFlatOrder.getCustomerGroupId();
        this.psProduct = catalogProductEntity;
      // this.quantidade = quantidadeProdutoAgrupado();
        carregaCampos();
                
    }
      
    public boolean isCancelamento() {
        return cancelamento;
    }

    /**
     * True para cancelado
     * @param cancelamento 
     */
    private void setCancelamento(boolean cancelamento) {
        this.cancelamento = cancelamento;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsereSalesFlatOrderItemJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsereSalesFlatOrderItemJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsereSalesFlatOrderItemJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsereSalesFlatOrderItemJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InsereSalesFlatOrderItemJDialog dialog = new InsereSalesFlatOrderItemJDialog(new javax.swing.JFrame(), true, managerPrestaShop,managerCplus, usuario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    static EntityManagerFactory managerPrestaShop;
    static EntityManagerFactory managerCplus;
   // private SalesFlatOrderItem flatOrderItem;
    private PsOrders psOrders;
    FormataCampos formataCampos;
    private boolean cancelamento;
    private BigDecimal quantidade;
    private PsProduct psProduct;
    private QueryPrestaShop queryPrestaShop;
    private QueryCplus queryCplus;
   // private short groupId;
    static Usuario usuario;
    ControleAcesso acesso;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGravar;
    private javax.swing.JLabel jLabelDescricaoProduto;
    private javax.swing.JLabel jLabelDiscontAmount;
    private javax.swing.JLabel jLabelDiscontParcent;
    private javax.swing.JLabel jLabelPrecoOriginal;
    private javax.swing.JLabel jLabelPriceInclTax;
    private javax.swing.JLabel jLabelQuantidade;
    private javax.swing.JLabel jLabelRowTotal;
    private javax.swing.JLabel jLabelSku;
    private javax.swing.JLabel jLabelTaxParcent;
    private javax.swing.JLabel jLabelTotalTaxa;
    private javax.swing.JLabel jLabelValorUnitarioComDesconto;
    private javax.swing.JPanel jPanelInformacaoProduto;
    private javax.swing.JPanel jPanelValorProduto;
    private javax.swing.JTextField jTextFieldDescricaoProduto;
    private javax.swing.JTextField jTextFieldDiscontAmount;
    private javax.swing.JTextField jTextFieldDiscontParcent;
    private javax.swing.JTextField jTextFieldPriceInclTax;
    private javax.swing.JTextField jTextFieldPriceOriginal;
    private javax.swing.JTextField jTextFieldQtyOrdered;
    private javax.swing.JTextField jTextFieldRowTotal;
    private javax.swing.JTextField jTextFieldSku;
    private javax.swing.JTextField jTextFieldTaxParcent;
    private javax.swing.JTextField jTextFieldTotalTaxa;
    private javax.swing.JTextField jTextFieldValorUnitarioComDesconto;
    // End of variables declaration//GEN-END:variables
}
