/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janela.prestaShop;

import acesso.ControleAcesso;
import entidade.cplus.Produto;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Unidade;
import entidade.cplus.Usuario;
import entidade.prestaShop.PsCustomer;
import entidade.prestaShop.PsGroup;
import entidade.prestaShop.PsOrderDetail;
import entidade.prestaShop.PsOrders;
import entidade.prestaShop.PsPack;
import entidade.prestaShop.PsProduct;
import entidade.prestaShop.PsProductLang;
import entidade.prestaShop.PsSpecificPrice;
import entidade.prestaShop.PsStockAvailable;
import janela.cplus.FormataCampos;
import static janela.prestaShop.EditOrderDetailsJDialog.managerCplus;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.ProdutoJpaController;
import jpa.cplus.ProdutoestoqueJpaController;
import jpa.prestaShop.PsCustomerJpaController;
import jpa.prestaShop.PsGroupJpaController;
import jpa.prestaShop.PsOrderDetailJpaController;
import jpa.prestaShop.PsProductJpaController;
import jpa.prestaShop.PsStockAvailableJpaController;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;
import query.prestaShop.QueryPrestaShop;

/**
 *
 * @author leonardo
 */
public class AdicionarOrderDetailJDialog extends javax.swing.JDialog {

    /**
     * Creates new form InsereSalesFlatOrderItemJDialog
     *
     * @param parent
     * @param modal
     * @param managerPrestaShop1
     * @param managerCplus1
     * @param usuario1
     */
    public AdicionarOrderDetailJDialog(java.awt.Frame parent, boolean modal, EntityManagerFactory managerPrestaShop1, EntityManagerFactory managerCplus1, Usuario usuario1) {
        super(parent, modal);
        initComponents();
        managerPrestaShop = managerPrestaShop1;
        managerCplus = managerCplus1;
        queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        queryCplus = new QueryCplus(managerCplus);
        formataCampos = new FormataCampos();
        usuario = usuario1;
        acesso = new ControleAcesso(managerCplus);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        if (acesso.verificaAcessoUsuario(usuario, "Alterar preço de venda")) {
            jTextFieldUnitarioComDesconto.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInformacaoProduto = new javax.swing.JPanel();
        jLabelSku = new javax.swing.JLabel();
        jTextFieldEan = new javax.swing.JTextField();
        jLabelDescricaoProduto = new javax.swing.JLabel();
        jTextFieldDescricaoProduto = new javax.swing.JTextField();
        jButtonGravar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jPanelValorProduto = new javax.swing.JPanel();
        jLabelPrecoOriginal = new javax.swing.JLabel();
        jTextFieldPriceOriginal = new javax.swing.JTextField();
        jLabelTaxParcent = new javax.swing.JLabel();
        jTextFieldReducaoGrupo = new javax.swing.JTextField();
        jLabelDiscontParcent = new javax.swing.JLabel();
        jTextFieldDescontoQuantidade = new javax.swing.JTextField();
        jLabelRowTotal = new javax.swing.JLabel();
        jTextFieldValorTotal = new javax.swing.JTextField();
        jLabelValorUnitarioComDesconto = new javax.swing.JLabel();
        jTextFieldUnitarioComDesconto = new javax.swing.JTextField();
        jLabelQuantidade = new javax.swing.JLabel();
        jTextFieldQuantidade = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaPrecoQuantidade = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insere Produto no Pedido");

        jPanelInformacaoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações do Produto"));

        jLabelSku.setText("EAN:");

        jLabelDescricaoProduto.setText("Descrição:");

        javax.swing.GroupLayout jPanelInformacaoProdutoLayout = new javax.swing.GroupLayout(jPanelInformacaoProduto);
        jPanelInformacaoProduto.setLayout(jPanelInformacaoProdutoLayout);
        jPanelInformacaoProdutoLayout.setHorizontalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelDescricaoProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(jLabelSku, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldEan, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addComponent(jTextFieldDescricaoProduto))
                .addContainerGap())
        );
        jPanelInformacaoProdutoLayout.setVerticalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSku)
                    .addComponent(jTextFieldEan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescricaoProduto)
                    .addComponent(jTextFieldDescricaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButtonGravar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/add.png"))); // NOI18N
        jButtonGravar.setText("Gravar");
        jButtonGravar.setEnabled(false);
        jButtonGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jPanelValorProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores:"));

        jLabelPrecoOriginal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPrecoOriginal.setText("Preço Original:");

        jTextFieldPriceOriginal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPriceOriginal.setEnabled(false);

        jLabelTaxParcent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTaxParcent.setText("Redução Grupo %:");

        jTextFieldReducaoGrupo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldReducaoGrupo.setEnabled(false);

        jLabelDiscontParcent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDiscontParcent.setText("Desconto: %");

        jTextFieldDescontoQuantidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDescontoQuantidade.setEnabled(false);

        jLabelRowTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelRowTotal.setText("Valor Total:");

        jTextFieldValorTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldValorTotal.setEnabled(false);

        jLabelValorUnitarioComDesconto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelValorUnitarioComDesconto.setText("Uni. Com Desc.");

        jTextFieldUnitarioComDesconto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldUnitarioComDesconto.setEnabled(false);
        jTextFieldUnitarioComDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldUnitarioComDescontoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldUnitarioComDescontoFocusLost(evt);
            }
        });
        jTextFieldUnitarioComDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUnitarioComDescontoActionPerformed(evt);
            }
        });

        jLabelQuantidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelQuantidade.setText("Quantidade:");

        jTextFieldQuantidade.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldQuantidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeFocusLost(evt);
            }
        });
        jTextFieldQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQuantidadeActionPerformed(evt);
            }
        });

        jTextAreaPrecoQuantidade.setEditable(false);
        jTextAreaPrecoQuantidade.setColumns(20);
        jTextAreaPrecoQuantidade.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextAreaPrecoQuantidade.setRows(6);
        jTextAreaPrecoQuantidade.setTabSize(6);
        jTextAreaPrecoQuantidade.setFocusable(false);
        jScrollPane1.setViewportView(jTextAreaPrecoQuantidade);

        javax.swing.GroupLayout jPanelValorProdutoLayout = new javax.swing.GroupLayout(jPanelValorProduto);
        jPanelValorProduto.setLayout(jPanelValorProdutoLayout);
        jPanelValorProdutoLayout.setHorizontalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addComponent(jLabelQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelPrecoOriginal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDiscontParcent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelValorUnitarioComDesconto, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jLabelRowTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextFieldDescontoQuantidade)
                            .addComponent(jTextFieldUnitarioComDesconto)
                            .addComponent(jTextFieldValorTotal))))
                .addGap(56, 56, 56)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addComponent(jLabelTaxParcent)
                        .addGap(51, 51, 51)
                        .addComponent(jTextFieldReducaoGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(0, 125, Short.MAX_VALUE))
        );
        jPanelValorProdutoLayout.setVerticalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTaxParcent)
                    .addComponent(jTextFieldReducaoGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPrecoOriginal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDiscontParcent)
                            .addComponent(jTextFieldDescontoQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldUnitarioComDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelValorUnitarioComDesconto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRowTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelQuantidade)
                            .addComponent(jTextFieldQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGravar)
                        .addGap(8, 8, 8)
                        .addComponent(jButtonCancelar)
                        .addContainerGap())
                    .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jPanelValorProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGravar)
                    .addComponent(jButtonCancelar))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarActionPerformed
        insereSalesFlatOrderItem();
        setCancelamento(false);
    }//GEN-LAST:event_jButtonGravarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        cancelamento();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jTextFieldUnitarioComDescontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoFocusGained
        jTextFieldUnitarioComDesconto.selectAll();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoFocusGained

    private void jTextFieldUnitarioComDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoFocusLost
        eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoFocusLost

    private void jTextFieldUnitarioComDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoActionPerformed
        eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoActionPerformed

    private void jTextFieldQuantidadeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeFocusGained
        jTextFieldQuantidade.selectAll();
    }//GEN-LAST:event_jTextFieldQuantidadeFocusGained

    private void jTextFieldQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeFocusLost
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQuantidadeFocusLost

    private void jTextFieldQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeActionPerformed
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQuantidadeActionPerformed

    private void eventoValorUnitario() {
       reducaoMod = formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 2).divide(
        formataCampos.stringParaDecimal( jTextFieldUnitarioComDesconto.getText(), 2), 2, BigDecimal.ROUND_HALF_UP); 
       reducaoMod = reducaoMod.subtract(BigDecimal.ONE).multiply(new BigDecimal("100.00"));
        jTextFieldDescontoQuantidade.setText(formataCampos.bigDecimalParaString(reducaoMod, 2));
        unitMod = formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2);
        //jTextFieldUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(precUni, 2));                
        quantMod = Integer.valueOf(jTextFieldQuantidade.getText());
        totalMod = unitMod.multiply(new BigDecimal(quantMod + ".00"));
        jTextFieldValorTotal.setText(formataCampos.bigDecimalParaString(totalMod, 2));

        if (Integer.valueOf(jTextFieldQuantidade.getText()) % quantidadeProdutoAgrupado() == 0) {
            jButtonGravar.setEnabled(true);
            jButtonGravar.requestFocus();
        }
    }

    private void eventoQuantidade() {
        reducaoMod = BigDecimal.ZERO;
        if ((Integer.valueOf(jTextFieldQuantidade.getText()) % quantidadeProdutoAgrupado()) == 0) {
            quantMod = Integer.valueOf(jTextFieldQuantidade.getText());
            if (verificaEstoqueDisponivel(quantMod)) {
                BigDecimal precUni = psProduct.getPrice();
                BigDecimal redGrup = psGroup.getReduction().divide(new BigDecimal("100.00"), BigDecimal.ROUND_HALF_UP);
                precUni = precUni.multiply(BigDecimal.ONE.subtract(redGrup));
                jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(precUni, 2));
                for (PsSpecificPrice sp : listSpecificPrice) {
                    if (sp.getFromQuantity() <= quantMod) {
                        reducaoMod = sp.getReduction();
                        // reducaoMod = reduQuant;
                    }
                    if ("amount".equals(sp.getReductionType())) {
                        precUni = sp.getPrice().multiply(BigDecimal.ONE.subtract(redGrup));
                        jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(precUni, 2));
                    }
                }
                jTextFieldDescontoQuantidade.setText(formataCampos.bigDecimalParaString(reducaoMod.multiply(new BigDecimal("100.00")), 2));
                unitMod = precUni.multiply(BigDecimal.ONE.subtract(reducaoMod)).setScale(2, BigDecimal.ROUND_HALF_UP);

                jTextFieldUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(unitMod, 2));
                totalMod = unitMod.multiply(new BigDecimal(jTextFieldQuantidade.getText() + ".00"));
                jTextFieldValorTotal.setText(formataCampos.bigDecimalParaString(totalMod, 2));
                jButtonGravar.setEnabled(true);
                jButtonGravar.requestFocus();
            } else {
                JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + estoqueDisponivel());
            }
        } else {
            //jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(flatOrderItem.getQtyOrdered(), 0));
            jButtonGravar.setEnabled(false);
            JOptionPane.showMessageDialog(null, "A quantidade deve ser multipla de: " + quantidadeProdutoAgrupado().intValue());
        }
    }

    private Integer quantidadeProdutoAgrupado() {
        Integer quan = 1;
        if (psProduct.getCacheIsPack()) {
            for (PsPack psP : queryPrestaShop.listPackPorProduct(psProduct.getIdProduct())) {
                quan = psP.getQuantity();
            }
        }

        return quan;
    }

    private int estoqueDisponivel() {
        int quantidadeDisponivel = 0;
        for (PsStockAvailable e : queryPrestaShop.listEstoqueProduto(psProduct.getIdProduct())) {
            stok = e;
            quantidadeDisponivel = e.getQuantity();
        }
        return quantidadeDisponivel;
    }

    private void insereSalesFlatOrderItem() {
        quantMod = Integer.valueOf(jTextFieldQuantidade.getText());
        if (verificaEstoqueDisponivel(quantMod)) {
            PsOrderDetail item = new PsOrderDetail();
            item.setIdOrder(psOrders.getIdOrder());
            item.setIdOrderInvoice(0);
            item.setIdWarehouse(0);
            item.setIdShop(1);
            item.setProductId(psProduct.getIdProduct());
            item.setProductAttributeId(0);
            item.setIdCustomization(0);
            item.setProductName(nomePsProduct());
            item.setProductQuantity(quantMod);
            item.setProductQuantityInStock(estoqueDisponivel());
            item.setProductQuantityRefunded(0);
            item.setProductQuantityReturn(0);
            item.setProductQuantityReinjected(0);
            item.setProductPrice(formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4));
            item.setReductionPercent(formataCampos.stringParaDecimal(jTextFieldDescontoQuantidade.getText(), 2));
            item.setReductionAmount(BigDecimal.ZERO);
            item.setReductionAmountTaxIncl(BigDecimal.ZERO);
            item.setReductionAmountTaxExcl(BigDecimal.ZERO);
            item.setGroupReduction(formataCampos.stringParaDecimal(jTextFieldReducaoGrupo.getText(), 2));
            item.setProductQuantityDiscount(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2).add(BigDecimal.ONE));
            item.setProductEan13(psProduct.getEan13());
            item.setProductReference(psProduct.getReference());
            item.setProductWeight(psProduct.getWeight());
            item.setIdTaxRulesGroup(0);
            item.setTaxComputationMethod(Short.valueOf("0"));
            item.setTaxRate(BigDecimal.ZERO);
            item.setEcotax(BigDecimal.ZERO);
            item.setEcotaxTaxRate(BigDecimal.ZERO);
            if(item.getReductionPercent().doubleValue() > 0.00){
                item.setDiscountQuantityApplied(true);
            }else{
                item.setDiscountQuantityApplied(false);
            }
            item.setDownloadNb(0);
            item.setTotalPriceTaxExcl(formataCampos.stringParaDecimal(jTextFieldValorTotal.getText(), 4));
            item.setTotalPriceTaxIncl(formataCampos.stringParaDecimal(jTextFieldValorTotal.getText(), 4));
            item.setUnitPriceTaxIncl(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2));
            item.setUnitPriceTaxExcl(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2));
            item.setTotalShippingPriceTaxIncl(BigDecimal.ZERO);
            item.setTotalShippingPriceTaxExcl(BigDecimal.ZERO);
            item.setPurchaseSupplierPrice(psProduct.getWholesalePrice());
            item.setOriginalProductPrice(formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4));
            item.setOriginalWholesalePrice(psProduct.getWholesalePrice());
            item.setTotalRefundedTaxExcl(BigDecimal.ZERO);
            item.setTotalRefundedTaxIncl(BigDecimal.ZERO);
            item.setTaxName("");
            
            new PsOrderDetailJpaController(managerPrestaShop).create(item);
            
            editaEstoquePS(quantMod);
            atualizaCplus();
            jButtonGravar.setEnabled(false);
            dispose();
        } else {           
            JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + estoqueDisponivel());
        }

    }
    
    private String nomePsProduct(){
        String nome = "";
         for (PsProductLang lan : queryPrestaShop.listPsProductLang(psProduct.getIdProduct(), 2)) {
                nome = lan.getName();
            }
         return nome;
    }

    private void editaEstoquePS(int quantidadeAtual) {
       // int quantidadeRequerida = quantidadeAtual - quantOrderDetails;
        int stockNovo = stok.getQuantity() - quantidadeAtual;
        stok.setQuantity(stockNovo);
        //stok.setPhysicalQuantity(stockNovo);
        int reser = stok.getPhysicalQuantity() - stok.getQuantity();
        stok.setReservedQuantity(reser);
        try {
            new PsStockAvailableJpaController(managerPrestaShop).edit(stok);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Houve um erro ao Atualizar Estoque PrestaShop!!!\n " + ex);
        }
    }

    private void atualizaCplus() {
        List<Produtoestoque> listestoque = new QueryCplus(managerCplus).listagemProdutoEstoque(psProduct.getReference());
        for (Produtoestoque estoque : listestoque) {
            estoque.setLastChange(formataCampos.dataAtual());
            try {
                new ProdutoestoqueJpaController(managerCplus).edit(estoque);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Houve um erro ao Atualizar Estoque C-Plus!!!\n " + ex);
            }
        }
    }

    private boolean verificaEstoqueDisponivel(Integer quan) {
        // double quantidadeRequerida = quan.doubleValue() - quantidadeAntiga.doubleValue();
        boolean condicao = true;
        List<PsStockAvailable> listEstoqItem = new QueryPrestaShop(managerPrestaShop).listEstoqueProduto(psProduct.getIdProduct());
        for (PsStockAvailable estoqItem : listEstoqItem) {
            if (quan.doubleValue() <= estoqItem.getQuantity()) {
                condicao = true;
            } else {
                condicao = false;
            }
        }//fim if que verifica se a quan requerida é maior que zero       
        return condicao;
    }

    private void carregaCampos() {
        reducaoMod = BigDecimal.ZERO;
        psCustomer = new PsCustomerJpaController(managerPrestaShop).findPsCustomer(psOrders.getIdCustomer());
        listSpecificPrice = queryPrestaShop.listPsSpecificPrice(psProduct.getIdProduct(), psCustomer.getIdDefaultGroup());
        psGroup = new PsGroupJpaController(managerPrestaShop).findPsGroup(psCustomer.getIdDefaultGroup());
        //quantMod = Integer.valueOf(jTextFieldQuantidade.getText());
        // BigDecimal reduQuany = BigDecimal.ZERO;
        BigDecimal precUni = psProduct.getPrice();
        BigDecimal redGrup = psGroup.getReduction().divide(new BigDecimal("100.00"), BigDecimal.ROUND_HALF_UP);
        precUni = precUni.multiply(BigDecimal.ONE.subtract(redGrup));
        jTextFieldReducaoGrupo.setText(formataCampos.bigDecimalParaString(psGroup.getReduction(), 2));
        jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(precUni, 2));
        for (PsSpecificPrice sp : listSpecificPrice) {
            if (sp.getFromQuantity() <= quantMod) {
                reducaoMod = sp.getReduction();
            }
            if ("amount".equals(sp.getReductionType())) {
                precUni = sp.getPrice().multiply(BigDecimal.ONE.subtract(redGrup));
                jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(precUni, 2));
            }
        }
        jTextFieldDescricaoProduto.setText(retornaProducLang().getName());
        jTextFieldDescontoQuantidade.setText(formataCampos.bigDecimalParaString(reducaoMod.multiply(new BigDecimal("100.00")), 2));
        unitMod = precUni.multiply(BigDecimal.ONE.subtract(reducaoMod)).setScale(2, BigDecimal.ROUND_HALF_UP);
        jTextFieldUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(unitMod, 2));
        jTextFieldValorTotal.setText(formataCampos.bigDecimalParaString(new BigDecimal(quantMod).multiply(unitMod), 2));
        jTextFieldQuantidade.setText(String.valueOf(quantMod));
        jTextFieldEan.setText(psProduct.getEan13());
        //quantOrderDetails = psOrderDetails.getProductQuantity();
        jButtonGravar.setEnabled(true);
        
        estoqueDisponivel(); // carrega variavel globla
        
         String txt = " Quant.\t  % \tValor\n";
        for (PsSpecificPrice sp : listSpecificPrice) {
            txt = txt + " " + sp.getFromQuantity() + " \t" + formataCampos.bigDecimalParaString(sp.getReduction().multiply(new BigDecimal("100.00")), 2) + "% \t"
                    + formataCampos.bigDecimalParaString((BigDecimal.ONE.subtract(sp.getReduction())).multiply(
                            formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4)), 2) + "\n";
        }
        jTextAreaPrecoQuantidade.setText(txt);
        // }

    }

    private PsProductLang retornaProducLang() {
        PsProductLang retorno = null;
        List<PsProductLang> listEntityVarchar = queryPrestaShop.listPsProductLang(psProduct.getIdProduct(), 2);
        for (PsProductLang str : listEntityVarchar) {
            retorno = str;
        }
        return retorno;
    }

    private void cancelamento() {
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente cancelar? \n O processo será encerrado!!", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            setCancelamento(true);
            dispose();
        }
    }

    public void setObjetos(PsProduct product, PsOrders order) {
        //this.psOrderDetails = orderDetails;
        this.psOrders = order;
        //this.groupId = salesFlatOrder.getCustomerGroupId();
        this.psProduct = product;
        this.reducaoMod = BigDecimal.ZERO;
        quantMod = quantidadeProdutoAgrupado();
        carregaCampos();

    }

    public boolean isCancelamento() {
        return cancelamento;
    }

    /**
     * True para cancelado
     *
     * @param cancelamento
     */
    private void setCancelamento(boolean cancelamento) {
        this.cancelamento = cancelamento;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdicionarOrderDetailJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdicionarOrderDetailJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdicionarOrderDetailJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdicionarOrderDetailJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdicionarOrderDetailJDialog dialog = new AdicionarOrderDetailJDialog(new javax.swing.JFrame(), true, managerPrestaShop, managerCplus, usuario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    static EntityManagerFactory managerPrestaShop;
    static EntityManagerFactory managerCplus;
    // private SalesFlatOrderItem flatOrderItem;
    private PsOrders psOrders;
    //private PsOrderDetail psOrderDetails;
    private FormataCampos formataCampos;
    private boolean cancelamento;
    private PsProduct psProduct;
    private QueryPrestaShop queryPrestaShop;
    private QueryCplus queryCplus;
    // private short groupId;
    static private Usuario usuario;
    private ControleAcesso acesso;
    private BigDecimal reducaoMod;
    private BigDecimal unitMod;
    private int quantMod;
    private BigDecimal totalMod;
    private Produto prodCplus;
    private List<PsSpecificPrice> listSpecificPrice;
    private PsCustomer psCustomer;
    private PsGroup psGroup;
    private PsStockAvailable stok;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGravar;
    private javax.swing.JLabel jLabelDescricaoProduto;
    private javax.swing.JLabel jLabelDiscontParcent;
    private javax.swing.JLabel jLabelPrecoOriginal;
    private javax.swing.JLabel jLabelQuantidade;
    private javax.swing.JLabel jLabelRowTotal;
    private javax.swing.JLabel jLabelSku;
    private javax.swing.JLabel jLabelTaxParcent;
    private javax.swing.JLabel jLabelValorUnitarioComDesconto;
    private javax.swing.JPanel jPanelInformacaoProduto;
    private javax.swing.JPanel jPanelValorProduto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaPrecoQuantidade;
    private javax.swing.JTextField jTextFieldDescontoQuantidade;
    private javax.swing.JTextField jTextFieldDescricaoProduto;
    private javax.swing.JTextField jTextFieldEan;
    private javax.swing.JTextField jTextFieldPriceOriginal;
    private javax.swing.JTextField jTextFieldQuantidade;
    private javax.swing.JTextField jTextFieldReducaoGrupo;
    private javax.swing.JTextField jTextFieldUnitarioComDesconto;
    private javax.swing.JTextField jTextFieldValorTotal;
    // End of variables declaration//GEN-END:variables
}
