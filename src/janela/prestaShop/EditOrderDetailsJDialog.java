/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package janela.prestaShop;

import acesso.ControleAcesso;
import entidade.cplus.Usuario;
import entidade.prestaShop.PsOrderDetail;
import entidade.prestaShop.PsOrders;
import entidade.prestaShop.PsProduct;
import integrador.webservice.ClienteWebService;
import janela.cplus.FormataCampos;
import static janela.prestaShop.VendaDigimacroJFrame.managerIntegrador;

;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import query.integrador.QueryIntegrador;


/**
 *
 * @author leonardo
 */
public class EditOrderDetailsJDialog extends javax.swing.JDialog {

    /**
     * Creates new form editSalesFlatOrderItemJDialog
     * @param parent
     * @param modal
     * @param managerPrestaShop1
     * @param managerCplus1
     * @param usuario1
     */
    public EditOrderDetailsJDialog(java.awt.Frame parent, boolean modal, EntityManagerFactory managerPrestaShop1, EntityManagerFactory managerCplus1, Usuario usuario1) {
        super(parent, modal);
        initComponents();
        managerPrestaShop = managerPrestaShop1;
        managerCplus = managerCplus1;
        formataCampos = new FormataCampos();
        shopUrl = new QueryIntegrador(managerIntegrador).valorConfiguracao("shopURL");
        key = new QueryIntegrador(managerIntegrador).valorConfiguracao("shopKEY");
        this.ws = new ClienteWebService(shopUrl, key, false);
        usuario = usuario1;
        acesso = new ControleAcesso(managerCplus);
        if (acesso.verificaAcessoUsuario(usuario, "Alterar preço de venda")) {
            jTextFieldUnitarioComDesconto.setEnabled(true);
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInformacaoProduto = new javax.swing.JPanel();
        jLabelSku = new javax.swing.JLabel();
        jTextFieldSku = new javax.swing.JTextField();
        jLabelDescricaoProduto = new javax.swing.JLabel();
        jTextFieldDescricaoProduto = new javax.swing.JTextField();
        jPanelValorProduto = new javax.swing.JPanel();
        jLabelPrecoOriginal = new javax.swing.JLabel();
        jTextFieldPriceOriginal = new javax.swing.JTextField();
        jLabelTaxParcent = new javax.swing.JLabel();
        jTextFieldReducaoGrupo = new javax.swing.JTextField();
        jLabelTotalTaxa = new javax.swing.JLabel();
        jTextFieldTotalTaxa = new javax.swing.JTextField();
        jLabelDiscontParcent = new javax.swing.JLabel();
        jTextFieldDescontoQuantidade = new javax.swing.JTextField();
        jLabelRowTotal = new javax.swing.JLabel();
        jTextFieldValorTotal = new javax.swing.JTextField();
        jLabelValorUnitarioComDesconto = new javax.swing.JLabel();
        jTextFieldUnitarioComDesconto = new javax.swing.JTextField();
        jLabelQuantidade = new javax.swing.JLabel();
        jTextFieldQtyOrdered = new javax.swing.JTextField();
        jButtonGravar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanelInformacaoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações do Produto"));

        jLabelSku.setText("SKU:");

        jLabelDescricaoProduto.setText("Descrição:");

        javax.swing.GroupLayout jPanelInformacaoProdutoLayout = new javax.swing.GroupLayout(jPanelInformacaoProduto);
        jPanelInformacaoProduto.setLayout(jPanelInformacaoProdutoLayout);
        jPanelInformacaoProdutoLayout.setHorizontalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelDescricaoProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(jLabelSku, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSku, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addComponent(jTextFieldDescricaoProduto))
                .addContainerGap())
        );
        jPanelInformacaoProdutoLayout.setVerticalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSku)
                    .addComponent(jTextFieldSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescricaoProduto)
                    .addComponent(jTextFieldDescricaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 31, Short.MAX_VALUE))
        );

        jPanelValorProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores:"));

        jLabelPrecoOriginal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPrecoOriginal.setText("Preço Original:");

        jTextFieldPriceOriginal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPriceOriginal.setEnabled(false);

        jLabelTaxParcent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTaxParcent.setText("Redução Grupo %:");

        jTextFieldReducaoGrupo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldReducaoGrupo.setEnabled(false);

        jLabelTotalTaxa.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTotalTaxa.setText("Total Taxa:");

        jTextFieldTotalTaxa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTotalTaxa.setEnabled(false);

        jLabelDiscontParcent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDiscontParcent.setText("Desconto: %");

        jTextFieldDescontoQuantidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDescontoQuantidade.setEnabled(false);

        jLabelRowTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelRowTotal.setText("Valor Total:");

        jTextFieldValorTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldValorTotal.setEnabled(false);

        jLabelValorUnitarioComDesconto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelValorUnitarioComDesconto.setText("Uni. Com Desc.");

        jTextFieldUnitarioComDesconto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldUnitarioComDesconto.setEnabled(false);
        jTextFieldUnitarioComDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldUnitarioComDescontoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldUnitarioComDescontoFocusLost(evt);
            }
        });
        jTextFieldUnitarioComDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUnitarioComDescontoActionPerformed(evt);
            }
        });

        jLabelQuantidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelQuantidade.setText("Quantidade:");

        jTextFieldQtyOrdered.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldQtyOrdered.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQtyOrdered.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtyOrderedFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQtyOrderedFocusLost(evt);
            }
        });
        jTextFieldQtyOrdered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQtyOrderedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelValorProdutoLayout = new javax.swing.GroupLayout(jPanelValorProduto);
        jPanelValorProduto.setLayout(jPanelValorProdutoLayout);
        jPanelValorProdutoLayout.setHorizontalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelPrecoOriginal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDiscontParcent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelValorUnitarioComDesconto, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(jLabelRowTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldDescontoQuantidade)
                    .addComponent(jTextFieldUnitarioComDesconto)
                    .addComponent(jTextFieldValorTotal))
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTaxParcent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTotalTaxa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelValorProdutoLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabelQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldReducaoGrupo)
                    .addComponent(jTextFieldTotalTaxa)
                    .addComponent(jTextFieldQtyOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelValorProdutoLayout.setVerticalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTaxParcent)
                    .addComponent(jTextFieldReducaoGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPrecoOriginal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTotalTaxa)
                    .addComponent(jTextFieldTotalTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDiscontParcent)
                    .addComponent(jTextFieldDescontoQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUnitarioComDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelValorUnitarioComDesconto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelQuantidade)
                    .addComponent(jTextFieldQtyOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRowTotal)))
        );

        jButtonGravar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Edit.png"))); // NOI18N
        jButtonGravar.setText("Gravar");
        jButtonGravar.setEnabled(false);
        jButtonGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelValorProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonGravar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelar))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGravar)
                    .addComponent(jButtonCancelar))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarActionPerformed
        editarSalesFlatOrderItem();
    }//GEN-LAST:event_jButtonGravarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        cancelamento();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jTextFieldUnitarioComDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoFocusLost
       eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoFocusLost

    private void jTextFieldQtyOrderedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtyOrderedFocusLost
       eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQtyOrderedFocusLost

    private void jTextFieldQtyOrderedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtyOrderedFocusGained
        jTextFieldQtyOrdered.selectAll();
    }//GEN-LAST:event_jTextFieldQtyOrderedFocusGained

    private void jTextFieldUnitarioComDescontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoFocusGained
         jTextFieldUnitarioComDesconto.selectAll();
        
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoFocusGained

    private void jTextFieldUnitarioComDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoActionPerformed
       eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoActionPerformed

    private void jTextFieldQtyOrderedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQtyOrderedActionPerformed
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQtyOrderedActionPerformed

    private void eventoValorUnitario() {
        double valorComDesconto = formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 4).doubleValue();
        double porcentagemTaxa = formataCampos.stringParaDecimal(jTextFieldReducaoGrupo.getText(), 4).doubleValue();
        double valorOriginal = formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4).doubleValue();
        BigDecimal quantidade = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
    //    jTextFieldPriceInclTax.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioComTaxa(valorComDesconto, porcentagemTaxa), var.casas_decimais_ARREDONDAMENTO));
        jTextFieldDescontoQuantidade.setText(formataCampos.bigDecimalParaString(calculaPorcentagemDesconto(valorOriginal, valorComDesconto), 4));
     //   jTextFieldTotalDesconto.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).multiply(quantidade), var.casas_decimais_ARREDONDAMENTO));
     //   jTextFieldTotalTaxa.setText(formataCampos.bigDecimalParaString(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).multiply(quantidade), var.casas_decimais_ARREDONDAMENTO));
    //    jTextFieldRowTotal.setText(formataCampos.bigDecimalParaString(calculaValorTotal(valorComDesconto, porcentagemTaxa, quantidade.doubleValue()), var.casas_decimais_ARREDONDAMENTO));
        if((formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4).doubleValue() % quantidadeProdutoAgrupado().doubleValue()) == 0){
        jButtonGravar.setEnabled(true);
        jButtonGravar.requestFocus();
        }
    }
    
    private void eventoQuantidade(){
         if((formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4).doubleValue() % quantidadeProdutoAgrupado().doubleValue()) == 0){
         BigDecimal quantidade = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
        if (verificaEstoqueDisponivel(BigDecimal.ONE, quantidade, productEntity , managerPrestaShop)) {          
            double porcentagemDesconto = 1 - (formataCampos.stringParaDecimal(jTextFieldDescontoQuantidade.getText(), 4).doubleValue() / 100.00);
            double porcentagemTaxa = formataCampos.stringParaDecimal(jTextFieldReducaoGrupo.getText(), 4).doubleValue();
            double valorOriginal = valorOriginal(quantidade.doubleValue());
            double valorComDesconto = valorOriginal * porcentagemDesconto ;          
           // jTextFieldPriceInclTax.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioComTaxa(valorComDesconto, porcentagemTaxa), var.casas_decimais_ARREDONDAMENTO));
           // jTextFieldPriceInclTax.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioComTaxa(valorComDesconto, porcentagemTaxa), 4));
         //   jTextFieldValorUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(new BigDecimal(valorComDesconto), var.casas_decimais_ARREDONDAMENTO));            
         //   jTextFieldTotalDesconto.setText(formataCampos.bigDecimalParaString(calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).multiply(quantidade), var.casas_decimais_ARREDONDAMENTO));
         //   jTextFieldTotalTaxa.setText(formataCampos.bigDecimalParaString(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).multiply(quantidade), var.casas_decimais_ARREDONDAMENTO));
          //  jTextFieldRowTotal.setText(formataCampos.bigDecimalParaString(calculaValorTotal(valorComDesconto, porcentagemTaxa, quantidade.doubleValue()), var.casas_decimais_ARREDONDAMENTO));
          //  jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(new BigDecimal(valorOriginal) , var.casas_decimais_ARREDONDAMENTO));
            jButtonGravar.setEnabled(true);
            jButtonGravar.requestFocus();
        }else{
          // jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(flatOrderItem.getQtyOrdered(), 0));
            int qunt = verificaQuantidadeEstoque(productEntity, managerPrestaShop).intValue();
             JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + qunt) ;
        }
        }else{
             //jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(flatOrderItem.getQtyOrdered(), 0));
            jButtonGravar.setEnabled(false);
            JOptionPane.showMessageDialog(null, "A quantidade deve ser multipla de: " +quantidadeProdutoAgrupado().intValue()) ;            
        }
    }
    
    private BigDecimal quantidadeProdutoAgrupado(){
         BigDecimal quan = BigDecimal.ONE;
//        List<CatalogProductBundleSelection> listBundleSelection = new CatalogProductBundleSelectionJpaController(managerPrestaShop).resultPorEntityId(productEntity.getEntityId());
      //  for(CatalogProductBundleSelection bundle : listBundleSelection){          
     //       quan = bundle.getSelectionQty();
      //  }
        return quan;
    }
    
    private void editarSalesFlatOrderItem() {
        BigDecimal quantidade = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
       // BigDecimal valorTotalDesconto = formataCampos.stringParaDecimal(jTextFieldTotalDesconto.getText(), 4);
        BigDecimal valorOriginal = formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4);
        //BigDecimal quantidade = formataCampos.stringParaDecimal(jTextFieldQtyOrdered.getText(), 4);
       // if (verificaEstoqueDisponivel(quantidadeAntiga, quantidade, productEntity, managerPrestaShop)) {
          //  new AtualizaSalesFlatOrderItem().editaSalesFlatorderItem(quantidade, valorTotalDesconto, valorOriginal, productEntity, flatOrderItem, flatOrder, var, managerPrestaShop);
          //  new AtualizaSalesFlatOrder().atualizaSalesFlatOrder(flatOrder, var, managerPrestaShop);
            editaEstoqueMagento(quantidade, productEntity, managerPrestaShop);
            jButtonGravar.setEnabled(false);
            atualizaCplus(productEntity, managerCplus);
            dispose();
      //  } else {
           // jTextFieldQtyOrdered.setText(formataCampos.bigDecimalParaString(flatOrderItem.getQtyOrdered(), 0));
            int qunt = verificaQuantidadeEstoque(productEntity, managerPrestaShop).intValue();
            JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + qunt);
      //  }
    }
    
    private void atualizaCplus(PsProduct entity, EntityManagerFactory managerCplus){
   //     List<Produtoestoque> listestoque = new QueryCplus(managerCplus).listagemProdutoEstoque(entity.getSku());
  //     for(Produtoestoque estoque : listestoque){          
    //        estoque.setLastChange(new Date(System.currentTimeMillis()));
  //          try {
   //             new ProdutoestoqueJpaController(managerCplus).edit(estoque);
   //         } catch (Exception ex) {
   //            JOptionPane.showMessageDialog(null, "Houve um erro ao Atualizar Estoque Produto!!!\n " + ex);
     //       }
     //   }
    }
    
    private double valorOriginal(double quantidade){
        double menorValor = 0.0;
      //  if(comparaDataAtualComDoBanco(productEntity, var.EavAttribute_SPECIAL_TO_DATE, managerPrestaShop) == false){
     //       menorValor = retornaDecimal(var.EavAttribute_SPECIAL_PRICE, productEntity, managerPrestaShop);
     //   }else{
     //        menorValor = retornaDecimal(var.EavAttribute_PRICE, productEntity, managerPrestaShop);
     //   }      
     //   List< CatalogProductEntityGroupPrice> listGroupPrice = new CatalogProductEntityGroupPriceJpaController(managerPrestaShop).listGroupPrice(productEntity.getEntityId(), groupId);
     //   for(CatalogProductEntityGroupPrice groupPrice :listGroupPrice){          
      //      menorValor = groupPrice.getValue().doubleValue();
     //   }       
    //    List< CatalogProductEntityTierPrice> listTierPrice = new CatalogProductEntityTierPriceJpaController(managerPrestaShop).listadeTierPricePorProduto(productEntity, groupId);
   //      for (CatalogProductEntityTierPrice tierPrice : listTierPrice) {
   //          if(quantidade >= tierPrice.getQty().doubleValue()){
    //             if(menorValor > tierPrice.getValue().doubleValue()){
   //                  menorValor = tierPrice.getValue().doubleValue();
    //             }
   //          }
      //   }       
        return menorValor;
    }
    
    private double retornaDecimal(short atributo, PsProduct catalogProductEntity, EntityManagerFactory managerPrestaShop){
        BigDecimal decimal = BigDecimal.ZERO;
      //  List<CatalogProductEntityDecimal> listEntityDecimal = new CatalogProductEntityDecimalJpaController(managerPrestaShop).finalAtributo(catalogProductEntity, atributo, new CoreStoreJpaController(managerPrestaShop).findCoreStore((short)0));
      //  for(CatalogProductEntityDecimal deci : listEntityDecimal){
      //      decimal = deci.getValue();
       // }
        return decimal.doubleValue();
    }
     /**
     * Função que verifica somente o dia mes e ano atual compara com a data do
     * banco de dados do magento data magento SPECIAL_TO_DATE
     *
     * @param entity
     * @param atributo
     * @param managerPrestaShop
     * @return true se a data atual é igual ou menos que a data do banco
     */
   private boolean comparaDataAtualComDoBanco(PsProduct  entity, short atributo, EntityManagerFactory managerPrestaShop) {
        boolean condicao = false;
       // CoreStore coreStore = new CoreStoreJpaController(managerPrestaShop).findCoreStore((short)0);
        Calendar dataAtualCal = Calendar.getInstance();
        dataAtualCal.setTime(new Date(System.currentTimeMillis()));
        String diaAtualStr = String.format("%02d", dataAtualCal.get(Calendar.DAY_OF_MONTH));
        String mesAtualStr = String.format("%02d", dataAtualCal.get(Calendar.MONTH));
        String anoAtualStr = String.format("%04d", dataAtualCal.get(Calendar.YEAR));
        Calendar dataBancoCal = Calendar.getInstance();
        int totalDataAtual = Integer.valueOf(anoAtualStr + mesAtualStr + diaAtualStr);
      //  List<CatalogProductEntityDatetime> listEntity = new CatalogProductEntityDatetimeJpaController(managerPrestaShop).finalAtributo(entity, atributo, coreStore);
     //   if (listEntity.isEmpty()) {
    //        condicao = true;
   //     } else {
   //         for (CatalogProductEntityDatetime databanco : listEntity) {
     //           dataBancoCal.setTime(databanco.getValue());
     //           String diaBancoStr = String.format("%02d", dataBancoCal.get(Calendar.DAY_OF_MONTH));
    //            String mesBancoStr = String.format("%02d", dataBancoCal.get(Calendar.MONTH));
     //           String anoBancoStr = String.format("%04d", dataBancoCal.get(Calendar.YEAR));
     //           int totalDataBanco = Integer.valueOf(anoBancoStr + mesBancoStr + diaBancoStr);               
     //           if (totalDataAtual <= totalDataBanco) {
     //               condicao = false;
     //           } else {
      //              condicao = true;
        //        }                                 
    //        }//fim for dataTime banco
    //    }//fim else que verifica se existe a data no banco
        return condicao;
    }
    
    private BigDecimal verificaQuantidadeEstoque(PsProduct entity, EntityManagerFactory managerPrestaShop){
        BigDecimal qty = BigDecimal.ZERO; 
      //  List<CataloginventoryStockItem> listEstoqItem = new CataloginventoryStockItemJpaController(managerPrestaShop).finalAtributo(entity, var.Stok_CATALOG_INVENTORY_STOCK);
         //   for (CataloginventoryStockItem estoqItem : listEstoqItem) {
        //        CataloginventoryStockItem estoque = new CataloginventoryStockItemJpaController(managerPrestaShop).findCataloginventoryStockItem(estoqItem.getItemId());
       //          qty = estoque.getQty();
      //      }//fim for estoque magento
            return qty;
    }
    
    private void editaEstoqueMagento(BigDecimal quantidade, PsProduct  entity, EntityManagerFactory managerMagento) {
     //   double quantidadeRequerida = quantidade.doubleValue() - quantidadeAntiga.doubleValue() ;
       // List<CataloginventoryStockItem> listEstoqItem = new CataloginventoryStockItemJpaController(managerPrestaShop).finalAtributo(entity, var.Stok_CATALOG_INVENTORY_STOCK);
     //   for (CataloginventoryStockItem estoqItem : listEstoqItem) {
    //        double novaQuantidade = estoqItem.getQty().doubleValue() - quantidadeRequerida;
    //        estoqItem.setQty(new BigDecimal(novaQuantidade));
    //        try {
     //           new CataloginventoryStockItemJpaController(managerPrestaShop).edit(estoqItem);
     //           quantidadeAntiga = quantidade;
     //       } catch (Exception ex) {
     //          JOptionPane.showMessageDialog(null, "Hove um erro ao editar Estoque no Magento!\n" + ex);
      //      }
     //   }
    }
    
   private boolean verificaEstoqueDisponivel(BigDecimal quantidadeAntiga, BigDecimal quantidade, PsProduct  entity, EntityManagerFactory managerMagento){
       double quantidadeRequerida = quantidade.doubleValue() - quantidadeAntiga.doubleValue();
       boolean condicao = true;
       if(quantidadeRequerida > 0.00){
           double quantidadeDisponivel = 0;
        //    List<CataloginventoryStockItem> listEstoqItem = new CataloginventoryStockItemJpaController(managerPrestaShop).finalAtributo(entity, var.Stok_CATALOG_INVENTORY_STOCK);
        //    for (CataloginventoryStockItem estoqItem : listEstoqItem) {
        //        quantidadeDisponivel = estoqItem.getQty().doubleValue();
            }//fim for estoque magento
       //     if(quantidadeDisponivel >= quantidadeRequerida){
      //          condicao = true;
     //       }else{
      //          condicao = false;
     //       }            
   //    }//fim if que verifica se a quantidade requerida é maior que zero
        
       return condicao;
   }
   
    private BigDecimal calculaValorUnitarioComTaxa(double valorComDesconto, double porcentagemTaxa ){
        BigDecimal valUniComTaxa = new BigDecimal(valorComDesconto).add(calculaTaxaUnitario(valorComDesconto, porcentagemTaxa));
        return valUniComTaxa;
    }
    
    private BigDecimal calculaValorTotal(double valorComDesconto, double porcentagemTaxa, double quantidade){
        double valTotal = (valorComDesconto + calculaTaxaUnitario(valorComDesconto, porcentagemTaxa).doubleValue()) * quantidade;
        return new BigDecimal(valTotal);
    }
    
    private BigDecimal calculaTaxaUnitario(double valorComDesconto, double porcentagemTaxa){       
        double valorUnitarioTaxa = (valorComDesconto * porcentagemTaxa)/100;
        return new BigDecimal(valorUnitarioTaxa).setScale(4, BigDecimal.ROUND_HALF_UP);
    }
    
    private BigDecimal calculaPorcentagemDesconto(double valorOriginal, double valorComDesconto){       
        double valorDescontoUnitario = calculaValorUnitarioDesconto(valorOriginal, valorComDesconto).doubleValue();
        double porcentagemDesconto = (valorDescontoUnitario / valorOriginal) * 100;
        return new BigDecimal(porcentagemDesconto).setScale(4, BigDecimal.ROUND_HALF_UP);
    }
    
    private BigDecimal calculaValorUnitarioDesconto(double valorOriginal, double valorComDesconto){        
        double valorDesconto = valorOriginal - valorComDesconto;
        return new BigDecimal(valorDesconto);       
    }
    
    private BigDecimal calculaValorComDesconto(double valorOriginal, double valorTotalDesconto, double quantidade){
        double valTotalComDesconto = (valorOriginal * quantidade) - valorTotalDesconto;
        double valUniComDesconto = valTotalComDesconto / quantidade;
        return new BigDecimal(valUniComDesconto).setScale(2, BigDecimal.ROUND_HALF_UP);
    }
    
    private void carregaCampos() {
        jTextFieldDescricaoProduto.setText(flatOrderItem.getProductName());   
        jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(flatOrderItem.getOriginalProductPrice(), 2));
        jTextFieldDescontoQuantidade.setText(formataCampos.bigDecimalParaString(flatOrderItem.getReductionPercent(), 2));
        jTextFieldUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(flatOrderItem.getUnitPriceTaxIncl(), 2));
        jTextFieldReducaoGrupo.setText(formataCampos.bigDecimalParaString(flatOrderItem.getGroupReduction(), 2));   
        
        quantidadeAntiga = flatOrderItem.getProductQuantity();
    }
  
    private void cancelamento(){
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente cancelar? \n O processo será encerrado!!", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                setCancelamento(true);
                dispose();
            }
    }
    
    public void setOrderDetails(PsOrderDetail salesFlatOrderItem, PsOrders salesFlatOrder) {
        this.flatOrderItem = salesFlatOrderItem;
        this.flatOrder = salesFlatOrder;
        //this.groupId = salesFlatOrder.getCustomerGroupId();
       //  this.productEntity = new CatalogProductEntityJpaController(managerPrestaShop).findCatalogProductEntity(salesFlatOrderItem.getProductId());
        carregaCampos();
                
    }
      
    public boolean isCancelamento() {
        return cancelamento;
    }

    /**
     * True para cancelado
     * @param cancelamento 
     */
    private void setCancelamento(boolean cancelamento) {
        this.cancelamento = cancelamento;
    }
          
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditOrderDetailsJDialog dialog = new EditOrderDetailsJDialog(new javax.swing.JFrame(), true, managerPrestaShop,managerCplus, usuario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    static EntityManagerFactory managerPrestaShop;
    static EntityManagerFactory managerCplus;
    private PsOrderDetail flatOrderItem;
    private PsOrders flatOrder;
    private FormataCampos formataCampos;
    private boolean cancelamento;
    private int quantidadeAntiga;
    private PsProduct productEntity;
    static Usuario usuario;
    private ControleAcesso acesso;
    private final String shopUrl;
    private final String key;
    private ClienteWebService ws;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGravar;
    private javax.swing.JLabel jLabelDescricaoProduto;
    private javax.swing.JLabel jLabelDiscontParcent;
    private javax.swing.JLabel jLabelPrecoOriginal;
    private javax.swing.JLabel jLabelQuantidade;
    private javax.swing.JLabel jLabelRowTotal;
    private javax.swing.JLabel jLabelSku;
    private javax.swing.JLabel jLabelTaxParcent;
    private javax.swing.JLabel jLabelTotalTaxa;
    private javax.swing.JLabel jLabelValorUnitarioComDesconto;
    private javax.swing.JPanel jPanelInformacaoProduto;
    private javax.swing.JPanel jPanelValorProduto;
    private javax.swing.JTextField jTextFieldDescontoQuantidade;
    private javax.swing.JTextField jTextFieldDescricaoProduto;
    private javax.swing.JTextField jTextFieldPriceOriginal;
    private javax.swing.JTextField jTextFieldQtyOrdered;
    private javax.swing.JTextField jTextFieldReducaoGrupo;
    private javax.swing.JTextField jTextFieldSku;
    private javax.swing.JTextField jTextFieldTotalTaxa;
    private javax.swing.JTextField jTextFieldUnitarioComDesconto;
    private javax.swing.JTextField jTextFieldValorTotal;
    // End of variables declaration//GEN-END:variables
}
