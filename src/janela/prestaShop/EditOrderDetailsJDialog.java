/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janela.prestaShop;

import acesso.ControleAcesso;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Usuario;
import entidade.prestaShop.PsCartProduct;
import entidade.prestaShop.PsCartProductPK;
import entidade.prestaShop.PsCustomer;
import entidade.prestaShop.PsGroup;
import entidade.prestaShop.PsOrderDetail;
import entidade.prestaShop.PsOrders;
import entidade.prestaShop.PsPack;
import entidade.prestaShop.PsProduct;
import entidade.prestaShop.PsProductLang;
import entidade.prestaShop.PsSpecificPrice;
import entidade.prestaShop.PsStockAvailable;
import janela.cplus.FormataCampos;
import java.awt.Color;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.ProdutoestoqueJpaController;
import jpa.prestaShop.PsCartProductJpaController;
import jpa.prestaShop.PsCustomerJpaController;
import jpa.prestaShop.PsGroupJpaController;
import jpa.prestaShop.PsOrderDetailJpaController;
import jpa.prestaShop.PsProductJpaController;
import jpa.prestaShop.PsStockAvailableJpaController;
import query.cplus.QueryCplus;
import query.prestaShop.QueryPrestaShop;

/**
 *
 * @author leonardo 1.0
 */
public class EditOrderDetailsJDialog extends javax.swing.JDialog {

    /**
     * Creates new form editSalesFlatOrderItemJDialog
     *
     * @param parent
     * @param modal
     * @param managerPrestaShop1
     * @param managerCplus1
     * @param usuario1
     */
    public EditOrderDetailsJDialog(java.awt.Frame parent, boolean modal, EntityManagerFactory managerPrestaShop1, EntityManagerFactory managerCplus1, Usuario usuario1) {
        super(parent, modal);
        initComponents();
        managerCplus = managerCplus1;
        managerPrestaShop = managerPrestaShop1;
        queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        formataCampos = new FormataCampos();
        usuario = usuario1;
        acesso = new ControleAcesso(managerCplus);
        if (acesso.verificaAcessoUsuario(usuario, "Alterar preço de venda")) {
            jTextFieldUnitarioComDesconto.setEnabled(true);
        }
        jTextFieldUnitarioComDesconto.setForeground(Color.black);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInformacaoProduto = new javax.swing.JPanel();
        jLabelSku = new javax.swing.JLabel();
        jTextFieldEan = new javax.swing.JTextField();
        jLabelDescricaoProduto = new javax.swing.JLabel();
        jTextFieldDescricaoProduto = new javax.swing.JTextField();
        jPanelValorProduto = new javax.swing.JPanel();
        jLabelPrecoOriginal = new javax.swing.JLabel();
        jTextFieldPriceOriginal = new javax.swing.JTextField();
        jLabelTaxParcent = new javax.swing.JLabel();
        jTextFieldReducaoGrupo = new javax.swing.JTextField();
        jLabelDiscontParcent = new javax.swing.JLabel();
        jTextFieldDesconto = new javax.swing.JTextField();
        jLabelRowTotal = new javax.swing.JLabel();
        jTextFieldValorTotal = new javax.swing.JTextField();
        jLabelValorUnitarioComDesconto = new javax.swing.JLabel();
        jTextFieldUnitarioComDesconto = new javax.swing.JTextField();
        jLabelQuantidade = new javax.swing.JLabel();
        jTextFieldQuantidade = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaPrecoQuantidade = new javax.swing.JTextArea();
        jButtonGravar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanelInformacaoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações do Produto"));

        jLabelSku.setText("EAN:");

        jLabelDescricaoProduto.setText("Descrição:");

        javax.swing.GroupLayout jPanelInformacaoProdutoLayout = new javax.swing.GroupLayout(jPanelInformacaoProduto);
        jPanelInformacaoProduto.setLayout(jPanelInformacaoProdutoLayout);
        jPanelInformacaoProdutoLayout.setHorizontalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelDescricaoProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(jLabelSku, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldEan, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addComponent(jTextFieldDescricaoProduto))
                .addContainerGap())
        );
        jPanelInformacaoProdutoLayout.setVerticalGroup(
            jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacaoProdutoLayout.createSequentialGroup()
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSku)
                    .addComponent(jTextFieldEan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInformacaoProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescricaoProduto)
                    .addComponent(jTextFieldDescricaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 31, Short.MAX_VALUE))
        );

        jPanelValorProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores:"));

        jLabelPrecoOriginal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPrecoOriginal.setText("Preço Original:");

        jTextFieldPriceOriginal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPriceOriginal.setEnabled(false);

        jLabelTaxParcent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTaxParcent.setText("Redução Grupo %:");

        jTextFieldReducaoGrupo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldReducaoGrupo.setEnabled(false);

        jLabelDiscontParcent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDiscontParcent.setText("Desconto: %");

        jTextFieldDesconto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDesconto.setEnabled(false);

        jLabelRowTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelRowTotal.setText("Valor Total:");

        jTextFieldValorTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldValorTotal.setEnabled(false);

        jLabelValorUnitarioComDesconto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelValorUnitarioComDesconto.setText("Uni. Com Desc.");

        jTextFieldUnitarioComDesconto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldUnitarioComDesconto.setEnabled(false);
        jTextFieldUnitarioComDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldUnitarioComDescontoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldUnitarioComDescontoFocusLost(evt);
            }
        });
        jTextFieldUnitarioComDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUnitarioComDescontoActionPerformed(evt);
            }
        });

        jLabelQuantidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelQuantidade.setText("Quantidade:");

        jTextFieldQuantidade.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldQuantidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeFocusLost(evt);
            }
        });
        jTextFieldQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQuantidadeActionPerformed(evt);
            }
        });

        jTextAreaPrecoQuantidade.setEditable(false);
        jTextAreaPrecoQuantidade.setColumns(20);
        jTextAreaPrecoQuantidade.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextAreaPrecoQuantidade.setRows(6);
        jTextAreaPrecoQuantidade.setTabSize(6);
        jTextAreaPrecoQuantidade.setFocusable(false);
        jScrollPane1.setViewportView(jTextAreaPrecoQuantidade);

        javax.swing.GroupLayout jPanelValorProdutoLayout = new javax.swing.GroupLayout(jPanelValorProduto);
        jPanelValorProduto.setLayout(jPanelValorProdutoLayout);
        jPanelValorProdutoLayout.setHorizontalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addComponent(jLabelQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelPrecoOriginal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDiscontParcent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelValorUnitarioComDesconto, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jLabelRowTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextFieldDesconto)
                            .addComponent(jTextFieldUnitarioComDesconto)
                            .addComponent(jTextFieldValorTotal))))
                .addGap(56, 56, 56)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addComponent(jLabelTaxParcent)
                        .addGap(51, 51, 51)
                        .addComponent(jTextFieldReducaoGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelValorProdutoLayout.setVerticalGroup(
            jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPriceOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTaxParcent)
                    .addComponent(jTextFieldReducaoGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPrecoOriginal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelValorProdutoLayout.createSequentialGroup()
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDiscontParcent)
                            .addComponent(jTextFieldDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldUnitarioComDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelValorUnitarioComDesconto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRowTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelValorProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelQuantidade)
                            .addComponent(jTextFieldQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)))
        );

        jButtonGravar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Edit.png"))); // NOI18N
        jButtonGravar.setText("Gravar");
        jButtonGravar.setEnabled(false);
        jButtonGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelValorProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonGravar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelar))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelInformacaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGravar)
                    .addComponent(jButtonCancelar))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarActionPerformed
        editarSalesFlatOrderItem();
        setCancelamento(false);
    }//GEN-LAST:event_jButtonGravarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        cancelamento();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jTextFieldUnitarioComDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoFocusLost
         String precoFormatado;
        precoFormatado = formataCampos.bigDecimalParaString(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2), 2);
        jTextFieldUnitarioComDesconto.setText(precoFormatado);
        jTextFieldDesconto.setText(formataCampos.bigDecimalParaString(porcentagemDesconto(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2)), 2));
        jButtonGravar.requestFocus();
        eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoFocusLost

    private void jTextFieldQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeFocusLost
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQuantidadeFocusLost

    private void jTextFieldQuantidadeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeFocusGained
        jTextFieldQuantidade.selectAll();
    }//GEN-LAST:event_jTextFieldQuantidadeFocusGained

    private void jTextFieldUnitarioComDescontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoFocusGained
        jTextFieldUnitarioComDesconto.selectAll();

    }//GEN-LAST:event_jTextFieldUnitarioComDescontoFocusGained

    private void jTextFieldUnitarioComDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUnitarioComDescontoActionPerformed
        String precoFormatado;
        precoFormatado = formataCampos.bigDecimalParaString(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2), 2);
        jTextFieldUnitarioComDesconto.setText(precoFormatado);
        jTextFieldDesconto.setText(formataCampos.bigDecimalParaString(porcentagemDesconto(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2)), 2));
        jButtonGravar.requestFocus();
        eventoValorUnitario();
    }//GEN-LAST:event_jTextFieldUnitarioComDescontoActionPerformed

    private void jTextFieldQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeActionPerformed
        eventoQuantidade();
    }//GEN-LAST:event_jTextFieldQuantidadeActionPerformed

    private void eventoValorUnitario() {     
        BigDecimal precoAlterado = formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2);
        jTextFieldDesconto.setText(formataCampos.bigDecimalParaString(porcentagemDesconto(precoAlterado), 2));
        jTextFieldValorTotal.setText(formataCampos.bigDecimalParaString(new BigDecimal(quantMod).multiply(precoAlterado), 2));
        jTextFieldUnitarioComDesconto.setForeground(Color.red);
        jButtonGravar.setEnabled(true);
        jButtonGravar.requestFocus();
    }

    private void eventoQuantidade() {
        quantMod = Integer.valueOf(jTextFieldQuantidade.getText());
        BigDecimal valUn = valorProdUnitario(quantMod);
        if (verificaEstoqueDisponivel(quantMod)) {
            jTextFieldDesconto.setText(formataCampos.bigDecimalParaString(porcentagemDesconto(valUn), 2));
            jTextFieldUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(valUn, 2));
            jTextFieldValorTotal.setText(formataCampos.bigDecimalParaString(new BigDecimal(quantMod).multiply(valUn), 2));
            jTextFieldQuantidade.setText(String.valueOf(quantMod));
            jTextFieldUnitarioComDesconto.setForeground(Color.blue);
            jButtonGravar.setEnabled(true);
            jButtonGravar.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + estoqueDisponivel());
        }
    }

    private void editarSalesFlatOrderItem() {
        if (verificaEstoqueDisponivel(Integer.valueOf(jTextFieldQuantidade.getText()))) {
            psOrderDetails.setReductionPercent(formataCampos.stringParaDecimal(jTextFieldDesconto.getText(), 3));
            psOrderDetails.setProductPrice(formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4));
            psOrderDetails.setOriginalProductPrice(formataCampos.stringParaDecimal(jTextFieldPriceOriginal.getText(), 4));
            psOrderDetails.setUnitPriceTaxExcl(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 4));
            psOrderDetails.setUnitPriceTaxIncl(formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 4));
            psOrderDetails.setTotalPriceTaxExcl(formataCampos.stringParaDecimal(jTextFieldValorTotal.getText(), 4));
            psOrderDetails.setTotalPriceTaxIncl(formataCampos.stringParaDecimal(jTextFieldValorTotal.getText(), 4));
            BigDecimal val = formataCampos.stringParaDecimal(jTextFieldUnitarioComDesconto.getText(), 2).add(BigDecimal.ONE);
            psOrderDetails.setProductQuantityDiscount(val);
            psOrderDetails.setProductQuantity(Integer.valueOf(jTextFieldQuantidade.getText()));
            if (psOrderDetails.getReductionPercent().doubleValue() > 0.00) {
                psOrderDetails.setDiscountQuantityApplied(true);
            } else {
                psOrderDetails.setDiscountQuantityApplied(false);
            }
            try {
                new PsOrderDetailJpaController(managerPrestaShop).edit(psOrderDetails);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Erro ao edita PsOrderDetail: \n" + ex);
            }
            jButtonGravar.setEnabled(false);
            atualizaCplus();
            editaEstoquePS(Integer.valueOf(jTextFieldQuantidade.getText()));
            manutencaoCarrinho();
            dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Não Ha Estoque Suficiente!\n Estoque Disponível: " + estoqueDisponivel());
        }
    }
    private void manutencaoCarrinho() {
        List<PsCartProduct> listCartProduct = queryPrestaShop.listCarProduct(psOrders.getIdCart(), psProduct.getIdProduct());
        if (listCartProduct.isEmpty()) {
            PsCartProduct cp = new PsCartProduct();
            cp.setPsCartProductPK(new PsCartProductPK(psOrders.getIdCart(), psProduct.getIdProduct(), psOrders.getIdAddressDelivery(), 0, 0));
            cp.setQuantity(quantMod);
            cp.setIdShop(psOrders.getIdShop());
            cp.setDateAdd(new Date(System.currentTimeMillis()));
            try {
                new PsCartProductJpaController(managerPrestaShop).create(cp);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Houve um erro ao criar PsCartProductJ!!!\n " + ex);
            }
        } else {
            for (PsCartProduct cartProd : listCartProduct) {
                cartProd.setQuantity(quantMod);
                cartProd.setDateAdd(new Date(System.currentTimeMillis()));
                try {
                    new PsCartProductJpaController(managerPrestaShop).edit(cartProd);
                } catch (Exception ex) {
                   JOptionPane.showMessageDialog(null, "Houve um erro ao editar PsCartProductJ!!!\n " + ex);
                }
            }
        }      
    }

    private void editaEstoquePS(int quantidadeAtual) {
        int quantidadeRequerida = quantidadeAtual - quantOrderDetails;
        int stockNovo = stok.getQuantity() - quantidadeRequerida;
        stok.setQuantity(stockNovo);
        int reser = stok.getPhysicalQuantity() - stok.getQuantity();
        stok.setReservedQuantity(reser);
        try {
            new PsStockAvailableJpaController(managerPrestaShop).edit(stok);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Houve um erro ao Atualizar Estoque PrestaShop!!!\n " + ex);
        }
    }

    private void atualizaCplus() {
        List<Produtoestoque> listestoque = null;
        if (psProduct.getCacheIsPack()) {
            for (PsPack psP : queryPrestaShop.listPack(psProduct.getIdProduct())) {
                //this.psProduct = new PsProductJpaController(managerPrestaShop).findPsProduct(psP.getPsPackPK().getIdProductItem());
                listestoque = new QueryCplus(managerCplus).listEstoquesPorProd(new PsProductJpaController(managerPrestaShop).findPsProduct(psP.getPsPackPK().getIdProductItem()).getReference());
            }
        } else {
            listestoque = new QueryCplus(managerCplus).listEstoquesPorProd(psProduct.getReference());
        }
        for (Produtoestoque estoque : listestoque) {
            estoque.setLastChange(formataCampos.dataAtual());
            try {
                new ProdutoestoqueJpaController(managerCplus).edit(estoque);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Houve um erro ao Atualizar Estoque C-Plus!!!\n " + ex);
            }
        }
    }

    private int estoqueDisponivel() {
        int quantidadeDisponivel = 0;
        for (PsStockAvailable e : queryPrestaShop.listEstoqueProduto(psOrderDetails.getProductId())) {
            stok = e;
            quantidadeDisponivel = e.getQuantity();
        }
        return quantidadeDisponivel;
    }

    private boolean verificaEstoqueDisponivel(int quantidadeAtual) {
        int quantidadeRequerida = quantidadeAtual - quantOrderDetails;
        boolean condicao = true;
        if (quantidadeRequerida > 0) {
            int quantidadeDisponivel = estoqueDisponivel();
            if (quantidadeDisponivel >= quantidadeRequerida) {
                condicao = true;
            } else {
                condicao = false;
            }
        }//fim if que verifica se a quantidade requerida é maior que zero
        return condicao;
    }

    private void carregaCampos() {
        psCustomer = new PsCustomerJpaController(managerPrestaShop).findPsCustomer(psOrders.getIdCustomer());
        listSpecificPrice = queryPrestaShop.listPsSpecificPriceAllGroup(psProduct.getIdProduct(), psCustomer.getIdDefaultGroup());
        psGroup = new PsGroupJpaController(managerPrestaShop).findPsGroup(psCustomer.getIdDefaultGroup());
        BigDecimal valUn = valorProdUnitario(quantMod);
        jTextFieldReducaoGrupo.setText(formataCampos.bigDecimalParaString(psGroup.getReduction(), 2));
        jTextFieldPriceOriginal.setText(formataCampos.bigDecimalParaString(valorOriginal(), 2));
        jTextFieldDescricaoProduto.setText(retornaProducLang().getName());
        jTextFieldDesconto.setText(formataCampos.bigDecimalParaString(porcentagemDesconto(valUn), 2));
        jTextFieldUnitarioComDesconto.setText(formataCampos.bigDecimalParaString(valUn, 2));
        jTextFieldValorTotal.setText(formataCampos.bigDecimalParaString(new BigDecimal(quantMod).multiply(valUn), 2));
        jTextFieldQuantidade.setText(String.valueOf(quantMod));
        jTextFieldEan.setText(psProduct.getEan13());
        jButtonGravar.setEnabled(true);
        estoqueDisponivel(); // carrega variavel globla       
            jTextAreaPrecoQuantidade.setText(textPreco(psGroup.getIdGroup()));
            quantOrderDetails = psOrderDetails.getProductQuantity();
        }
     
     private String textPreco(Integer idGroup) {
        String txtNormal = " Quant.\t  % \tValor\n";
        PsGroup psGroup = new PsGroupJpaController(managerPrestaShop).findPsGroup(idGroup);
        BigDecimal redGrup = psGroup.getReduction().divide(new BigDecimal("100.00"), RoundingMode.HALF_UP);
        BigDecimal valRedGrupo = psProduct.getPrice().multiply(BigDecimal.ONE.subtract(redGrup));
        psGroup = new PsGroupJpaController(managerPrestaShop).findPsGroup(idGroup);
        redGrup = psGroup.getReduction().divide(new BigDecimal("100.00"), RoundingMode.HALF_UP);
        valRedGrupo = psProduct.getPrice().multiply(BigDecimal.ONE.subtract(redGrup));
        txtNormal = "Quant.\t  % \tValor\n";
        txtNormal = txtNormal + "  1" + " \t" + "0.00% \t" + formataCampos.bigDecimalParaString(valRedGrupo, 2) + "  \n";
        for (PsSpecificPrice sp : queryPrestaShop.listPsSpecificPriceAllGroup(psProduct.getIdProduct(), "amount", idGroup)) {
            if (sp.getTo() == null) {
                //valRedGrupo = valRedGrupo.subtract(sp.getReduction());
                txtNormal = txtNormal + " - " + sp.getFromQuantity() + " \t" + formataCampos.bigDecimalParaString(sp.getReduction(), 2) + " \t"
                        + formataCampos.bigDecimalParaString(valRedGrupo.subtract(sp.getReduction()), 2) + "\n";
            } else {
                Calendar dataAtual = Calendar.getInstance();
                dataAtual.setTime(new Date(System.currentTimeMillis()));
                Calendar dataBanco = Calendar.getInstance();
                dataBanco.setTime(sp.getTo());
                if (dataAtual.before(dataBanco)) {
                    if ("amount".equals(sp.getReductionType())) {
                        //valRedGrupo = valRedGrupo.subtract(sp.getReduction());
                        txtNormal = txtNormal + " " + sp.getFromQuantity() + " \t - " + formataCampos.bigDecimalParaString(sp.getReduction(), 2) + " \t"
                                + formataCampos.bigDecimalParaString(valRedGrupo.subtract(sp.getReduction()), 2) + "\n";
                    }
                }
            }
        }
        for (PsSpecificPrice sp : queryPrestaShop.listPsSpecificPriceAllGroup(psProduct.getIdProduct(), "percentage", idGroup)) {
            txtNormal = txtNormal + " " + sp.getFromQuantity() + " \t" + formataCampos.bigDecimalParaString(sp.getReduction().multiply(new BigDecimal("100.00")), 2) + "% \t"
                    + formataCampos.bigDecimalParaString(valRedGrupo.multiply(BigDecimal.ONE.subtract(sp.getReduction())).setScale(2, RoundingMode.HALF_UP), 2) + "\n";
        }
        return txtNormal;
    }

    private BigDecimal valorOriginal() {
        BigDecimal val = psProduct.getPrice().multiply(BigDecimal.ONE.subtract(reducaoGroup()));
        return val;
    }

    private BigDecimal porcentagemDesconto(BigDecimal valUn) {
        BigDecimal val = valUn.divide(valorOriginal(), 2, BigDecimal.ROUND_HALF_DOWN);
        val = BigDecimal.ONE.subtract(val).multiply(new BigDecimal("100.00"));
        return val;
    }

    private BigDecimal reducaoGroup() {
        BigDecimal val = psGroup.getReduction().divide(new BigDecimal("100.00"), RoundingMode.HALF_UP);
        return val;
    }

    private BigDecimal valorProdUnitario(Integer quant) {
        BigDecimal val = psProduct.getPrice();
        BigDecimal precoUm = BigDecimal.ZERO;
        BigDecimal precoDois = BigDecimal.ZERO;
        BigDecimal reducaoPorcentagem = BigDecimal.ZERO;
        val = val.multiply(BigDecimal.ONE.subtract(reducaoGroup())); //redução do grupo
        listSpecificPrice = queryPrestaShop.listPsSpecificPriceAllGroup(psProduct.getIdProduct(), psCustomer.getIdDefaultGroup());
        for (PsSpecificPrice sp : listSpecificPrice) {
            if (sp.getTo() == null) {
                if ("amount".equals(sp.getReductionType())) {
                    precoUm = val.subtract(sp.getReduction());
                } else {//quando for percentage
                    if (sp.getFromQuantity() <= quant) {
                        reducaoPorcentagem = sp.getReduction();
                        precoDois = val.multiply(BigDecimal.ONE.subtract(reducaoPorcentagem)).setScale(2, RoundingMode.HALF_UP); //redução porcentagem quantidade
                    }
                }
            } else {//if que verifica se a data está nula
                Calendar dataAtual = Calendar.getInstance();
                dataAtual.setTime(new Date(System.currentTimeMillis()));
                Calendar dataBanco = Calendar.getInstance();
                dataBanco.setTime(sp.getTo());
                if (dataAtual.before(dataBanco)) {
                    if ("amount".equals(sp.getReductionType())) {
                        precoUm = val.subtract(sp.getReduction());
                    } else {//quando for percentage
                        if (sp.getFromQuantity() <= quant) {
                            reducaoPorcentagem = sp.getReduction();
                            precoDois = val.multiply(BigDecimal.ONE.subtract(reducaoPorcentagem)).setScale(2, RoundingMode.HALF_UP); //redução porcentagem quantidade
                        }
                    }
                }//if que verifica se a data final é menor que a data atual  
            }
        }
        if (precoUm.doubleValue() > 0.0 && precoUm.doubleValue() < val.doubleValue()) {
            val = precoUm;
        } else if (precoDois.doubleValue() > 0.0 && precoDois.doubleValue() < val.doubleValue()) {
            val = precoDois;
        }
        return val;
    }

    private PsProductLang retornaProducLang() {
        PsProductLang retorno = null;
        List<PsProductLang> listEntityVarchar = queryPrestaShop.listPsProductLang(psProduct.getIdProduct(), 2);
        for (PsProductLang str : listEntityVarchar) {
            retorno = str;
        }
        return retorno;
    }

    private void cancelamento() {
        int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente cancelar? \n O processo será encerrado!!", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            setCancelamento(true);
            dispose();
        }
    }

    public void setObjetos(PsOrderDetail orderDetails, PsOrders order) {
        this.psOrderDetails = orderDetails;
        this.psOrders = order;
        this.psProduct = new PsProductJpaController(managerPrestaShop).findPsProduct(orderDetails.getProductId());
        quantMod = orderDetails.getProductQuantity();
        carregaCampos();
    }

    public boolean isCancelamento() {
        return cancelamento;
    }

    /**
     * True para cancelado
     *
     * @param cancelamento
     */
    private void setCancelamento(boolean cancelamento) {
        this.cancelamento = cancelamento;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditOrderDetailsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditOrderDetailsJDialog dialog = new EditOrderDetailsJDialog(new javax.swing.JFrame(), true, managerPrestaShop, managerCplus, usuario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    private PsStockAvailable stok;
    static EntityManagerFactory managerCplus;
    static EntityManagerFactory managerPrestaShop;
    private final QueryPrestaShop queryPrestaShop;
    private PsOrderDetail psOrderDetails;
    private PsOrders psOrders;
    private final FormataCampos formataCampos;
    private boolean cancelamento;
    private int quantOrderDetails;
    private PsProduct psProduct;
    static Usuario usuario;
    private final ControleAcesso acesso;
    private List<PsSpecificPrice> listSpecificPrice;
    private PsCustomer psCustomer;
    private int quantMod;
    private PsGroup psGroup;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGravar;
    private javax.swing.JLabel jLabelDescricaoProduto;
    private javax.swing.JLabel jLabelDiscontParcent;
    private javax.swing.JLabel jLabelPrecoOriginal;
    private javax.swing.JLabel jLabelQuantidade;
    private javax.swing.JLabel jLabelRowTotal;
    private javax.swing.JLabel jLabelSku;
    private javax.swing.JLabel jLabelTaxParcent;
    private javax.swing.JLabel jLabelValorUnitarioComDesconto;
    private javax.swing.JPanel jPanelInformacaoProduto;
    private javax.swing.JPanel jPanelValorProduto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaPrecoQuantidade;
    private javax.swing.JTextField jTextFieldDesconto;
    private javax.swing.JTextField jTextFieldDescricaoProduto;
    private javax.swing.JTextField jTextFieldEan;
    private javax.swing.JTextField jTextFieldPriceOriginal;
    private javax.swing.JTextField jTextFieldQuantidade;
    private javax.swing.JTextField jTextFieldReducaoGrupo;
    private javax.swing.JTextField jTextFieldUnitarioComDesconto;
    private javax.swing.JTextField jTextFieldValorTotal;
    // End of variables declaration//GEN-END:variables
}
