/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integrador.separacao;

import acesso.ListagemUsuarioJDialog;
import entidade.cplus.Localizacao;
import entidade.cplus.Movenda;
import entidade.cplus.Movendaprod;
import entidade.cplus.Movendaprodserial;
import entidade.cplus.Produto;
import entidade.cplus.Produtocodigo;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Produtoserial;
import entidade.cplus.Unidade;
import entidade.integrador.IntConfiguracao;
import entidade.integrador.IntLogs;
import entidade.integrador.SaidaSerial;
import entidade.integrador.SerialProduto;
import integrador.relatorio.ImprimeRelatorio;
import integrador.render.produto.RenderLocalizacao;
import janela.cplus.ListagemProdutoJDialog;
import janela.cplus.ListagemSaidasJDialog;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.File;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import jpa.cplus.MovendaJpaController;
import jpa.cplus.MovendaprodJpaController;
import jpa.cplus.ProdutoJpaController;
import jpa.cplus.exceptions.NonexistentEntityException;
import jpa.integrador.IntConfiguracaoJpaController;
import jpa.integrador.IntLogsJpaController;
import jpa.integrador.SaidaSerialJpaController;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;

/**
 *
 * @author leonardo
 */
public class SaidaSerialJFrame extends javax.swing.JFrame {

    /**
     * Creates new form SaidaSerialJFrame
     *
     * @param managerCplus1
     * @param managerIntegrador1
     * @param managerPrestaShop1
     */
    public SaidaSerialJFrame(EntityManagerFactory managerCplus1, EntityManagerFactory managerIntegrador1, EntityManagerFactory managerPrestaShop1) {
        initComponents();
        managerCplus = managerCplus1;
        managerPrestaShop = managerPrestaShop1;
        //querySerial = new QuerySerial(managerCplus);
        queryCplus = new QueryCplus(managerCplus);
        //queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        managerIntegrador = managerIntegrador1;
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        this.listagemSaidasJDialog = new ListagemSaidasJDialog(this, true, managerCplus);
        this.listagemUsuarioJDialog = new ListagemUsuarioJDialog(this, true, managerCplus);
        this.listagemUsuarioJDialog.setLocationRelativeTo(null);
        // this.serialJDialog = new SerialJDialog(this, true);
        this.listagemUsuarioJDialog.requestFocusInWindow();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        //colunaCodMovProdutoSaida = jTableProdutosPedido.getColumnModel().getColumnIndex("Codmovprod");
        //colunaQuantidadeConferida = jTableProdutosPedido.getColumnModel().getColumnIndex("Quant Conferida");   
        //colunaCodMovProdutoSerial = jTableSerialSaida.getColumnModel().getColumnIndex("Codmovendaprodserial");
        this.listagemProdutoJDialog = new ListagemProdutoJDialog(this, true, managerCplus);
     new RenderLocalizacao(managerCplus);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelConfiguracaoLista = new javax.swing.JPanel();
        jButtonImprimirRomaneio = new javax.swing.JButton();
        jButtonExcluirSeria = new javax.swing.JButton();
        jButtonEditarProduto = new javax.swing.JButton();
        jTextFieldTextoAviso = new javax.swing.JTextField();
        jPanelInformacoes = new javax.swing.JPanel();
        jLabelItensFaltando = new javax.swing.JLabel();
        jTextFieldItensFaltando = new javax.swing.JTextField();
        jTextFieldMultiplo = new javax.swing.JTextField();
        jTextFieldSerial = new javax.swing.JTextField();
        jLabelDigiteSerial = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanelPesquisas = new javax.swing.JPanel();
        jButtonPesquisaSaida = new javax.swing.JButton();
        jButtonSepararPedido = new javax.swing.JButton();
        jButtonCancelarSeparacao = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSaidaProd = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSeriasSeparados = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Separação Serial");

        jPanelConfiguracaoLista.setBorder(javax.swing.BorderFactory.createTitledBorder("Configurações Listagem Serial"));

        jButtonImprimirRomaneio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonImprimirRomaneio.setText("Imprimir Romaneio");
        jButtonImprimirRomaneio.setEnabled(false);
        jButtonImprimirRomaneio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirRomaneioActionPerformed(evt);
            }
        });

        jButtonExcluirSeria.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonExcluirSeria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/delete.png"))); // NOI18N
        jButtonExcluirSeria.setText("Excluir Serial");
        jButtonExcluirSeria.setEnabled(false);
        jButtonExcluirSeria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirSeriaActionPerformed(evt);
            }
        });

        jButtonEditarProduto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonEditarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Edit.png"))); // NOI18N
        jButtonEditarProduto.setText("Editar Produto");
        jButtonEditarProduto.setEnabled(false);
        jButtonEditarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConfiguracaoListaLayout = new javax.swing.GroupLayout(jPanelConfiguracaoLista);
        jPanelConfiguracaoLista.setLayout(jPanelConfiguracaoListaLayout);
        jPanelConfiguracaoListaLayout.setHorizontalGroup(
            jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConfiguracaoListaLayout.createSequentialGroup()
                .addGroup(jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelConfiguracaoListaLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEditarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelConfiguracaoListaLayout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonImprimirRomaneio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonExcluirSeria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(54, 54, 54))
        );
        jPanelConfiguracaoListaLayout.setVerticalGroup(
            jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracaoListaLayout.createSequentialGroup()
                .addComponent(jButtonImprimirRomaneio)
                .addGap(42, 42, 42)
                .addComponent(jButtonExcluirSeria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTextFieldTextoAviso.setEditable(false);
        jTextFieldTextoAviso.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jPanelInformacoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Serial:"));

        jLabelItensFaltando.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelItensFaltando.setText("Itens Faltando:");

        jTextFieldItensFaltando.setEditable(false);
        jTextFieldItensFaltando.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldMultiplo.setEditable(false);
        jTextFieldMultiplo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldMultiplo.setText("1");

        jTextFieldSerial.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldSerial.setEnabled(false);
        jTextFieldSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSerialActionPerformed(evt);
            }
        });

        jLabelDigiteSerial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDigiteSerial.setText("Digite o Serial:");

        jLabel1.setText("Multiplo:");

        javax.swing.GroupLayout jPanelInformacoesLayout = new javax.swing.GroupLayout(jPanelInformacoes);
        jPanelInformacoes.setLayout(jPanelInformacoesLayout);
        jPanelInformacoesLayout.setHorizontalGroup(
            jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelInformacoesLayout.createSequentialGroup()
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelDigiteSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelItensFaltando, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInformacoesLayout.createSequentialGroup()
                        .addComponent(jTextFieldItensFaltando, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMultiplo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldSerial)))
        );
        jPanelInformacoesLayout.setVerticalGroup(
            jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacoesLayout.createSequentialGroup()
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldItensFaltando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelItensFaltando))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldMultiplo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDigiteSerial)))
        );

        jPanelPesquisas.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa:"));

        jButtonPesquisaSaida.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisaSaida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisaSaida.setText("Pesquisa Saida");
        jButtonPesquisaSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisaSaidaActionPerformed(evt);
            }
        });

        jButtonSepararPedido.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonSepararPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/play.png"))); // NOI18N
        jButtonSepararPedido.setText("Separar Pedido");
        jButtonSepararPedido.setEnabled(false);
        jButtonSepararPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSepararPedidoActionPerformed(evt);
            }
        });

        jButtonCancelarSeparacao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelarSeparacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelarSeparacao.setText("Cancelar Separação");
        jButtonCancelarSeparacao.setEnabled(false);
        jButtonCancelarSeparacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarSeparacaoActionPerformed(evt);
            }
        });

        jButtonFechar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/stop.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPesquisasLayout = new javax.swing.GroupLayout(jPanelPesquisas);
        jPanelPesquisas.setLayout(jPanelPesquisasLayout);
        jPanelPesquisasLayout.setHorizontalGroup(
            jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisasLayout.createSequentialGroup()
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonSepararPedido, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(jButtonPesquisaSaida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCancelarSeparacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        jPanelPesquisasLayout.setVerticalGroup(
            jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisasLayout.createSequentialGroup()
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPesquisaSaida)
                    .addComponent(jButtonFechar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSepararPedido)
                    .addComponent(jButtonCancelarSeparacao)))
        );

        jTableSaidaProd.setFont(new java.awt.Font("Arial", 0, 17)); // NOI18N
        jTableSaidaProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome Produto", "Quantidade", "Separado", "Setor", "Estoque", "Cod. MovProd"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSaidaProd.setColumnSelectionAllowed(true);
        jTableSaidaProd.setRequestFocusEnabled(false);
        jTableSaidaProd.setRowHeight(25);
        jTableSaidaProd.getTableHeader().setReorderingAllowed(false);
        jTableSaidaProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSaidaProdMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSaidaProd);
        jTableSaidaProd.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableSaidaProd.getColumnModel().getColumnCount() > 0) {
            jTableSaidaProd.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTableSaidaProd.getColumnModel().getColumn(1).setPreferredWidth(400);
            jTableSaidaProd.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTableSaidaProd.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTableSaidaProd.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTableSaidaProd.getColumnModel().getColumn(5).setPreferredWidth(20);
            jTableSaidaProd.getColumnModel().getColumn(6).setPreferredWidth(5);
        }

        jTableSeriasSeparados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Serial", "ID Saida Serial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableSeriasSeparados.setColumnSelectionAllowed(true);
        jTableSeriasSeparados.getTableHeader().setReorderingAllowed(false);
        jTableSeriasSeparados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSeriasSeparadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableSeriasSeparados);
        jTableSeriasSeparados.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableSeriasSeparados.getColumnModel().getColumnCount() > 0) {
            jTableSeriasSeparados.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableSeriasSeparados.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableSeriasSeparados.getColumnModel().getColumn(2).setPreferredWidth(140);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelPesquisas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelInformacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelConfiguracaoLista, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldTextoAviso, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jPanelInformacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanelPesquisas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelConfiguracaoLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTextoAviso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisaSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisaSaidaActionPerformed
        buscaPedido();
    }//GEN-LAST:event_jButtonPesquisaSaidaActionPerformed

    private void jButtonSepararPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSepararPedidoActionPerformed
        jTextFieldSerial.setEnabled(true);
        jTextFieldSerial.requestFocus();
        jButtonPesquisaSaida.setEnabled(false);
        jButtonFechar.setEnabled(false);
        jButtonCancelarSeparacao.setEnabled(true);
        pedidoSeparado(false);
        jButtonSepararPedido.setEnabled(false);
        //tratamentoCampos();
    }//GEN-LAST:event_jButtonSepararPedidoActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        fechar();
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonExcluirSeriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirSeriaActionPerformed
        removerSerialSelecionado();
    }//GEN-LAST:event_jButtonExcluirSeriaActionPerformed

    private void jButtonCancelarSeparacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarSeparacaoActionPerformed
        int cancelar = JOptionPane.showConfirmDialog(null, "AO CANCELAR O PEDIDO NÃO FICARA SEPARADO,\n DESEJA PROSSEGUIR??", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            jButtonFechar.setEnabled(true);
            jButtonPesquisaSaida.setEnabled(true);
            jButtonCancelarSeparacao.setEnabled(false);
            //jButtonGravar.setEnabled(false);
            buscaPedido();
        }
    }//GEN-LAST:event_jButtonCancelarSeparacaoActionPerformed

    private void jTextFieldSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSerialActionPerformed

        adicionarSerial();
    }//GEN-LAST:event_jTextFieldSerialActionPerformed

    private void jButtonImprimirRomaneioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirRomaneioActionPerformed
        if (movenda != null) {
            List<Movendaprod> movendaprodList = new ArrayList<>();
            for (Movendaprod movProd : movenda.getMovendaprodCollection()) {
                movendaprodList.add(movProd);
                List<Movendaprodserial> listMovSerial = new ArrayList<>();
                for (SaidaSerial sai : queryIntegrador.listPorSaidaProd(movProd.getCodmovprod())) {
                    Produtoserial serp = new Produtoserial();
                    serp.setCodprodutoserial(sai.getIdSerial().getIdSerial().toString());
                    serp.setCodprod(movProd.getCodprod());
                    serp.setSerial(sai.getIdSerial().getSerial());
                    Movendaprodserial sp = new Movendaprodserial();
                    sp.setCodmovendaprodserial(sai.getIdSaidaSerial().toString());
                    sp.setCodmovprod(movProd);
                    sp.setCodprodutoserial(serp);
                    listMovSerial.add(sp);
                }
                movProd.setMovendaprodserialCollection(listMovSerial);
            }
            new ImprimeRelatorio().imprimeRelatorioPeloArquivo(queryIntegrador.valorConfiguracao("caminho_RELATORIO_ROMANEIO_SERIAIS"), movendaprodList);
        }
    }//GEN-LAST:event_jButtonImprimirRomaneioActionPerformed

    private void jTableSeriasSeparadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSeriasSeparadosMouseClicked
        jButtonExcluirSeria.setEnabled(true);
        jButtonImprimirRomaneio.setEnabled(true);
    }//GEN-LAST:event_jTableSeriasSeparadosMouseClicked

    private void jTableSaidaProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSaidaProdMouseClicked
    jButtonEditarProduto.setEnabled(true);
    }//GEN-LAST:event_jTableSaidaProdMouseClicked

    private void jButtonEditarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarProdutoActionPerformed

        /**
        * this.listagemLocalizacaoJDialog.setVisible(true); if
        * (this.listagemLocalizacaoJDialog.isCancelamento() == false) {
            * for(Produto p :
                * queryCplus.listProduto(movEntradaProd.getCodprod().getCodprod())){
                * try {
                    * p.setCodloc(this.listagemLocalizacaoJDialog.getLocalizacao().getCodloc());
                    * new ProdutoJpaController(managerCplus).edit(p);
                    * jButtonEditarSetorEstoque.setEnabled(false); carregarTabela(); }
                * catch (jpa.cplus.exceptions.NonexistentEntityException ex) {
                    * JOptionPane.showMessageDialog(null, "Houve um ero ao editar produto!
                        * \n"+ex); } catch (Exception ex) { JOptionPane.showMessageDialog(null,
                        * "Houve um ero ao editar produto! \n"+ex); } } }
        */
        if (jTableSaidaProd.getRowCount() > 0 && jTableSaidaProd.getSelectedRow() != -1) {
            int colunaCodMovProd = jTableSaidaProd.getColumnModel().getColumnIndex("Codmoveprod");
            String codMovProd = jTableSaidaProd.getValueAt(jTableSaidaProd.getSelectedRow(), colunaCodMovProd).toString();
            Movendaprod movEntradaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(codMovProd);
            this.listagemProdutoJDialog.setTermoPesquisa(movEntradaProd.getCodprod().getCodigo());
            this.listagemProdutoJDialog.setVisible(true);
            jButtonEditarProduto.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha");
        }
    }//GEN-LAST:event_jButtonEditarProdutoActionPerformed

    private void adicionarSerial() {
        int quantSeparada = 0;
        if (!"".equals(jTextFieldSerial.getText())) {
            List<SerialProduto> listSer = queryIntegrador.listSerialExato(jTextFieldSerial.getText().toUpperCase().trim());
            List<SaidaSerial> listSS = new ArrayList<>();
            SerialProduto serialProduto = new SerialProduto();
            Movendaprod movendaprod = new Movendaprod();
            boolean condicao = false;
            boolean noPedido = false;
            if (listSer.size() == 1) {
                if (verificaCodigos(listSer, jTextFieldSerial.getText().toUpperCase().trim())) {
                    for (SerialProduto ser : listSer) {
                        int quantVenda = 0;
                        for (Movendaprod movProd : listaProdutoPedido) {
                            if (ser.getCodProduto() == null ? movProd.getCodprod().getCodprod() == null : ser.getCodProduto().equals(movProd.getCodprod().getCodprod())) {
                                noPedido = true;
                                quantVenda = quantidadePacote(movProd);
                                listSS = queryIntegrador.listPorSaidaProd(movProd.getCodmovprod());
                                if (quantVenda > listSS.size()) {
                                    serialProduto = ser;
                                    movendaprod = movProd;
                                    quantSeparada = listSS.size() + 1;
                                    condicao = true;
                                } else {
                                    manutencaoDeErro("O produto: " + ser.getNomeProduto() + ", está totalmente separado!!");
                                }
                            }//if que verifica o prodoto no pedido                   
                        } //forMoveProd
                        if (noPedido == false) {
                            manutencaoDeErro("O produto: " + ser.getNomeProduto() + ", não está no pedido!!");
                        }
                    }//for ser
                    if (condicao) {
                        for (SaidaSerial ss : listSS) {
                            if (ss.getIdSerial().getSerial() == null ? jTextFieldSerial.getText().toUpperCase().trim() == null : ss.getIdSerial().getSerial().equals(jTextFieldSerial.getText().toUpperCase().trim())) {
                                condicao = false;
                                manutencaoDeErro("O produto: " + ss.getIdSerial().getNomeProduto() + ", já está no pedido!!");
                            }
                        }
                    }
                } else {
                    condicao = false;
                    manutencaoDeErro("O serial não pode ser o EAN, Verifique!!");
                }
            } else {
                manutencaoDeErro("Serial não encontrado: " + jTextFieldSerial.getText() + " Verifique!!");
            }
            if (condicao) {
                gravarSaidaSerial(serialProduto, movendaprod);
                carregaTabelasAdicionar(movendaprod, quantSeparada, jTextFieldSerial.getText().toUpperCase().trim());
            }
        }
        //carregaTabelas();
        jTextFieldSerial.selectAll();
        jTextFieldSerial.setText("");
        jTextFieldSerial.requestFocus();
    }

    private void carregaTabelasAdicionar(Movendaprod movProd, int quantSeparada, String serial) {
        DefaultTableModel tabSaidaProd = (DefaultTableModel) jTableSaidaProd.getModel();
        while (jTableSaidaProd.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableSaidaProd.getModel()).removeRow(0);
        }
        int linha = 0;
        for (Movendaprod e : listaProdutoPedido) {
            int coluna = jTableSaidaProd.getColumnModel().getColumnIndex("Cod. MovProd");
            int colunaSeparado = jTableSaidaProd.getColumnModel().getColumnIndex("Separado");
             tabSaidaProd.addRow(new Object[]{e.getCodprod().getCodigo(), e.getCodprod().getNomeprod(), quantidadePacote(e), queryIntegrador.listPorSaidaProd(e.getCodmovprod()).size(), 
                                    setor(e.getCodprod()) ,EstoqueCplus(e.getCodprod().getCodprod()), e.getCodmovprod()});
            String value = (String) jTableSaidaProd.getValueAt(linha, coluna);
            if (movProd.getCodmovprod() == null ? value == null : movProd.getCodmovprod().equals(value)) {
                tabSaidaProd.setValueAt(quantSeparada, linha, colunaSeparado);
                DefaultTableModel tabSerial = (DefaultTableModel) jTableSeriasSeparados.getModel();
                for (SaidaSerial s : queryIntegrador.listSaidaSerial(serial, movProd.getCodmovprod())) {
                    tabSerial.addRow(new Object[]{s.getIdSerial().getCodigoProduto(), s.getIdSerial().getNomeProduto(), s.getIdSerial().getSerial(), s.getIdSaidaSerial()});
                    //colore as linhas da tabela
                    TableCellRenderer rendererSeparado = new ColorirLinhaImpar();
                    for (int c = 0; c < jTableSeriasSeparados.getColumnCount(); c++) {
                        jTableSeriasSeparados.setDefaultRenderer(jTableSeriasSeparados.getColumnClass(c), rendererSeparado);
                    }                   
                }
            }
            //colore as linhas da tabela            
            TableCellRenderer renderer = new ColorirTabelaSaidaSerial();
            for (int c = 0; c < jTableSaidaProd.getColumnCount(); c++) {
                jTableSaidaProd.setDefaultRenderer(jTableSaidaProd.getColumnClass(c), renderer);
            }
            //**********************
            linha++;
        }
    }
    
    private String setor(Produto codProd){
        String text = "";
        for(Localizacao loc : queryCplus.listLocalizacao(codProd.getCodloc())){
           text =  loc.getDescricao();
       }
        return text;
    }
    
     private Integer EstoqueCplus(String codProd) {
        BigDecimal estoque = BigDecimal.ZERO;
        List<Produtoestoque> listEsroque = new QueryCplus(managerCplus).listEstoquesPorProd(codProd);
        for (Produtoestoque est : listEsroque) {
            estoque = est.getEstatu().subtract(est.getReservadoorcamento().subtract(est.getReservadoos()));
        }
        return estoque.intValue();
    }

    private void colorirLinha() {
        TableCellRenderer renderer = new ColorirTabelaEntradaSerial();
        for (int c = 0; c < jTableSaidaProd.getColumnCount(); c++) {
            jTableSaidaProd.setDefaultRenderer(jTableSaidaProd.getColumnClass(c), renderer);
        }
    }

    private void carregaTabelas() {
        DefaultTableModel tab = (DefaultTableModel) jTableSaidaProd.getModel();
        while (jTableSaidaProd.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableSaidaProd.getModel()).removeRow(0);
        }
        for (Movendaprod e : listaProdutoPedido) {
            tab.addRow(new Object[]{e.getCodprod().getCodigo(), e.getCodprod().getNomeprod(), quantidadePacote(e), queryIntegrador.listPorSaidaProd(e.getCodmovprod()).size(), 
                                    setor(e.getCodprod()) ,EstoqueCplus(e.getCodprod().getCodprod()), e.getCodmovprod()});
            //colore as linhas da tabela
            TableCellRenderer renderer = new ColorirTabelaSaidaSerial();
            for (int c = 0; c < jTableSaidaProd.getColumnCount(); c++) {
                jTableSaidaProd.setDefaultRenderer(jTableSaidaProd.getColumnClass(c), renderer);
            }
            //**********************
        }

        DefaultTableModel tabSerial = (DefaultTableModel) jTableSeriasSeparados.getModel();
        while (jTableSeriasSeparados.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableSeriasSeparados.getModel()).removeRow(0);
        }
        for (SaidaSerial s : queryIntegrador.listPorSaida(movenda.getCodmovenda())) {
            tabSerial.addRow(new Object[]{s.getIdSerial().getCodigoProduto(), s.getIdSerial().getNomeProduto(), s.getIdSerial().getSerial(), s.getIdSaidaSerial()});
            //colore as linhas da tabela
            TableCellRenderer rendererSeparado = new ColorirLinhaImpar();
            for (int c = 0; c < jTableSeriasSeparados.getColumnCount(); c++) {
                jTableSeriasSeparados.setDefaultRenderer(jTableSeriasSeparados.getColumnClass(c), rendererSeparado);
            }
            //**********************
        }
        if (jTableSeriasSeparados.getRowCount() != 0) {
            jTableSeriasSeparados.setRowSelectionInterval(jTableSeriasSeparados.getRowCount() - 1, jTableSeriasSeparados.getRowCount() - 1);//seleciona ultima linha   
            jButtonImprimirRomaneio.setEnabled(true);
        }else{
            jButtonImprimirRomaneio.setEnabled(false);
        }
    }

    private boolean verificaCodigos(List<SerialProduto> listSer, String textoDigitado) {
        boolean condicao = true;
        for (SerialProduto ser : listSer) {
            Produto produto = new ProdutoJpaController(managerCplus).findProduto(ser.getCodProduto());
            if (produto.getCodigo() == null ? textoDigitado == null : produto.getCodigo().equals(textoDigitado)) {
                condicao = false;
            } else {
                for (Produtocodigo cod : produto.getProdutocodigoCollection()) {
                    if (cod.getCodigo() == null ? textoDigitado == null : cod.getCodigo().equals(textoDigitado)) {
                        condicao = false;
                    }
                }
            }
        }
        return condicao;
    }

    private void manutencaoDeErro(String mensagem) {
        tocarSomErro();
        JOptionPane.showMessageDialog(null, mensagem, "Erro Separar", JOptionPane.ERROR_MESSAGE);
        this.listagemUsuarioJDialog.setVisible(true);
        String getStr = "";
        if (movenda.getObs() != null) {
            getStr = movenda.getObs();
        }
        movenda.setObs(getStr + "Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + " " + mensagem + "\n");
        try {
            new MovendaJpaController(managerCplus).edit(movenda);
        } catch (NonexistentEntityException ex) {
            criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Pedido: " + ex, "Erro editar", managerIntegrador);
        } catch (Exception ex) {
            criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Pedido: " + ex, "Erro editar", managerIntegrador);
        }
        criaLog(new Date(System.currentTimeMillis()), "Erro separarar, pedido: " + movenda.getNumped() + ", Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + mensagem + "\n", "Erro Separar", managerIntegrador);
    }

    private void removerSerialSelecionado() {
        // if (pedidoSeparado()) {
        //jButtonExcluirSeria.setEnabled(true);
        if (jTableSeriasSeparados.getSelectedRow() >= 0) {
            int coluna = jTableSeriasSeparados.getColumnModel().getColumnIndex("ID Saida Serial");
            int id = (int) jTableSeriasSeparados.getValueAt(jTableSeriasSeparados.getSelectedRow(), coluna);
            try {
                new SaidaSerialJpaController(managerIntegrador).destroy(id);
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao excluir serial!! \n" + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Favor selecionar uma linha");
        }
        //}
        jTextFieldSerial.selectAll();
        jTextFieldSerial.setText("");
        jTextFieldSerial.requestFocus();
        jButtonExcluirSeria.setEnabled(false);
        carregaTabelas();
        pedidoSeparado(false);
    }

    private void fechar() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        for (IntConfiguracao config : listConfig) {
            try {
                new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (condicao) {
            dispose();
            setVisible(false);
        }
    }

    private String retornaIpLocal() {
        InetAddress ia = null;
        try {
            ia = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO OBTER IP LOCAL, Verifique!! \n" + e, "Erro Separar", JOptionPane.ERROR_MESSAGE);
        }
        return "separacao_" + ia.getHostAddress() + "_" + ia.getHostName();
    }

    private boolean verificaPedidoAberto() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoPorValor(movenda.getCodmovenda());
        if (listConfig.size() > 1) {
            String ex = "";
            for (IntConfiguracao config : listConfig) {
                if (!config.getTipo().equals(retornaIpLocal())) {
                    ex = ex + config.getTipo() + "\n";
                }
            }
            JOptionPane.showMessageDialog(null, "O PEDIDO JÁ ESTÁ ABERTO EM OUTRA MAQUINA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            condicao = false;
        }
        return condicao;
    }

    private boolean insereConfiguracaoParaSeparacao() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        if (listConfig.isEmpty()) {
            IntConfiguracao c = new IntConfiguracao();
            c.setTipo(retornaIpLocal());
            c.setDescricao("pedido em separação no pc");
            c.setDataAtualizacao(new Date(System.currentTimeMillis()));
            c.setValor(movenda.getCodmovenda());
            c.setDataCriacao(new Date(System.currentTimeMillis()));
            try {
                new IntConfiguracaoJpaController(managerIntegrador).create(c);
            } catch (Exception ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO CRIAR CONFIGURAÇÃO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        } else if (listConfig.size() == 1) {
            for (IntConfiguracao config : listConfig) {
                config.setValor(movenda.getCodmovenda());
                try {
                    new IntConfiguracaoJpaController(managerIntegrador).edit(config);
                } catch (Exception ex) {
                    condicao = false;
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            int cont = 0;
            for (IntConfiguracao config : listConfig) {
                if (cont > 0) {
                    try {
                        new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
                    } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                        condicao = false;
                        JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURAÇÃO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        return condicao;
    }

    private void buscaPedido() {
        jTextFieldSerial.setText("");
        jTextFieldSerial.setEnabled(false);
        jButtonExcluirSeria.setEnabled(false);
        this.listagemSaidasJDialog.setVisible(true);
        if (this.listagemSaidasJDialog.isCancelamento() == false) {
            movenda = this.listagemSaidasJDialog.getMoVenda();
            listaProdutoPedido = queryCplus.listMovendaProd(movenda.getCodmovenda());
            String str = movenda.getFlagcancelada().toString();
            if ("N".equals(str)) {
                if (insereConfiguracaoParaSeparacao()) {
                    if (verificaPedidoAberto()) {
                        carregaTabelas();
                        pedidoSeparado(false);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "O pedido está cancelado, verifique!!! ", "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
            jButtonCancelarSeparacao.setEnabled(false);
            jButtonPesquisaSaida.setEnabled(true);
            jButtonFechar.setEnabled(true);
        }//fim if adialog cancelado
    }

    private void criaLog(Date dataExecucao, String mensagem, String tipoLog, EntityManagerFactory managerIntegrador) {
        IntLogs log = new IntLogs();
        log.setDataExecucao(dataExecucao);
        // log.setUltimaExecucao(dataExecucao);
        log.setMensagem(mensagem);
        log.setTipoLog(tipoLog);
        new IntLogsJpaController(managerIntegrador).create(log);
    }

    private void gravarSaidaSerial(SerialProduto ser, Movendaprod movProd) {
        SaidaSerial mvps = new SaidaSerial();
        mvps.setCodSaida(movProd.getCodmovenda().getCodmovenda());
        mvps.setCodSaidaProd(movProd.getCodmovprod());
        mvps.setDataSaida(new Date(System.currentTimeMillis()));
        mvps.setDevolvido(false);
        mvps.setIdSerial(ser);
        try {
            new SaidaSerialJpaController(managerIntegrador).create(mvps);
            // jButtonGravar.setEnabled(false);
            //jTextFieldSerial.setEnabled(false);         
        } catch (Exception ex) {
            tocarSomErro();
            //pedidoSeparado();
            JOptionPane.showMessageDialog(null, "ERRO AO GRAVAR SERIAL, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            this.listagemUsuarioJDialog.setVisible(true);
        }
        pedidoSeparado(true);
    }

    private void tocarSomErro() {
        //String com o caminho do arquivo ReproduzirAudio a ser tocado
        String path = queryIntegrador.valorConfiguracao("caminho_ARQUIVO_AUDIO_ERRO");
        //new VariavelStatica().caminho_ARQUIVO_AUDIO_ERRO;
        //Instanciar um objeto File com o arquivo ReproduzirAudio
        File mp3File = new File(path);
        //Instancia do Objeto ReproduzirAudio, a qual criamos a classe.
        ReproduzirAudio musica = new ReproduzirAudio(mp3File);
        //Finalmente a chamada do método que toca a música
        musica.play();
    }

    /**
     * Função verifica se o pedido está separado
     *
     * @return true se já estiver separado false não separado ou não separado
     * completamente
     */
    private boolean pedidoSeparado(boolean separando) {
        boolean condicao = false;
        //List<Movendaprod> listaProdutoPedido = queryCplus.listMovendaProd(movenda.getCodmovenda());
        int quanMovendaProd = 0;
        int quantidadeSerial = queryIntegrador.listPorSaida(movenda.getCodmovenda()).size();
        for (Movendaprod movProd : listaProdutoPedido) {
            //soma quantidades do pedido
            quanMovendaProd = quanMovendaProd + quantidadePacote(movProd);
            //soma seriais
            //quantidadeSerial = quantidadeSerial + queryIntegrador.listPorSaidaProd(movProd.getCodmovprod()).size();
        }
        jButtonExcluirSeria.setEnabled(false);
        // quantidadeSaidas = movendaprodserialList.size();
        // quantidadTotalPedido = quanMovendaProd;
        int tot = quanMovendaProd - quantidadeSerial;
        jTextFieldItensFaltando.setText(String.valueOf(tot));

        if (quanMovendaProd == quantidadeSerial) {
            jTextFieldItensFaltando.setText(String.valueOf(tot));
            jTextFieldTextoAviso.setText("Pedido Totalmente Separado!");
            jTextFieldTextoAviso.setBackground(Color.GREEN);
            jButtonSepararPedido.setEnabled(false);
            jButtonCancelarSeparacao.setEnabled(false);
            jButtonImprimirRomaneio.setEnabled(true);
            jButtonPesquisaSaida.setEnabled(true);
            jButtonFechar.setEnabled(true);
            jTextFieldSerial.setEnabled(false);
            tocarSomFinalizado();
            condicao = true;
        } else {
            jTextFieldTextoAviso.setText("Aguardando Separação de Produtos!");
            jTextFieldTextoAviso.setBackground(Color.RED);
            jButtonImprimirRomaneio.setEnabled(false);
            jButtonSepararPedido.setEnabled(true);
            jButtonCancelarSeparacao.setEnabled(true);
            jButtonFechar.setEnabled(false);
            jButtonPesquisaSaida.setEnabled(false);
        }
        if (quanMovendaProd == quantidadeSerial && separando) {
            String romaneio = "";
            for (Movendaprod vend : listaProdutoPedido) {
                romaneio = romaneio + vend.getCodprod().getCodigo() + ": ";
                for (SaidaSerial sai : queryIntegrador.listPorSaidaProd(vend.getCodmovprod())) {
                    romaneio = romaneio + sai.getIdSerial().getSerial() + ", ";
                }
                romaneio = romaneio + "  ";
            }
            movenda.setObsnotafiscal(romaneio);
            try {
                new MovendaJpaController(managerCplus).edit(movenda);
            } catch (NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "ERRO AO EDITAR MOVENDA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "ERRO AO EDITAR MOVENDA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        }
        return condicao;
    }

    private int quantidadePacote(Movendaprod movendaProd) {
        int quantidade = movendaProd.getQuantidade().intValue();
        for (Unidade un : queryCplus.resultPorUnidadeProduto(movendaProd.getCodprod().getUnidade())) {
            if (un.getFatorconversao().intValue() > 1) {
                quantidade = quantidade / un.getFatorconversao().intValue();
                jTextFieldMultiplo.setText(String.valueOf(un.getFatorconversao().intValue()));
            } else {
                jTextFieldMultiplo.setText("1");
            }
        }

        return quantidade;
    }

    private void tocarSomFinalizado() {
        //String com o caminho do arquivo ReproduzirAudio a ser tocado
        String path = queryIntegrador.valorConfiguracao("caminho_ARQUIVO_AUDIO_FINALIZADO");
        // new VariavelStatica().caminho_ARQUIVO_AUDIO_FINALIZADO;
        //Instancia de um objeto File com o arquivo ReproduzirAudio
        File mp3File = new File(path);
        //Instancia do Objeto ReproduzirAudio, a qual criamos a classe.
        ReproduzirAudio musica = new ReproduzirAudio(mp3File);
        //Finalmente a chamada do método que toca a música
        musica.play();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaidaSerialJFrame(managerCplus, managerIntegrador, managerPrestaShop).setVisible(true);
            }
        });
    }
    private Movenda movenda;
    private final ListagemSaidasJDialog listagemSaidasJDialog;

    ListagemUsuarioJDialog listagemUsuarioJDialog;
    //int colunaCodMovProdutoSerial;
    private List<Movendaprod> listaProdutoPedido;
    private static EntityManagerFactory managerCplus;
    private static EntityManagerFactory managerPrestaShop;
    private static EntityManagerFactory managerIntegrador;
    // QuerySerial querySerial;
    private final QueryCplus queryCplus;
    private final QueryIntegrador queryIntegrador;
    private final ListagemProdutoJDialog listagemProdutoJDialog;
    //int colunaCodMovProdutoSaida;
    //int colunaQuantidadeConferida;
    //int quantidadeSaidas;
    //int quantidadTotalPedido;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelarSeparacao;
    private javax.swing.JButton jButtonEditarProduto;
    private javax.swing.JButton jButtonExcluirSeria;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonImprimirRomaneio;
    private javax.swing.JButton jButtonPesquisaSaida;
    private javax.swing.JButton jButtonSepararPedido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDigiteSerial;
    private javax.swing.JLabel jLabelItensFaltando;
    private javax.swing.JPanel jPanelConfiguracaoLista;
    private javax.swing.JPanel jPanelInformacoes;
    private javax.swing.JPanel jPanelPesquisas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableSaidaProd;
    private javax.swing.JTable jTableSeriasSeparados;
    private javax.swing.JTextField jTextFieldItensFaltando;
    private javax.swing.JTextField jTextFieldMultiplo;
    private javax.swing.JTextField jTextFieldSerial;
    private javax.swing.JTextField jTextFieldTextoAviso;
    // End of variables declaration//GEN-END:variables

}
