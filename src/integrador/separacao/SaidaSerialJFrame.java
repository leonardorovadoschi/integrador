/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integrador.separacao;

import acesso.ConexaoDB;
import entidade.cplus.Movenda;
import entidade.cplus.Movendaprod;
import entidade.cplus.Movendaprodserial;
import entidade.cplus.Nfceletronica;
import entidade.cplus.Produto;
import entidade.cplus.Produtocodigo;
import entidade.cplus.Produtoserial;
import entidade.cplus.Unidade;
import entidade.integrador.IntConfiguracao;
import entidade.integrador.IntLogs;
import acesso.ListagemUsuarioJDialog;
import entidade.prestaShop.PsOrders;
import janela.cplus.FormataCampos;
import janela.cplus.ListagemSaidasJDialog;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;
//import integrador.pedido.ValoresOrder;
import integrador.relatorio.ImprimeRelatorio;
import integrador.render.RenderNumeroInteiro;
import integrador.render.RenderPreco;
import integrador.render.RenderSerialSaidaGreenRed;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import jpa.cplus.MovendaJpaController;
import jpa.cplus.MovendaprodJpaController;
import jpa.cplus.MovendaprodserialJpaController;
import jpa.cplus.ProdutoJpaController;
import jpa.cplus.exceptions.NonexistentEntityException;
import jpa.integrador.IntConfiguracaoJpaController;
import jpa.integrador.IntLogsJpaController;
//import jpa.integracao.PedidoIntegradorJpaController;
//import jpa.magento.SalesFlatOrderJpaController;
import org.xml.sax.SAXException;
import pedido.ManutencaoVenda;
import pedido.ValoresOrder;
import query.prestaShop.QueryPrestaShop;

/**
 *
 * @author leonardo
 */
public class SaidaSerialJFrame extends javax.swing.JFrame {

    /**
     * Creates new form SaidaSerialJFrame
     *
     * @param managerCplus1
     * @param managerIntegrador1
     * @param managerPrestaShop1
     */
    public SaidaSerialJFrame(EntityManagerFactory managerCplus1, EntityManagerFactory managerIntegrador1, EntityManagerFactory managerPrestaShop1) {
        initComponents();
        managerCplus = managerCplus1;
        managerPrestaShop = managerPrestaShop1;
        //querySerial = new QuerySerial(managerCplus);
        queryCplus = new QueryCplus(managerCplus);
        queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        managerIntegrador = managerIntegrador1;
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        this.listagemSaidasJDialog = new ListagemSaidasJDialog(this, true, managerCplus);
        this.listagemUsuarioJDialog = new ListagemUsuarioJDialog(this, true, managerCplus);
        this.listagemUsuarioJDialog.setLocationRelativeTo(null);
        // this.serialJDialog = new SerialJDialog(this, true);
        this.listagemUsuarioJDialog.requestFocusInWindow();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        colunaCodMovProdutoSaida = jTableProdutosPedido.getColumnModel().getColumnIndex("Codmovprod");
        //colunaQuantidadeConferida = jTableProdutosPedido.getColumnModel().getColumnIndex("Quant Conferida");   
        colunaCodMovProdutoSerial = jTableSerialSaida.getColumnModel().getColumnIndex("Codmovendaprodserial");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        cplusPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("cplusPU").createEntityManager();
        movendaprodQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT m FROM Movendaprod m where m.codmovenda.codmovenda = \"55555555\"");
        movendaprodList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(movendaprodQuery.getResultList()));
        movendaprodserialQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT ven FROM Movendaprodserial ven WHERE ven.codprodutoserial.serial =\"555555555\"");
        movendaprodserialList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(movendaprodserialQuery.getResultList()));
        jScrollPaneProdutosPedido = new javax.swing.JScrollPane();
        jTableProdutosPedido = new javax.swing.JTable();
        jPanelConfiguracaoLista = new javax.swing.JPanel();
        jButtonImprimirRomaneio = new javax.swing.JButton();
        jButtonExcluirSeria = new javax.swing.JButton();
        jButtonGravar = new javax.swing.JButton();
        jTextFieldTextoAviso = new javax.swing.JTextField();
        jPanelInformacoes = new javax.swing.JPanel();
        jLabelItensFaltando = new javax.swing.JLabel();
        jTextFieldItensFaltando = new javax.swing.JTextField();
        jTextFieldMultiplo = new javax.swing.JTextField();
        jTextFieldSerial = new javax.swing.JTextField();
        jLabelDigiteSerial = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanelPesquisas = new javax.swing.JPanel();
        jButtonPesquisaSaida = new javax.swing.JButton();
        jButtonSepararPedido = new javax.swing.JButton();
        jButtonCancelarSeparacao = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jScrollPaneSerialSaida = new javax.swing.JScrollPane();
        jTableSerialSaida = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Separação Serial");

        jScrollPaneProdutosPedido.setAutoscrolls(true);

        jTableProdutosPedido.setAutoCreateRowSorter(true);
        jTableProdutosPedido.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, movendaprodList, jTableProdutosPedido);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.codigo}"));
        columnBinding.setColumnName("Código Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.nomeprod}"));
        columnBinding.setColumnName("Nome Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantidade}"));
        columnBinding.setColumnName("Quantidade");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantidadeconferida}"));
        columnBinding.setColumnName("Quant Conferida");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantidadedevolvida}"));
        columnBinding.setColumnName("Quantidadedevolvida");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valorunitario}"));
        columnBinding.setColumnName("Valorunitario");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valortotal}"));
        columnBinding.setColumnName("Valortotal");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod}"));
        columnBinding.setColumnName("Codmovprod");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableProdutosPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutosPedidoMouseClicked(evt);
            }
        });
        jScrollPaneProdutosPedido.setViewportView(jTableProdutosPedido);
        if (jTableProdutosPedido.getColumnModel().getColumnCount() > 0) {
            jTableProdutosPedido.getColumnModel().getColumn(0).setMinWidth(100);
            jTableProdutosPedido.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTableProdutosPedido.getColumnModel().getColumn(0).setMaxWidth(250);
            jTableProdutosPedido.getColumnModel().getColumn(0).setCellRenderer(new RenderSerialSaidaGreenRed());
            jTableProdutosPedido.getColumnModel().getColumn(1).setMinWidth(200);
            jTableProdutosPedido.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableProdutosPedido.getColumnModel().getColumn(1).setMaxWidth(500);
            jTableProdutosPedido.getColumnModel().getColumn(1).setCellRenderer(new RenderSerialSaidaGreenRed());
            jTableProdutosPedido.getColumnModel().getColumn(2).setCellRenderer(new RenderNumeroInteiro());
            jTableProdutosPedido.getColumnModel().getColumn(3).setCellRenderer(new RenderNumeroInteiro());
            jTableProdutosPedido.getColumnModel().getColumn(4).setCellRenderer(new RenderNumeroInteiro());
            jTableProdutosPedido.getColumnModel().getColumn(5).setCellRenderer(new RenderPreco());
            jTableProdutosPedido.getColumnModel().getColumn(6).setCellRenderer(new RenderPreco());
        }

        jPanelConfiguracaoLista.setBorder(javax.swing.BorderFactory.createTitledBorder("Configurações Listagem Serial"));

        jButtonImprimirRomaneio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonImprimirRomaneio.setText("Imprimir Romaneio");
        jButtonImprimirRomaneio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirRomaneioActionPerformed(evt);
            }
        });

        jButtonExcluirSeria.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonExcluirSeria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/delete.png"))); // NOI18N
        jButtonExcluirSeria.setText("Excluir Serial");
        jButtonExcluirSeria.setEnabled(false);
        jButtonExcluirSeria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirSeriaActionPerformed(evt);
            }
        });

        jButtonGravar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        jButtonGravar.setText("Gravar");
        jButtonGravar.setEnabled(false);
        jButtonGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConfiguracaoListaLayout = new javax.swing.GroupLayout(jPanelConfiguracaoLista);
        jPanelConfiguracaoLista.setLayout(jPanelConfiguracaoListaLayout);
        jPanelConfiguracaoListaLayout.setHorizontalGroup(
            jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracaoListaLayout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addGroup(jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonImprimirRomaneio, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jButtonExcluirSeria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGravar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelConfiguracaoListaLayout.setVerticalGroup(
            jPanelConfiguracaoListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracaoListaLayout.createSequentialGroup()
                .addComponent(jButtonImprimirRomaneio)
                .addGap(8, 8, 8)
                .addComponent(jButtonGravar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExcluirSeria)
                .addGap(0, 40, Short.MAX_VALUE))
        );

        jTextFieldTextoAviso.setEditable(false);
        jTextFieldTextoAviso.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jPanelInformacoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Serial:"));

        jLabelItensFaltando.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelItensFaltando.setText("Itens Faltando:");

        jTextFieldItensFaltando.setEditable(false);
        jTextFieldItensFaltando.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldMultiplo.setEditable(false);
        jTextFieldMultiplo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldMultiplo.setText("1");

        jTextFieldSerial.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldSerial.setEnabled(false);
        jTextFieldSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSerialActionPerformed(evt);
            }
        });

        jLabelDigiteSerial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDigiteSerial.setText("Digite o Serial:");

        jLabel1.setText("Multiplo:");

        javax.swing.GroupLayout jPanelInformacoesLayout = new javax.swing.GroupLayout(jPanelInformacoes);
        jPanelInformacoes.setLayout(jPanelInformacoesLayout);
        jPanelInformacoesLayout.setHorizontalGroup(
            jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelInformacoesLayout.createSequentialGroup()
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelDigiteSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelItensFaltando, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInformacoesLayout.createSequentialGroup()
                        .addComponent(jTextFieldItensFaltando, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMultiplo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldSerial)))
        );
        jPanelInformacoesLayout.setVerticalGroup(
            jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacoesLayout.createSequentialGroup()
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldItensFaltando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelItensFaltando))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldMultiplo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDigiteSerial)))
        );

        jPanelPesquisas.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa:"));

        jButtonPesquisaSaida.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisaSaida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisaSaida.setText("Pesquisa Saida");
        jButtonPesquisaSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisaSaidaActionPerformed(evt);
            }
        });

        jButtonSepararPedido.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonSepararPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/play.png"))); // NOI18N
        jButtonSepararPedido.setText("Separar Pedido");
        jButtonSepararPedido.setEnabled(false);
        jButtonSepararPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSepararPedidoActionPerformed(evt);
            }
        });

        jButtonCancelarSeparacao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonCancelarSeparacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButtonCancelarSeparacao.setText("Cancelar Separação");
        jButtonCancelarSeparacao.setEnabled(false);
        jButtonCancelarSeparacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarSeparacaoActionPerformed(evt);
            }
        });

        jButtonFechar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/stop.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPesquisasLayout = new javax.swing.GroupLayout(jPanelPesquisas);
        jPanelPesquisas.setLayout(jPanelPesquisasLayout);
        jPanelPesquisasLayout.setHorizontalGroup(
            jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisasLayout.createSequentialGroup()
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonSepararPedido, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(jButtonPesquisaSaida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCancelarSeparacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        jPanelPesquisasLayout.setVerticalGroup(
            jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisasLayout.createSequentialGroup()
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPesquisaSaida)
                    .addComponent(jButtonFechar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPesquisasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSepararPedido)
                    .addComponent(jButtonCancelarSeparacao)))
        );

        jScrollPaneSerialSaida.setAutoscrolls(true);

        jTableSerialSaida.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, movendaprodserialList, jTableSerialSaida);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.serial}"));
        columnBinding.setColumnName("Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.codprod.nomeprod}"));
        columnBinding.setColumnName("Descrição");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.codprod.codigo}"));
        columnBinding.setColumnName("Código");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovendaprodserial}"));
        columnBinding.setColumnName("Codmovendaprodserial");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovprod}"));
        columnBinding.setColumnName("Codmovprod");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.codprodutoserial}"));
        columnBinding.setColumnName("Codprodutoserial");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableSerialSaida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSerialSaidaMouseClicked(evt);
            }
        });
        jScrollPaneSerialSaida.setViewportView(jTableSerialSaida);
        if (jTableSerialSaida.getColumnModel().getColumnCount() > 0) {
            jTableSerialSaida.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTableSerialSaida.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelPesquisas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelInformacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelConfiguracaoLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPaneProdutosPedido, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jTextFieldTextoAviso, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneSerialSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jPanelInformacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanelPesquisas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelConfiguracaoLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTextoAviso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneSerialSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPaneProdutosPedido, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisaSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisaSaidaActionPerformed
        buscaPedido();
    }//GEN-LAST:event_jButtonPesquisaSaidaActionPerformed

    private void jButtonSepararPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSepararPedidoActionPerformed
        jTextFieldSerial.setEnabled(true);
        jTextFieldSerial.requestFocus();
        jButtonPesquisaSaida.setEnabled(false);
        jButtonFechar.setEnabled(false);
        jButtonCancelarSeparacao.setEnabled(true);
        pedidoSeparado();
        jButtonSepararPedido.setEnabled(false);
        //tratamentoCampos();
    }//GEN-LAST:event_jButtonSepararPedidoActionPerformed

    private void jTableProdutosPedidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutosPedidoMouseClicked
        //if(jCheckBoxProdutoSelecionado.isSelected()){
        // atualizaListaSerial();
        // }
    }//GEN-LAST:event_jTableProdutosPedidoMouseClicked

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        fechar();
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonExcluirSeriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirSeriaActionPerformed
        removerSerialSelecionado();
    }//GEN-LAST:event_jButtonExcluirSeriaActionPerformed

    private void jButtonCancelarSeparacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarSeparacaoActionPerformed
        int cancelar = JOptionPane.showConfirmDialog(null, "AO CANCELAR TODOS SERIAIS DO PEDIDO SERÃOO EXCLUIDOS??", "Cancelar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_OPTION) {
            jButtonFechar.setEnabled(true);
            jButtonPesquisaSaida.setEnabled(true);
            jButtonCancelarSeparacao.setEnabled(false);
            jButtonGravar.setEnabled(false);
            removerSeriaisPedido();
            buscaPedido();
        }
    }//GEN-LAST:event_jButtonCancelarSeparacaoActionPerformed

    private void jTextFieldSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSerialActionPerformed

        adicionarSerial();
    }//GEN-LAST:event_jTextFieldSerialActionPerformed

    private void jButtonImprimirRomaneioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirRomaneioActionPerformed
        if (movenda != null) {
            // ImprimirRelatorio rel = new ImprimirRelatorio();
            // rel.imprimirRomaneio(movenda.getNumped());
            new ImprimeRelatorio().imprimeRelatorio(queryIntegrador.valorConfiguracao("caminho_RELATORIO_ROMANEIO_SERIAIS"), movendaprodList);
        }
    }//GEN-LAST:event_jButtonImprimirRomaneioActionPerformed

    private void jButtonGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarActionPerformed
        gravaMoVendaSerial();
        try {
            alteraValorCupom();
        } catch (SAXException ex) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO IMPRIMIR NFC-e, Verifique!! \n" + ex, "Erro Finalizar", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO IMPRIMIR NFC-e, Verifique!! \n" + ex, "Erro Finalizar", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO IMPRIMIR NFC-e, Verifique!! \n" + ex, "Erro Finalizar", JOptionPane.ERROR_MESSAGE);
        }
        pedidoSeparado();


    }//GEN-LAST:event_jButtonGravarActionPerformed

    private void jTableSerialSaidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSerialSaidaMouseClicked
        jButtonExcluirSeria.setEnabled(true);
    }//GEN-LAST:event_jTableSerialSaidaMouseClicked

    private void alteraValorCupom() throws ParserConfigurationException, SAXException, IOException, Exception {
        List<Nfceletronica> listNFCE = queryCplus.resultPorCodMovenda(movenda.getCodmovenda());
        for (Nfceletronica nfc : listNFCE) {
            if ("A".equals(nfc.getStatusnfceletronica())) {
                // List<PedidoIntegrador> listPedidoIntegrador = new PedidoIntegradorJpaController(managerIntegrador).codigoTelefone(movenda.getEntregatelefone());
                // for (PedidoIntegrador pedidoIntegrador : listPedidoIntegrador) {
                List<PsOrders> listOrder = queryPrestaShop.listPsOrders(movenda.getEntregatelefone());
                for (PsOrders order : listOrder) {
                    if (movenda.getValortotalnota().doubleValue() < new ValoresOrder().valorTotalPredido(order).doubleValue()) {
                        // new ManutencaoVenda().alteraValorProdutos(var, queryCplus, movenda, pedidoIntegrador, managerCplus);
                        new ManutencaoVenda().alteraValorProdutos(queryCplus, movenda, order, managerCplus, managerPrestaShop, managerIntegrador);
                        movenda = new MovendaJpaController(managerCplus).findMovenda(movenda.getCodmovenda());
                        new ImprimeRelatorio().imprimeRelatorio("/integrador/relatorio/CupomNFCe.jrxml", new ManutencaoVenda().listaRelatorio(movenda, nfc));
                    }
                }
            }
        }
    }

    private void adicionarSerial() {
        if (!"".equals(jTextFieldSerial.getText())) {
            if (separarPedido(jTextFieldSerial.getText().toUpperCase().trim())) {
                quantidadeSaidas++;
            } else {
                pedidoSeparado();
                jButtonSepararPedido.setEnabled(false);
            }
        }
        int tot = quantidadTotalPedido - quantidadeSaidas;
        jTextFieldItensFaltando.setText(String.valueOf(tot));
        if (quantidadTotalPedido == quantidadeSaidas) {
            //pedidoSeparado(); 
            jButtonGravar.setEnabled(true);
            //jTextFieldSerial.setText("");
            jTextFieldTextoAviso.setText("Pedido Totalmente Separago Aguardando Gravação!");
            jTextFieldTextoAviso.setBackground(Color.YELLOW);
            tocarSomFinalizado();
            //jButtonPesquisaSaida.requestFocus();
        }
        jTextFieldSerial.selectAll();
        jTextFieldSerial.setText("");
        jTextFieldSerial.requestFocus();
    }

    private void removerSerialSelecionado() {
        colunaCodMovProdutoSerial = jTableSerialSaida.getColumnModel().getColumnIndex("Codmovendaprodserial");
        String cod = jTableSerialSaida.getValueAt(jTableSerialSaida.getSelectedRow(), colunaCodMovProdutoSerial).toString();
        int index = 0;
        for (Movendaprodserial ser : movendaprodserialList) {
            if (ser.getCodmovendaprodserial() == null ? cod == null : ser.getCodmovendaprodserial().equals(cod)) {
                movendaprodserialList.remove(index);

                List<Movendaprodserial> listSerial = queryCplus.listagemSaidaSerialExato(ser.getCodprodutoserial().getSerial());
                for (Movendaprodserial serialBanco : listSerial) {

                    try {
                        new MovendaprodserialJpaController(managerCplus).destroy(serialBanco.getCodmovendaprodserial());

                    } catch (NonexistentEntityException ex) {
                        JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR O SERIA NO BANCO, Verifique!! \n" + ex, "Erro Excluir", JOptionPane.ERROR_MESSAGE);
                    }
                }
                Movendaprod prod = ser.getCodmovprod();
                prod.setQuantidadeconferida(prod.getQuantidadeconferida().subtract(BigDecimal.ONE));
                try {
                    new MovendaprodJpaController(managerCplus).edit(prod);
                } catch (NonexistentEntityException ex) {
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR QUANTIDADE CONFERIDA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR QUANTIDADE CONFERIDA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            index++;
        }
        pedidoSeparado();
        jTextFieldSerial.selectAll();
        jTextFieldSerial.setText("");
        jTextFieldSerial.requestFocus();
        jButtonExcluirSeria.setEnabled(false);
    }

    private void fechar() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        for (IntConfiguracao config : listConfig) {
            try {
                new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (condicao) {
            dispose();
            setVisible(false);
        }
    }

    private String retornaIpLocal() {
        InetAddress ia = null;
        try {
            ia = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO OBTER IP LOCAL, Verifique!! \n" + e, "Erro Separar", JOptionPane.ERROR_MESSAGE);
        }
        return "separacao_" + ia.getHostAddress() + "_" + ia.getHostName();
    }

    private boolean verificaPedidoAberto() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoPorValor(movenda.getCodmovenda());
        if (listConfig.size() > 1) {
            String ex = "";
            for (IntConfiguracao config : listConfig) {
                if (!config.getTipo().equals(retornaIpLocal())) {
                    ex = ex + config.getTipo() + "\n";
                }
            }
            JOptionPane.showMessageDialog(null, "O PEDIDO JÃ ESTÃ ABERTO EM OUTRA MAQUINA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            condicao = false;
        }
        return condicao;
    }

    private boolean insereConfiguracaoParaSeparacao() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        if (listConfig.isEmpty()) {
            IntConfiguracao c = new IntConfiguracao();
            c.setTipo(retornaIpLocal());
            c.setDescricao("pedido em separação no pc");
            c.setDataAtualizacao(new Date(System.currentTimeMillis()));
            c.setValor(movenda.getCodmovenda());
            c.setDataCriacao(new Date(System.currentTimeMillis()));
            try {
                new IntConfiguracaoJpaController(managerIntegrador).create(c);
            } catch (Exception ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO CRIAR CONFIGURAÇÃO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        } else if (listConfig.size() == 1) {
            for (IntConfiguracao config : listConfig) {
                config.setValor(movenda.getCodmovenda());
                try {
                    new IntConfiguracaoJpaController(managerIntegrador).edit(config);
                } catch (Exception ex) {
                    condicao = false;
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            int cont = 0;
            for (IntConfiguracao config : listConfig) {
                if (cont > 0) {
                    try {
                        new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
                    } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                        condicao = false;
                        JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURAÇÃO, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        return condicao;
    }

    private void removerSeriaisPedido() {
        List<Movendaprodserial> listSerial = queryCplus.listSerialSaida(movenda.getCodmovenda());
        for (Movendaprodserial mvs : listSerial) {
            try {
                new MovendaprodserialJpaController(managerCplus).destroy(mvs.getCodmovendaprodserial());
            } catch (NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO REMOVER SERIAIS, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        }
        for (Movendaprod moVendaProd : queryCplus.listMovendaProd(movenda.getCodmovenda())) {
            moVendaProd.setQuantidadeconferida(BigDecimal.ZERO);
            try {
                new MovendaprodJpaController(managerCplus).edit(moVendaProd);
            } catch (NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR QUANTIDADE CONFERIDA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR QUANTIDADE CONFERIDA, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }
        }
        pedidoSeparado();
    }

    private void atualizaListaProdutosPedido() {
        movendaprodList.clear();
        listaProdutoPedido = queryCplus.listMovendaProd(movenda.getCodmovenda());
        for (Movendaprod v : listaProdutoPedido) {
            movendaprodList.add(v);
        }
    }

    private void atualizaListaSerial() {
        movendaprodserialList.clear();
        List<Movendaprodserial> list = queryCplus.listSerialSaida(movenda.getCodmovenda());
        for (Movendaprodserial v : list) {
            movendaprodserialList.add(v);
        }
    }

    private void buscaPedido() {
        movendaprodList.clear();//limpa lista 
        jTextFieldSerial.setText("");
        movendaprodserialList.clear();
        jTextFieldSerial.setEnabled(false);
        jButtonExcluirSeria.setEnabled(false);
        this.listagemSaidasJDialog.setVisible(true);
        if (this.listagemSaidasJDialog.isCancelamento() == false) {
            movenda = this.listagemSaidasJDialog.getMoVenda();
            String str = movenda.getFlagcancelada().toString();
            if ("N".equals(str)) {
                if (insereConfiguracaoParaSeparacao()) {
                    if (verificaPedidoAberto()) {
                        atualizaListaProdutosPedido();
                        atualizaListaSerial();
                        //if (jTableProdutosPedido.getRowCount() > 0) {//verifica se ha listagem
                        //jTableProdutosPedido.setRowSelectionInterval(0, 0);//Seleciona a primeira linha da tabela                           
                        // }//fim if que seleciona primeira linha da tabela
                        pedidoSeparado();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "O pedido está cancelado, verifique!!! ", "Erro Separar", JOptionPane.ERROR_MESSAGE);
            }

            jButtonCancelarSeparacao.setEnabled(false);
            jButtonPesquisaSaida.setEnabled(true);
            jButtonFechar.setEnabled(true);

        }//fim if adialog cancelado
    }

    private boolean separarPedido(String serial) {
        boolean condicao = true;
        boolean condicao1 = true;
        String mensagem = "";
        String msgLog = "";
        Produto produto = null;
        boolean condicaoProdutoNoPedido = true;
        for (Produto prod : queryCplus.listagemProdutoPorSerial(serial)) {
            produto = prod;
        }
        List<Produtoserial> moProdutoSerial = queryCplus.pesquisaSerialExato(serial);
        if (moProdutoSerial.size() == 1) {//verifica se tem mais que um resultado a pesquisa
            for (Produtoserial produtoSerial : moProdutoSerial) {//Cria objeto da tabeal
                //produto = produtoSerial.getCodprod();
                condicao1 = true;
                List<Produtocodigo> listProdCodigo = queryCplus.listProdutoCodigo(produtoSerial.getCodprod().getCodprod());
                for (Produtocodigo cod : listProdCodigo) {
                    if (cod.getCodigo().equals(serial) || produtoSerial.getCodprod().getCodigo().equals(serial)) {
                        condicao1 = false;
                    }
                }
                if (condicao1) {
                    condicaoProdutoNoPedido = true;
                    for (Movendaprod moVendaProd : listaProdutoPedido) {
                        if (moVendaProd.getCodprod().getCodprod().equals(produtoSerial.getCodprod().getCodprod())) {
                            int quantidadeSeparada = 0;
                            // moVendaProd.setQuantidadeconferida(BigDecimal.ZERO);
                            boolean serialSeparado = false;
                            for (Movendaprodserial serialEmSeparacao : movendaprodserialList) {
                                if (serialEmSeparacao.getCodprodutoserial().getCodprodutoserial().equals(produtoSerial.getCodprodutoserial())) {
                                    serialSeparado = true;
                                    break;
                                }
                                if (moVendaProd.getCodmovprod().equals(serialEmSeparacao.getCodmovprod().getCodmovprod())) {
                                    quantidadeSeparada = quantidadeSeparada + 1;
                                }
                            }
                            if (serialSeparado == false) {
                                int quantidadeDevolvida;
                                if (moVendaProd.getQuantidadedevolvida() == null) {
                                    quantidadeDevolvida = 0;
                                } else {
                                    quantidadeDevolvida = moVendaProd.getQuantidadedevolvida().intValue();
                                }
                                int quantidadePedido = quantidadeSaida(moVendaProd) - quantidadeDevolvida;
                                boolean condicaoItensSeparados = false;
                                if (quantidadeSeparada < quantidadePedido) {
                                    condicaoItensSeparados = true;
                                }
                                if (condicaoItensSeparados) {//if que controla a mensagem de erro para quantidade separada
                                    Movendaprodserial movSerial = new Movendaprodserial();
                                    //movSerial.setCodmovendaprodserial(incrementTabelaMovProdSerial());
                                    Integer numCodMovendaSerial = new ConexaoDB().ultimoCodigo("MOVENDAPRODSERIAL", "CODMOVENDAPRODSERIAL");
                                    movSerial.setCodmovendaprodserial(String.format("%09d", numCodMovendaSerial));
                                    movSerial.setCodmovprod(moVendaProd);
                                    movSerial.setCodprodutoserial(produtoSerial);
                                    movSerial.setAltura(BigDecimal.ONE);
                                    movendaprodserialList.add(movSerial);
                                    String qntSep = String.valueOf(quantidadeSeparada + 1) + ".00";
                                    moVendaProd.setQuantidadeconferida(new BigDecimal(qntSep));
                                    try {
                                        new MovendaprodJpaController(managerCplus).edit(moVendaProd);
                                        numCodMovendaSerial++;
                                        new ConexaoDB().atualizarCodigo("MOVENDAPRODSERIAL", "CODMOVENDAPRODSERIAL", numCodMovendaSerial);
                                        movendaprodList.clear();                                       
                                        for (Movendaprod v : queryCplus.listMovendaProd(movenda.getCodmovenda())) {
                                            movendaprodList.add(v);
                                        }
                                        if (quantidadePedido == (quantidadeSeparada + 1)) {
                                            for (int cont = 0; cont < jTableProdutosPedido.getRowCount(); cont++) {
                                                if (moVendaProd.getCodmovprod() == jTableProdutosPedido.getValueAt(cont, colunaCodMovProdutoSaida)) {
                                                    jTableProdutosPedido.setRowSelectionInterval(cont, cont);

                                                }
                                            }
                                        }
                                    } catch (NonexistentEntityException ex) {
                                        JOptionPane.showMessageDialog(null, "Houve um erro ao editar pedido \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                                    } catch (Exception ex) {
                                        JOptionPane.showMessageDialog(null, "Houve um erro ao editar pedido \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                                    }
                                    condicaoProdutoNoPedido = false;
                                    break;
                                } else {
                                    condicaoProdutoNoPedido = false;
                                    condicao = false;
                                    mensagem = "ESTE PRODUTO JÁ ESTÁ TOTALMENTE SEPARADO, \n Se houver produtos iguais no pedido descarte a informação! \n  verifique!!! \n";
                                    msgLog = ", O produto: " + moVendaProd.getCodprod().getNomeprod() + ", está totalmente separado. Serial: " + produtoSerial.getSerial() + ", Data: " + new FormataCampos().dataStringDataCompleta(new Date(System.currentTimeMillis()), 0);

                                }
                            } else {
                                condicao = false;
                                condicaoProdutoNoPedido = false;
                                mensagem = "ESTE SERIAL JÁ ESTÁ NO PEDIDO, verifique!!! \n" + produtoSerial.getSerial();
                                msgLog = ", O produto: " + moVendaProd.getCodprod().getNomeprod() + ", o serial já¡ está¡ no pedido. Serial: " + produtoSerial.getSerial() + ", Data: " + new FormataCampos().dataStringDataCompleta(new Date(System.currentTimeMillis()), 0);
                            }
                        }// fim if que ferifica se o produto estï¿½ no pedido                         
                    }//fim for Movendaprod 
                    if (condicaoProdutoNoPedido) {
                        condicao = false;
                        mensagem = "O PRODUTO: " + produto.getNomeprod() + "\n NÃO ESTÁ NO PEDIDO Verifique!!!!!";
                        msgLog = ", O produto: " + produto.getNomeprod() + ", mão está no pedido " + produtoSerial.getSerial() + ", Data: " + new FormataCampos().dataStringDataCompleta(new Date(System.currentTimeMillis()), 0);
                    }
                } else {//que verifica se foi digitado o EAN
                    condicao = false;
                    mensagem = "O SERIAL NÃO PODE SER O EAN OU O CODIGO DO PRODUTO, Verifique!!!!!";
                    // msgLog = "O produto: "+produto.getNomeprod()+", o serial jï¿½ estï¿½ no pedido. Serial: "+ produtoSerial.getSerial();
                }
            }
        } else {//fim if que verifica se encontrou serial
            if (moProdutoSerial.isEmpty()) {// se igual a zero coloca serial nÃ£o encontrado, se diferente mensagem abaixo 
                condicao = false;
                mensagem = "SERIAL NÃO ENCONTRADO!! " + moProdutoSerial.size() + " RESULTADOS";
            } else {
                condicao = false;
                mensagem = "FOI ENCONTRADO: " + moProdutoSerial.size() + " RESULTADOS, verifique!!!";
            }//fim else que encontrou mais de um serial
        }//fim else messagem de erro de encontrou seria
        if (condicao == false) {
            tocarSomErro();
            JOptionPane.showMessageDialog(null, mensagem, "Erro Separar", JOptionPane.ERROR_MESSAGE);
            this.listagemUsuarioJDialog.setVisible(true);
            String getStr = "";
            if (condicaoProdutoNoPedido == false && condicao1) {
                if (movenda.getObs() != null) {
                    getStr = movenda.getObs();
                }
                movenda.setObs(getStr + "Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + msgLog + "\n");
                try {
                    new MovendaJpaController(managerCplus).edit(movenda);
                } catch (NonexistentEntityException ex) {
                    criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Pedido: " + ex, "Erro editar", managerIntegrador);
                } catch (Exception ex) {
                    criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Pedido: " + ex, "Erro editar", managerIntegrador);
                }
                criaLog(new Date(System.currentTimeMillis()), "Erro separarar, pedido: " + movenda.getNumped() + ", Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + msgLog + "\n", "Erro Separaï¿½ï¿½o", managerIntegrador);
            } else if (moProdutoSerial.size() == 1 && condicao1) {
                if (movenda.getObs() != null) {
                    getStr = movenda.getObs();
                }
                movenda.setObs(getStr + "Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + msgLog + "\n");
                try {
                    new MovendaJpaController(managerCplus).edit(movenda);
                } catch (NonexistentEntityException ex) {
                    criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Pedido: " + ex, "Erro editar", managerIntegrador);
                } catch (Exception ex) {
                    criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Pedido: " + ex, "Erro editar", managerIntegrador);
                }

                if (produto.getDescricaoweb() != null) {
                    getStr = produto.getDescricaoweb();
                }
                produto.setDescricaoweb(getStr + "Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + msgLog + "\n");
                try {
                    new ProdutoJpaController(managerCplus).edit(produto);
                } catch (NonexistentEntityException ex) {
                    criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Produto: " + ex, "Erro editar", managerIntegrador);
                } catch (Exception ex) {
                    criaLog(new Date(System.currentTimeMillis()), "Erro ao editar Produto: " + ex, "Erro editar", managerIntegrador);
                }
                criaLog(new Date(System.currentTimeMillis()), "Erro separar, pedido: " + movenda.getNumped() + ", Usuário: " + this.listagemUsuarioJDialog.getUsuario().getNome() + msgLog + "\n", "Erro Separaï¿½ï¿½o", managerIntegrador);
            }
        }
        return condicao;
    }

    private void criaLog(Date dataExecucao, String mensagem, String tipoLog, EntityManagerFactory managerIntegrador) {
        IntLogs log = new IntLogs();
        log.setDataExecucao(dataExecucao);
        // log.setUltimaExecucao(dataExecucao);
        log.setMensagem(mensagem);
        log.setTipoLog(tipoLog);
        new IntLogsJpaController(managerIntegrador).create(log);
    }

    private void gravaMoVendaSerial() {
        for (Movendaprodserial prodSerial : movendaprodserialList) {
            if (prodSerial.getAltura().doubleValue() > 0.00) {
                Movendaprodserial mvps = new Movendaprodserial();
                mvps.setCodmovendaprodserial(prodSerial.getCodmovendaprodserial());
                mvps.setCodprodutoserial(prodSerial.getCodprodutoserial());
                mvps.setCodmovprod(prodSerial.getCodmovprod());
                mvps.setAltura(BigDecimal.ZERO);
                try {
                    new MovendaprodserialJpaController(managerCplus).create(mvps);
                    prodSerial.setAltura(BigDecimal.ZERO);
                    jButtonGravar.setEnabled(false);
                    jTextFieldSerial.setEnabled(false);
                } catch (Exception ex) {
                    tocarSomErro();
                    pedidoSeparado();
                    JOptionPane.showMessageDialog(null, "ERRO AO GRAVAR SERIAL, Verifique!! \n" + ex, "Erro Separar", JOptionPane.ERROR_MESSAGE);
                    this.listagemUsuarioJDialog.setVisible(true);
                }
            }
        }

    }

    private void tocarSomErro() {
        //String com o caminho do arquivo ReproduzirAudio a ser tocado
        String path = queryIntegrador.valorConfiguracao("caminho_ARQUIVO_AUDIO_ERRO");
        //new VariavelStatica().caminho_ARQUIVO_AUDIO_ERRO;
        //Instanciar um objeto File com o arquivo ReproduzirAudio
        File mp3File = new File(path);
        //Instancia do Objeto ReproduzirAudio, a qual criamos a classe.
        ReproduzirAudio musica = new ReproduzirAudio(mp3File);
        //Finalmente a chamada do mï¿½todo que toca a mï¿½sica
        musica.play();
    }

    /**
     * FunÃ§Ã£o qeu controla pedido separado
     *
     * @return true se jÃ¡ estiver separado false nÃ£o separado ou nÃ£o separado
     * completamente
     */
    private boolean pedidoSeparado() {

        boolean condicao = false;
        List<Movendaprod> listMovendaProd = queryCplus.listMovendaProd(movenda.getCodmovenda());
        int quanMovendaProd = 0;
        for (Movendaprod prod : listMovendaProd) {
            quanMovendaProd = quanMovendaProd + quantidadeSaida(prod);
        }
        jButtonExcluirSeria.setEnabled(false);
        quantidadeSaidas = movendaprodserialList.size();
        quantidadTotalPedido = quanMovendaProd;
        int tot = quantidadTotalPedido - quantidadeSaidas;
        jTextFieldItensFaltando.setText(String.valueOf(tot));
        if (quanMovendaProd == quantidadeSaidas && !movendaprodserialList.isEmpty()) {
            jTextFieldItensFaltando.setText(String.valueOf(tot));
            jTextFieldTextoAviso.setText("Pedido Totalmente Separado!");
            jTextFieldTextoAviso.setBackground(Color.GREEN);
            jButtonSepararPedido.setEnabled(false);
            jButtonCancelarSeparacao.setEnabled(false);
            jButtonImprimirRomaneio.setEnabled(true);
            jButtonPesquisaSaida.setEnabled(true);
            jButtonFechar.setEnabled(true);
            //jTextFieldSerial.setEnabled(false);

            condicao = true;
        } else {
            jTextFieldTextoAviso.setText("Aguardando Separação de Produtos!");
            jTextFieldTextoAviso.setBackground(Color.RED);
            jButtonImprimirRomaneio.setEnabled(false);
            jButtonSepararPedido.setEnabled(true);
            jButtonCancelarSeparacao.setEnabled(true);
            jButtonFechar.setEnabled(false);
            jButtonPesquisaSaida.setEnabled(false);
            boolean multiplo = false;
            String texto = "ERRO CORRIJA ANTES DE PROSSEGUIR !! \n";
            for (Movendaprod prod : listMovendaProd) {
                //int quantidade = prod.getQuantidade().intValue();
                for (Unidade un : queryCplus.resultPorUnidadeProduto(prod.getCodprod().getUnidade())) {
                    // if (un.getFatorconversao().intValue() > 1) {
                    //        quantidade = quantidade / un.getFatorconversao().intValue();
                    //   }
                    if ((prod.getQuantidade().intValue() % un.getFatorconversao().intValue()) != 0) {
                        texto = texto + "O produto: " + prod.getCodprod().getNomeprod() + " deve ser multiplo de: " + un.getFatorconversao().intValue() + "\n";
                        multiplo = true;
                        jButtonSepararPedido.setEnabled(false);
                    }
                }
            }
            if (multiplo) {
                JOptionPane.showMessageDialog(null, texto);
            }
        }
        return condicao;
    }

    private int quantidadeSaida(Movendaprod movendaProd) {
        int quantidade = movendaProd.getQuantidade().intValue();
        for (Unidade un : queryCplus.resultPorUnidadeProduto(movendaProd.getCodprod().getUnidade())) {
            if (un.getFatorconversao().intValue() > 1) {
                quantidade = quantidade / un.getFatorconversao().intValue();
                jTextFieldMultiplo.setText(String.valueOf(un.getFatorconversao().intValue()));
            } else {
                jTextFieldMultiplo.setText("1");
            }
        }

        return quantidade;
    }

    private void tocarSomFinalizado() {
        //String com o caminho do arquivo ReproduzirAudio a ser tocado
        String path = queryIntegrador.valorConfiguracao("caminho_ARQUIVO_AUDIO_ERRO");
        // new VariavelStatica().caminho_ARQUIVO_AUDIO_FINALIZADO;
        //Instanciaï¿½ï¿½o de um objeto File com o arquivo ReproduzirAudio
        File mp3File = new File(path);
        //Instanciaï¿½ï¿½o do Objeto ReproduzirAudio, a qual criamos a classe.
        ReproduzirAudio musica = new ReproduzirAudio(mp3File);
        //Finalmente a chamada do mï¿½todo que toca a mï¿½sica
        musica.play();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaidaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaidaSerialJFrame(managerCplus, managerIntegrador, managerPrestaShop).setVisible(true);
            }
        });
    }
    private Movenda movenda;
    private final ListagemSaidasJDialog listagemSaidasJDialog;

    ListagemUsuarioJDialog listagemUsuarioJDialog;
    int colunaCodMovProdutoSerial;
    List<Movendaprod> listaProdutoPedido;
    private static EntityManagerFactory managerCplus;
    private static EntityManagerFactory managerPrestaShop;
    private static EntityManagerFactory managerIntegrador;
    // QuerySerial querySerial;
    private final QueryCplus queryCplus;
    private final QueryIntegrador queryIntegrador;
    private final QueryPrestaShop queryPrestaShop;
    int colunaCodMovProdutoSaida;
    //int colunaQuantidadeConferida;
    int quantidadeSaidas;
    int quantidadTotalPedido;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager cplusPUEntityManager;
    private javax.swing.JButton jButtonCancelarSeparacao;
    private javax.swing.JButton jButtonExcluirSeria;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonGravar;
    private javax.swing.JButton jButtonImprimirRomaneio;
    private javax.swing.JButton jButtonPesquisaSaida;
    private javax.swing.JButton jButtonSepararPedido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDigiteSerial;
    private javax.swing.JLabel jLabelItensFaltando;
    private javax.swing.JPanel jPanelConfiguracaoLista;
    private javax.swing.JPanel jPanelInformacoes;
    private javax.swing.JPanel jPanelPesquisas;
    private javax.swing.JScrollPane jScrollPaneProdutosPedido;
    private javax.swing.JScrollPane jScrollPaneSerialSaida;
    private javax.swing.JTable jTableProdutosPedido;
    private javax.swing.JTable jTableSerialSaida;
    private javax.swing.JTextField jTextFieldItensFaltando;
    private javax.swing.JTextField jTextFieldMultiplo;
    private javax.swing.JTextField jTextFieldSerial;
    private javax.swing.JTextField jTextFieldTextoAviso;
    private java.util.List<entidade.cplus.Movendaprod> movendaprodList;
    private javax.persistence.Query movendaprodQuery;
    private java.util.List<entidade.cplus.Movendaprodserial> movendaprodserialList;
    private javax.persistence.Query movendaprodserialQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
