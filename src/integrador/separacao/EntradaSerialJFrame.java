/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integrador.separacao;

import entidade.cplus.Moventrada;
import entidade.cplus.Moventradaprod;
import entidade.cplus.Unidade;
import entidade.integrador.EntradaSerial;
import entidade.integrador.IntConfiguracao;
import janela.cplus.ListagemEntradasJDialog;
import java.awt.Color;
import java.awt.Toolkit;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import jpa.cplus.MoventradaprodJpaController;
import jpa.cplus.ProdutoJpaController;
import jpa.integrador.IntConfiguracaoJpaController;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;

/**
 *
 * @author leonardo
 */
public class EntradaSerialJFrame extends javax.swing.JFrame {

    /**
     * Creates new form EntradaSerialJFrame
     *
     * @param managerCplus1
     * @param managerIntegrador1
     */
    public EntradaSerialJFrame(EntityManagerFactory managerCplus1, EntityManagerFactory managerIntegrador1) {
        initComponents();
        managerCplus = managerCplus1;
        managerIntegrador = managerIntegrador1;
        this.listagemEntradasJDialog = new ListagemEntradasJDialog(this, true, managerCplus);
        //this.listagemUsuarioJDialog = new ListagemUsuarioJDialog(this, true, managerCplus);
        this.entradaSerialJDialog = new EntradaSerialJDialog(this, true, managerCplus, managerIntegrador1);
        this.listagemSerialEntradaJDialog = new ListagemSerialEntradaJDialog(this, true, managerCplus, managerIntegrador);
        //querySerial = new QuerySerial(managerCplus);
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        queryCplus = new QueryCplus(managerCplus);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        colunaCodMovProd = jTableEntradaProd.getColumnModel().getColumnIndex("Codmoveprod");
        //new RenderNumeroInteiro();
        //new RenderPreco();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonPesquisaEntrada = new javax.swing.JButton();
        jLabelStatusEntrada = new javax.swing.JLabel();
        jButtonEntradaDeSeriais = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jButtonListaSerialEntrada = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEntradaProd = new javax.swing.JTable();
        jButtonListaSerialProduto = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Seriais de Entrada");

        jButtonPesquisaEntrada.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisaEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisaEntrada.setText("Pesquisar Entrada");
        jButtonPesquisaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisaEntradaActionPerformed(evt);
            }
        });

        jLabelStatusEntrada.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        jButtonEntradaDeSeriais.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonEntradaDeSeriais.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/add.png"))); // NOI18N
        jButtonEntradaDeSeriais.setText("Entrada de Seriais");
        jButtonEntradaDeSeriais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntradaDeSeriaisActionPerformed(evt);
            }
        });

        jButtonFechar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/stop.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jButtonListaSerialEntrada.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonListaSerialEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/info.png"))); // NOI18N
        jButtonListaSerialEntrada.setText("Lista Seriais Entrada");
        jButtonListaSerialEntrada.setEnabled(false);
        jButtonListaSerialEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListaSerialEntradaActionPerformed(evt);
            }
        });

        jTableEntradaProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome Produto", "Quantidade", "Completo", "Codmoveprod"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableEntradaProd.setColumnSelectionAllowed(true);
        jTableEntradaProd.getTableHeader().setReorderingAllowed(false);
        jTableEntradaProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEntradaProdMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEntradaProd);
        jTableEntradaProd.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableEntradaProd.getColumnModel().getColumnCount() > 0) {
            jTableEntradaProd.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableEntradaProd.getColumnModel().getColumn(1).setPreferredWidth(350);
        }

        jButtonListaSerialProduto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonListaSerialProduto.setText("Lista Seriais do Produto");
        jButtonListaSerialProduto.setEnabled(false);
        jButtonListaSerialProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListaSerialProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonPesquisaEntrada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonListaSerialProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonListaSerialEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEntradaDeSeriais)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStatusEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonFechar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonPesquisaEntrada)
                        .addComponent(jButtonListaSerialEntrada)
                        .addComponent(jButtonEntradaDeSeriais)
                        .addComponent(jButtonListaSerialProduto))
                    .addComponent(jLabelStatusEntrada, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisaEntradaActionPerformed
        pesquisarEntrada();
    }//GEN-LAST:event_jButtonPesquisaEntradaActionPerformed

    private void jButtonEntradaDeSeriaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntradaDeSeriaisActionPerformed
        if (jTableEntradaProd.getRowCount() > 0 && jTableEntradaProd.getSelectedRow() != -1) {
            colunaCodMovProd = jTableEntradaProd.getColumnModel().getColumnIndex("Codmoveprod");
            String codMovProd = jTableEntradaProd.getValueAt(jTableEntradaProd.getSelectedRow(), colunaCodMovProd).toString();
            movEntradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(codMovProd);
            this.entradaSerialJDialog.setProduto(movEntradaProd.getCodprod());
            this.entradaSerialJDialog.setListCodigo(queryCplus.listagemProdutoCodigo(movEntradaProd.getCodprod().getCodprod()));
            this.entradaSerialJDialog.setMovEntradaProd(movEntradaProd);
            this.entradaSerialJDialog.confereQuantidadeDigitada();
            this.entradaSerialJDialog.setVisible(true);
            verificaEntradaCompleta();
            verificaEntradaProdutoCompleta();
            carregarTabela();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha");
        }
    }//GEN-LAST:event_jButtonEntradaDeSeriaisActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
       // removeConfiguracao();
        dispose();
            setVisible(false);
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonListaSerialEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListaSerialEntradaActionPerformed
        if (jTableEntradaProd.getRowCount() > 0) {
            this.listagemSerialEntradaJDialog.setMovEntrada(movEntrada);
            this.listagemSerialEntradaJDialog.setVisible(true);
            carregarTabela();
        }
    }//GEN-LAST:event_jButtonListaSerialEntradaActionPerformed

    private void jTableEntradaProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEntradaProdMouseClicked
       verificaEntradaProdutoCompleta();
       jButtonListaSerialProduto.setEnabled(true);
    }//GEN-LAST:event_jTableEntradaProdMouseClicked

    private void jButtonListaSerialProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListaSerialProdutoActionPerformed
        if (jTableEntradaProd.getRowCount() > 0) {
            colunaCodMovProd = jTableEntradaProd.getColumnModel().getColumnIndex("Codmoveprod");
            String codMovProd = jTableEntradaProd.getValueAt(jTableEntradaProd.getSelectedRow(), colunaCodMovProd).toString();
            this.listagemSerialEntradaJDialog.setMovEntradaProd(codMovProd);
            this.listagemSerialEntradaJDialog.setVisible(true);
            
        }
    }//GEN-LAST:event_jButtonListaSerialProdutoActionPerformed

    private void verificaEntradaProdutoCompleta() {
        //jButtonEntradaDeSeriais.setEnabled(false);
     //   if (verificaEntradaAberta()) {
            colunaCodMovProd = jTableEntradaProd.getColumnModel().getColumnIndex("Codmoveprod");
            String codMovProd = jTableEntradaProd.getValueAt(jTableEntradaProd.getSelectedRow(), colunaCodMovProd).toString();
            movEntradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(codMovProd);
            if (movEntradaProd.getCodmoveprod() != null || !"".equals(movEntradaProd.getCodmoveprod())) {
                int completo = queryIntegrador.listPorEntradaProd(movEntradaProd.getCodmoveprod()).size();
                if (quanPacote(movEntradaProd) != completo) {
                    //jButtonEntradaDeSeriais.setEnabled(true);
                } else {
                    //jButtonEntradaDeSeriais.setEnabled(false);
                    for (int cont = 0; cont < jTableEntradaProd.getRowCount(); cont++) {
                        if (movEntradaProd.getCodmoveprod() == jTableEntradaProd.getValueAt(cont, colunaCodMovProd)) {
                            jTableEntradaProd.setRowSelectionInterval(cont, cont);
                        }
                    }
                }
            }
      //  }
    }

    public void carregarTabela() {
        List<Moventradaprod> moEntradaProduto = queryCplus.listagemMovEntradaProdPorEntrada(movEntrada.getCodmoventr());
        DefaultTableModel tab = (DefaultTableModel) jTableEntradaProd.getModel();
        while (jTableEntradaProd.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableEntradaProd.getModel()).removeRow(0);
        }
        for (Moventradaprod e : moEntradaProduto) {
            int comp = queryIntegrador.listPorEntradaProd(e.getCodmoveprod()).size();
            tab.addRow(new Object[]{e.getCodprod().getCodigo(), e.getCodprod().getNomeprod(), quanPacote(e), comp, e.getCodmoveprod()});
            //corLinha(comp);
        }
        colorirLinha();
    }

    private void pesquisarEntrada() {
        //moventradaprodList.clear();
        jButtonListaSerialProduto.setEnabled(false);
        this.listagemEntradasJDialog.setVisible(true);
        if (this.listagemEntradasJDialog.isCancelamento() == false) {
            movEntrada = this.listagemEntradasJDialog.getMovEntrada();
            carregarTabela();
            verificaEntradaCompleta();
            jButtonListaSerialEntrada.setEnabled(true);           
        }//fim if pesquisa entrada cancelada
    }

    private void verificaEntradaCompleta() {
        int entSerial = 0;
        List<Moventradaprod> listProdEntrada = queryCplus.listagemMovEntradaProdPorEntrada(movEntrada.getCodmoventr());
        int totalProdutos = 0;
        for (Moventradaprod prod : listProdEntrada) {
            totalProdutos = totalProdutos + (quanPacote(prod));
            entSerial = entSerial + queryIntegrador.listPorEntradaProd(prod.getCodmoveprod()).size();
        }
        if (entSerial == totalProdutos) {
            jLabelStatusEntrada.setForeground(Color.GREEN);
            jLabelStatusEntrada.setText("Entrada de Serial Completa");
            //jButtonEntradaDeSeriais.setEnabled(false);
        } else {
//            insereConfiguracaoParaGravacaoEntrada();
            jLabelStatusEntrada.setForeground(Color.RED);
            jLabelStatusEntrada.setText("Entrada de Serial Incompleta");
            //jButtonEntradaDeSeriais.setEnabled(true);
        }
    }

    private String retornaIpLocal() {
        InetAddress ia = null;
        try {
            ia = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO OBTER IP LOCAL, Verifique!! \n" + e, "Erro Entrada", JOptionPane.ERROR_MESSAGE);
        }
        return "entrada_serial_" + ia.getHostAddress() + "_" + ia.getHostName();
    }

    private boolean insereConfiguracaoParaGravacaoEntrada1() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        if (listConfig.isEmpty()) {
            IntConfiguracao c = new IntConfiguracao();
            c.setTipo(retornaIpLocal());
            c.setDescricao("Entrada em gravação na maquina");
            c.setDataCriacao(new Date(System.currentTimeMillis()));
            c.setDataAtualizacao(new Date(System.currentTimeMillis()));
            c.setValor(movEntrada.getCodmoventr());

            try {
                new IntConfiguracaoJpaController(managerIntegrador).create(c);
            } catch (Exception ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO CRIAR CONFIGURAÇÃO, Verifique!! \n" + ex, "Erro Entrada", JOptionPane.ERROR_MESSAGE);
            }
        } else if (listConfig.size() == 1) {
            for (IntConfiguracao config : listConfig) {
                config.setValor(movEntrada.getCodmoventr());
                config.setDataAtualizacao(new Date(System.currentTimeMillis()));
                try {
                    new IntConfiguracaoJpaController(managerIntegrador).edit(config);
                } catch (Exception ex) {
                    condicao = false;
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR CONFIGURAÇÃOO, Verifique!! \n" + ex, "Erro Entrada", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            int cont = 0;
            for (IntConfiguracao config : listConfig) {
                if (cont > 0) {
                    try {
                        new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
                    } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                        condicao = false;
                        JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separação", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        return condicao;
    }

    private void removeConfiguracao1() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        for (IntConfiguracao config : listConfig) {
            try {
                new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separação", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (condicao) {
            dispose();
            setVisible(false);
        }
    }

    private int quanPacote(Moventradaprod prodEnt) {
        int quantidade = prodEnt.getQuantidade().intValue();
        List<Unidade> listUn = queryCplus.resultPorUnidadeProduto(prodEnt.getCodprod().getUnidade());
        for (Unidade un : listUn) {
            if (un.getFatorconversao().intValue() > 1) {
                quantidade = quantidade / un.getFatorconversao().intValue();
            }
        }
        return quantidade;
    }

    private boolean verificaEntradaAberta1() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoPorValor(movEntrada.getCodmoventr());
        if (listConfig.size() > 1) {
            String ex = "";
            for (IntConfiguracao config : listConfig) {
                if (!config.getTipo().equals(retornaIpLocal())) {
                    ex = ex + config.getTipo() + "\n";
                }
            }
            JOptionPane.showMessageDialog(null, "A NOTA ESTÁ ABERTA EM OUTRA MAQUINA, Verifique!! \n" + ex, "Erro Separação", JOptionPane.ERROR_MESSAGE);
            condicao = false;
        }
        return condicao;
    }

    private void colorirLinha() {
        TableCellRenderer renderer = new ColorirTabelaEntradaSerial();
        for (int c = 0; c < jTableEntradaProd.getColumnCount(); c++) {
            jTableEntradaProd.setDefaultRenderer(jTableEntradaProd.getColumnClass(c), renderer);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EntradaSerialJFrame(managerCplus, managerIntegrador).setVisible(true);
            }
        });
    }

    //QuerySerial querySerial;
    private static EntityManagerFactory managerCplus;
    private final ListagemEntradasJDialog listagemEntradasJDialog;
    //private final ListagemUsuarioJDialog listagemUsuarioJDialog;
    private final ListagemSerialEntradaJDialog listagemSerialEntradaJDialog;
    private final EntradaSerialJDialog entradaSerialJDialog;
    private static EntityManagerFactory managerIntegrador;
    private final QueryCplus queryCplus;
    private final QueryIntegrador queryIntegrador;
    private Moventrada movEntrada;
    private Moventradaprod movEntradaProd;
    private int colunaCodMovProd;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEntradaDeSeriais;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonListaSerialEntrada;
    private javax.swing.JToggleButton jButtonListaSerialProduto;
    private javax.swing.JButton jButtonPesquisaEntrada;
    private javax.swing.JLabel jLabelStatusEntrada;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEntradaProd;
    // End of variables declaration//GEN-END:variables
}
