/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package integrador.separacao;

import entidade.cplus.Moventrada;
import entidade.cplus.Moventradaprod;
import entidade.cplus.Moventradaprodserial;
import entidade.cplus.Unidade;
import entidade.integrador.IntConfiguracao;
import acesso.ListagemUsuarioJDialog;
import janela.cplus.ListagemEntradasJDialog;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;
import integrador.render.RenderNumeroInteiro;
import integrador.render.RenderPreco;
import integrador.render.RenderSerialEntradaGreenRed;
import integrador.render.RenderSerialEntrada;
import java.awt.Color;
import java.awt.Toolkit;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.MoventradaprodJpaController;
import jpa.integrador.IntConfiguracaoJpaController;


/**
 *
 * @author leonardo
 */
public class EntradaSerialJFrame extends javax.swing.JFrame {

    /**
     * Creates new form EntradaSerialJFrame
     * @param managerCplus1
     * @param managerIntegrador1
     */
    public EntradaSerialJFrame(EntityManagerFactory managerCplus1, EntityManagerFactory managerIntegrador1) {
        initComponents();
        managerCplus = managerCplus1;
        managerIntegrador = managerIntegrador1;       
        this.listagemEntradasJDialog = new ListagemEntradasJDialog(this, true, managerCplus);
        this.listagemUsuarioJDialog = new ListagemUsuarioJDialog(this, true, managerCplus);
        this.entradaSerialJDialog = new EntradaSerialJDialog(this, true, managerCplus, managerIntegrador1);
        this.listagemSerialEntradaJDialog = new ListagemSerialEntradaJDialog(this, true, managerCplus);
        //querySerial = new QuerySerial(managerCplus);
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        queryCplus = new QueryCplus(managerCplus);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        colunaCodMovProd = jTableEntradaProdutos.getColumnModel().getColumnIndex("Codmoveprod");
        //new RenderNumeroInteiro();
        //new RenderPreco();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        cplusPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("cplusPU").createEntityManager();
        moventradaprodQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT p FROM Moventradaprod p WHERE p.codmoveprod =\"55555555\"");
        moventradaprodList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(moventradaprodQuery.getResultList());
        jButtonPesquisaEntrada = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEntradaProdutos = new javax.swing.JTable();
        jLabelStatusEntrada = new javax.swing.JLabel();
        jButtonEntradaDeSeriais = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jButtonListaSerialEntrada = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Seriais de Entrada");

        jButtonPesquisaEntrada.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisaEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisaEntrada.setText("Pesquisar Entrada");
        jButtonPesquisaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisaEntradaActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, moventradaprodList, jTableEntradaProdutos);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.codigo}"));
        columnBinding.setColumnName("Código");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.nomeprod}"));
        columnBinding.setColumnName("Nome Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantidade}"));
        columnBinding.setColumnName("Quantidade");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valorunitario}"));
        columnBinding.setColumnName("Valor Unit.");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valortotal}"));
        columnBinding.setColumnName("Valor Total");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${moventradaprodserialCollection}"));
        columnBinding.setColumnName("Seriais Entrada");
        columnBinding.setColumnClass(java.util.Collection.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod}"));
        columnBinding.setColumnName("Codmoveprod");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableEntradaProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEntradaProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEntradaProdutos);
        if (jTableEntradaProdutos.getColumnModel().getColumnCount() > 0) {
            jTableEntradaProdutos.getColumnModel().getColumn(0).setMinWidth(50);
            jTableEntradaProdutos.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTableEntradaProdutos.getColumnModel().getColumn(0).setMaxWidth(300);
            jTableEntradaProdutos.getColumnModel().getColumn(0).setCellRenderer(new RenderSerialEntradaGreenRed ());
            jTableEntradaProdutos.getColumnModel().getColumn(1).setMinWidth(100);
            jTableEntradaProdutos.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableEntradaProdutos.getColumnModel().getColumn(1).setMaxWidth(500);
            jTableEntradaProdutos.getColumnModel().getColumn(1).setCellRenderer(new RenderSerialEntradaGreenRed());
            jTableEntradaProdutos.getColumnModel().getColumn(2).setCellRenderer(new RenderNumeroInteiro());
            jTableEntradaProdutos.getColumnModel().getColumn(3).setCellRenderer(new RenderPreco());
            jTableEntradaProdutos.getColumnModel().getColumn(4).setCellRenderer(new RenderPreco());
            jTableEntradaProdutos.getColumnModel().getColumn(5).setCellRenderer(new RenderSerialEntrada ());
        }

        jLabelStatusEntrada.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        jButtonEntradaDeSeriais.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonEntradaDeSeriais.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/add.png"))); // NOI18N
        jButtonEntradaDeSeriais.setText("Entrada de Seriais");
        jButtonEntradaDeSeriais.setEnabled(false);
        jButtonEntradaDeSeriais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntradaDeSeriaisActionPerformed(evt);
            }
        });

        jButtonFechar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/stop.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jButtonListaSerialEntrada.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonListaSerialEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/info.png"))); // NOI18N
        jButtonListaSerialEntrada.setText("Lista Seriais Entrada");
        jButtonListaSerialEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListaSerialEntradaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonPesquisaEntrada)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(353, 353, 353)
                                .addComponent(jLabelStatusEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonListaSerialEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEntradaDeSeriais)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonFechar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelStatusEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonPesquisaEntrada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEntradaDeSeriais))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButtonListaSerialEntrada)))
                .addGap(0, 102, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisaEntradaActionPerformed
        pesquisarEntrada();
    }//GEN-LAST:event_jButtonPesquisaEntradaActionPerformed

    private void jTableEntradaProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEntradaProdutosMouseClicked
        verificaEntradaProdutoCompleta();
    }//GEN-LAST:event_jTableEntradaProdutosMouseClicked

    private void jButtonEntradaDeSeriaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntradaDeSeriaisActionPerformed
        this.entradaSerialJDialog.setProduto(movEntradaProd.getCodprod());
        this.entradaSerialJDialog.setListCodigo(queryCplus.listagemProdutoCodigo(movEntradaProd.getCodprod().getCodprod()));
        this.entradaSerialJDialog.setMovEntradaProd(movEntradaProd);
        this.entradaSerialJDialog.confereQuantidadeDigitada();
        this.entradaSerialJDialog.setVisible(true);
        verificaEntradaCompleta();
        verificaEntradaProdutoCompleta();
    }//GEN-LAST:event_jButtonEntradaDeSeriaisActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        removeConfiguracao();
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonListaSerialEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListaSerialEntradaActionPerformed
        if(jTableEntradaProdutos.getRowCount() > 0){
            this.listagemSerialEntradaJDialog.setMovEntrada(movEntrada);
            this.listagemSerialEntradaJDialog.setVisible(true);
        }
    }//GEN-LAST:event_jButtonListaSerialEntradaActionPerformed

    private void verificaEntradaProdutoCompleta() {
        jButtonEntradaDeSeriais.setEnabled(false);
        if (verificaEntradaAberta()) {
            colunaCodMovProd = jTableEntradaProdutos.getColumnModel().getColumnIndex("Codmoveprod");
            String codMovProd = jTableEntradaProdutos.getValueAt(jTableEntradaProdutos.getSelectedRow(), colunaCodMovProd).toString();
            movEntradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(codMovProd);
            if (movEntradaProd.getCodmoveprod() != null || !"".equals(movEntradaProd.getCodmoveprod())) {
                List<Moventradaprodserial> listSerial = queryCplus.listagemSerialEntradaProd(movEntradaProd.getCodmoveprod());
                if (quantidadeEntrada(movEntradaProd) != listSerial.size()) {
                    jButtonEntradaDeSeriais.setEnabled(true);
                } else {
                    moventradaprodList.clear();
                    List<Moventradaprod> moEntradaProduto = queryCplus.listagemMovEntradaProdPorEntrada(movEntrada.getCodmoventr());
                    for (Moventradaprod e : moEntradaProduto) {
                        moventradaprodList.add(e);
                    }
                    for (int cont = 0; cont < jTableEntradaProdutos.getRowCount(); cont++) {
                        if (movEntradaProd.getCodmoveprod() == jTableEntradaProdutos.getValueAt(cont, colunaCodMovProd)) {
                            jTableEntradaProdutos.setRowSelectionInterval(cont, cont);
                        }
                    }
                }
            }
        }
    }
    
     private void pesquisarEntrada() {
        moventradaprodList.clear();
        this.listagemEntradasJDialog.setVisible(true);
        if (this.listagemEntradasJDialog.isCancelamento() == false) {            
            movEntrada = this.listagemEntradasJDialog.getMovEntrada();
            List<Moventradaprod> moEntradaProduto = queryCplus.listagemMovEntradaProdPorEntrada(movEntrada.getCodmoventr());
            for (Moventradaprod e : moEntradaProduto) {
                moventradaprodList.add(e);
            }
            verificaEntradaCompleta();
        }//fim if pesquisa entrada cancelada
    }
     
     
    private void verificaEntradaCompleta(){
        List<Moventradaprodserial> listSerial = queryCplus.listagemSerialEntrada(movEntrada.getCodmoventr());
        List<Moventradaprod> listProdEntrada = queryCplus.listagemMovEntradaProdPorEntrada(movEntrada.getCodmoventr());
        int totalProdutos = 0;
        for(Moventradaprod prod : listProdEntrada){
            totalProdutos = totalProdutos + (quantidadeEntrada(prod));
        }
        if(listSerial.size() == totalProdutos){
            jLabelStatusEntrada.setForeground(Color.GREEN);
            jLabelStatusEntrada.setText("Entrada de Serial Completa");
            jButtonEntradaDeSeriais.setEnabled(false);
        }else{
            insereConfiguracaoParaGravacaoEntrada();           
            jLabelStatusEntrada.setForeground(Color.RED);
            jLabelStatusEntrada.setText("Entrada de Serial Incompleta");
        }
    }
    
    private String retornaIpLocal() {
        InetAddress ia = null;
        try {
            ia = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO OBTER IP LOCAL, Verifique!! \n" + e, "Erro Entrada", JOptionPane.ERROR_MESSAGE);
        }       
        return "entrada_serial_"+ia.getHostAddress()+"_"+ia.getHostName();
    }
    
    private boolean insereConfiguracaoParaGravacaoEntrada() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        if (listConfig.isEmpty()) {
            IntConfiguracao c = new IntConfiguracao();
            c.setTipo(retornaIpLocal());
            c.setDescricao("Entrada em gravação na maquina");
            c.setDataCriacao(new Date(System.currentTimeMillis()));
            c.setDataAtualizacao(new Date(System.currentTimeMillis()));
            c.setValor(movEntrada.getCodmoventr());
            
            try {
                new IntConfiguracaoJpaController(managerIntegrador).create(c);
            } catch (Exception ex) {
                condicao = false;
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO CRIAR CONFIGURAÇÃOO, Verifique!! \n" + ex, "Erro Entrada", JOptionPane.ERROR_MESSAGE);
            }
        } else if (listConfig.size() == 1) {
            for (IntConfiguracao config : listConfig) {
                config.setValor(movEntrada.getCodmoventr());
                config.setDataAtualizacao(new Date(System.currentTimeMillis()));
                try {
                    new IntConfiguracaoJpaController(managerIntegrador).edit(config);
                } catch (Exception ex) {
                    condicao = false;
                    JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR CONFIGURAÇÃOO, Verifique!! \n" + ex, "Erro Entrada", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            int cont = 0;
            for (IntConfiguracao config : listConfig) {
                if (cont > 0) {
                    try {
                        new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
                    } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                        condicao = false;
                        JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separação", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        return condicao;
    }
     
    private void removeConfiguracao() {
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoproTipoConfiguracao(retornaIpLocal());
        for (IntConfiguracao config : listConfig) {
            try {
                new IntConfiguracaoJpaController(managerIntegrador).destroy(config.getEntityId());
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EXCLUIR CONFIGURACAO, Verifique!! \n" + ex, "Erro Separação", JOptionPane.ERROR_MESSAGE);
            }
        }
        if(condicao){
            dispose();
            setVisible(false);
        }
    }
    
    private int quantidadeEntrada( Moventradaprod prodEnt){
       int quantidade = prodEnt.getQuantidade().intValue();
        List <Unidade> listUn = queryCplus.resultPorUnidadeProduto(prodEnt.getCodprod().getUnidade());
         for(Unidade un : listUn){
        if (un.getFatorconversao().intValue() > 1){
           quantidade = quantidade / un.getFatorconversao().intValue();
        }
         }
        return quantidade;
    }
    
    private boolean verificaEntradaAberta(){
        boolean condicao = true;
        List<IntConfiguracao> listConfig = queryIntegrador.listagemConfiguracaoPorValor(movEntrada.getCodmoventr());
        if(listConfig.size() > 1){
            String ex ="";
             for (IntConfiguracao config : listConfig) {
                 if(!config.getTipo().equals(retornaIpLocal())){
                 ex = ex + config.getTipo()+"\n";
                 }
             }
            JOptionPane.showMessageDialog(null, "A NOTA JÃ ESTÃ ABERTO EM OUTRA MAQUINA, Verifique!! \n" + ex, "Erro Separação", JOptionPane.ERROR_MESSAGE);
            condicao = false;
        }
        return condicao;
    }
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EntradaSerialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EntradaSerialJFrame(managerCplus, managerIntegrador).setVisible(true);
            }
        });
    }
    
    //QuerySerial querySerial;
    static EntityManagerFactory managerCplus;
    ListagemEntradasJDialog listagemEntradasJDialog;
    ListagemUsuarioJDialog listagemUsuarioJDialog;
    ListagemSerialEntradaJDialog listagemSerialEntradaJDialog;
    EntradaSerialJDialog entradaSerialJDialog;
    static EntityManagerFactory managerIntegrador;
    QueryCplus queryCplus;
    QueryIntegrador queryIntegrador;
    Moventrada movEntrada;
    Moventradaprod movEntradaProd;
    int colunaCodMovProd;   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager cplusPUEntityManager;
    private javax.swing.JButton jButtonEntradaDeSeriais;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonListaSerialEntrada;
    private javax.swing.JButton jButtonPesquisaEntrada;
    private javax.swing.JLabel jLabelStatusEntrada;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEntradaProdutos;
    private java.util.List<entidade.cplus.Moventradaprod> moventradaprodList;
    private javax.persistence.Query moventradaprodQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
