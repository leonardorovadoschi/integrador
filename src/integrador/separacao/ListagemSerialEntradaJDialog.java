/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integrador.separacao;

import entidade.cplus.Movendaprodserial;
import entidade.cplus.Moventrada;
import entidade.cplus.Moventradaprodserial;
import entidade.cplus.Orcamentoprodserial;
import entidade.cplus.Produtoserial;
import java.awt.Toolkit;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.MovendaprodserialJpaController;
import jpa.cplus.MoventradaprodserialJpaController;
import jpa.cplus.OrcamentoprodserialJpaController;
import jpa.cplus.ProdutoserialJpaController;
import jpa.cplus.exceptions.IllegalOrphanException;
import jpa.cplus.exceptions.NonexistentEntityException;
import query.cplus.QueryCplus;

/**
 *
 * @author leonardo
 */
public class ListagemSerialEntradaJDialog extends javax.swing.JDialog {

    /**
     * Creates new form ListagemSerialEntradaJDialog
     *
     * @param parent
     * @param modal
     * @param managerCplus1
     */
    public ListagemSerialEntradaJDialog(java.awt.Frame parent, boolean modal, EntityManagerFactory managerCplus1) {
        super(parent, modal);
        initComponents();
        managerCplus = managerCplus1;
        queryCplus = new QueryCplus(managerCplus);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        colunaCodMovProdSerial = jTableMovEntradaProdSerial.getColumnModel().getColumnIndex("Codmoventradaprodserial");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        cplusPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("cplusPU").createEntityManager();
        moventradaprodserialQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT ven FROM Moventradaprodserial ven WHERE ven.codprodutoserial.serial = \"555555555555\"");
        moventradaprodserialList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(moventradaprodserialQuery.getResultList());
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMovEntradaProdSerial = new javax.swing.JTable();
        jButtonAtualizarTabela = new javax.swing.JButton();
        jButtonEditarSerial = new javax.swing.JButton();
        jTextFieldSerial = new javax.swing.JTextField();
        jButtonExcluirSerial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listagem de Entradas Seriais");

        jTableMovEntradaProdSerial.setAutoCreateRowSorter(true);
        jTableMovEntradaProdSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableMovEntradaProdSerial.setColumnSelectionAllowed(true);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, moventradaprodserialList, jTableMovEntradaProdSerial);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.codprod.codigo}"));
        columnBinding.setColumnName("Código Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.codprod.nomeprod}"));
        columnBinding.setColumnName("Nome Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.serial}"));
        columnBinding.setColumnName("Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoventradaprodserial}"));
        columnBinding.setColumnName("Codmoventradaprodserial");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableMovEntradaProdSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMovEntradaProdSerialMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableMovEntradaProdSerial);
        jTableMovEntradaProdSerial.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableMovEntradaProdSerial.getColumnModel().getColumnCount() > 0) {
            jTableMovEntradaProdSerial.getColumnModel().getColumn(0).setMinWidth(20);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(0).setMaxWidth(350);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(1).setMinWidth(100);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(1).setMaxWidth(500);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(2).setMinWidth(50);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(2).setMaxWidth(250);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(3).setMinWidth(10);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(3).setPreferredWidth(20);
            jTableMovEntradaProdSerial.getColumnModel().getColumn(3).setMaxWidth(200);
        }

        jButtonAtualizarTabela.setText("Atualizar Tabela");
        jButtonAtualizarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarTabelaActionPerformed(evt);
            }
        });

        jButtonEditarSerial.setText("Editar Serial");
        jButtonEditarSerial.setEnabled(false);
        jButtonEditarSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarSerialActionPerformed(evt);
            }
        });

        jButtonExcluirSerial.setText("Excluir Serial");
        jButtonExcluirSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirSerialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAtualizarTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jTextFieldSerial)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonEditarSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonExcluirSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButtonAtualizarTabela)
                .addGap(63, 63, 63)
                .addComponent(jTextFieldSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonEditarSerial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExcluirSerial)
                .addContainerGap(253, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAtualizarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarTabelaActionPerformed
        atualizaTabela();
    }//GEN-LAST:event_jButtonAtualizarTabelaActionPerformed

    private void jTableMovEntradaProdSerialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMovEntradaProdSerialMouseClicked
        jButtonEditarSerial.setEnabled(true);
        jButtonExcluirSerial.setEnabled(true);
        colunaSerial = jTableMovEntradaProdSerial.getColumnModel().getColumnIndex("Serial");
        jTextFieldSerial.setText(jTableMovEntradaProdSerial.getValueAt(jTableMovEntradaProdSerial.getSelectedRow(), colunaSerial).toString());
    }//GEN-LAST:event_jTableMovEntradaProdSerialMouseClicked

    private void jButtonEditarSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarSerialActionPerformed
        int cancelar = JOptionPane.showConfirmDialog(null, "DESEJA EDITAR O SERIAL??", "Editar", JOptionPane.YES_NO_CANCEL_OPTION);
        if (cancelar == JOptionPane.YES_NO_OPTION) {//Verifica se ha uma linha selecionada
            if (!"".equals(jTextFieldSerial.getText())) {
                editaSerial();
                jButtonEditarSerial.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "O campo serial deve estar preenchido!! \n, Verifique!! \n", "Erro Editar", JOptionPane.ERROR_MESSAGE);
                jTextFieldSerial.requestFocus();
            }
        }
    }//GEN-LAST:event_jButtonEditarSerialActionPerformed

    private void jButtonExcluirSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirSerialActionPerformed
        if (jTableMovEntradaProdSerial.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar o serial para Excluir!!");
        } else {
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente Excluir o Serial Selecionado\n A AÇÃO NÃO PODE SER DISFEITA!!!", "Excluir", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                excluiSerial();
            }
        }
    }//GEN-LAST:event_jButtonExcluirSerialActionPerformed

    private void excluiSerial() {
        colunaSerial = jTableMovEntradaProdSerial.getColumnModel().getColumnIndex("Serial");
        String ser = jTableMovEntradaProdSerial.getValueAt(jTableMovEntradaProdSerial.getSelectedRow(), colunaSerial).toString();
        List<Produtoserial> listProdSerial = queryCplus.pesquisaSerialExato(ser);
        if (listProdSerial.size() < 1) {
            JOptionPane.showMessageDialog(null, "O serial " + ser + " Não existe, Verifique!!!");
        } else {
            for (Produtoserial proSer : listProdSerial) {
                List<Movendaprodserial> vendaSerial = queryCplus.listagemSaidaSerialExato(ser);
                if (vendaSerial.isEmpty()) {
                    //for (Movendaprodserial veSerial : vendaSerial) {
                    //    try {
                    //        new MovendaprodserialJpaController(managerCplus).destroy(veSerial.getCodmovendaprodserial());
                    //    } catch (NonexistentEntityException ex) {
                    //        JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir o Serial da Saída \n" + ex);
                    //   }
                    //}
                    //List<Moventradaprodserial> entradaSerial = queryCplus.listagemEntradaSerial(ser);
                    for (Moventradaprodserial entSer : proSer.getMoventradaprodserialCollection()) {
                        try {
                            new MoventradaprodserialJpaController(managerCplus).destroy(entSer.getCodmoventradaprodserial());
                        } catch (NonexistentEntityException ex) {
                            JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir Entrada Serial \n" + ex);
                        }
                    }//for
                    for (Orcamentoprodserial orSer : proSer.getOrcamentoprodserialCollection()) {
                        try {
                            new OrcamentoprodserialJpaController(managerCplus).destroy(orSer.getCodorcprodser());
                        } catch (NonexistentEntityException ex) {
                            JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir Orçamento Serial \n" + ex);
                        }
                    }//for
                    try {
                        new ProdutoserialJpaController(managerCplus).destroy(proSer.getCodprodutoserial());
                        atualizaTabela();
                    } catch (IllegalOrphanException | NonexistentEntityException ex) {
                        JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir Produto Serial \n" + ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "O serial " + ser + " Não pode ser Excluido pois já tem Saida, Verifique!!!");
                }//else
            }//for
        }//else
    }

    private void editaSerial() {
        String textoDigitado = jTextFieldSerial.getText().toUpperCase().trim();
        List<Produtoserial> produtoSerial = queryCplus.pesquisaSerialExato(textoDigitado);
        if (produtoSerial.isEmpty()) {
            colunaCodMovProdSerial = jTableMovEntradaProdSerial.getColumnModel().getColumnIndex("Codmoventradaprodserial");
            int row = jTableMovEntradaProdSerial.getSelectedRow();
            Moventradaprodserial prodSerial = new MoventradaprodserialJpaController(managerCplus).findMoventradaprodserial(jTableMovEntradaProdSerial.getValueAt(row, colunaCodMovProdSerial).toString());
            Produtoserial serial = new ProdutoserialJpaController(managerCplus).findProdutoserial(prodSerial.getCodprodutoserial().getCodprodutoserial());
            serial.setSerial(textoDigitado);
            try {
                new ProdutoserialJpaController(managerCplus).edit(serial);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "HOUVE UM ERRO AO EDITAR SERIAL, Verifique!! \n" + ex, "Erro Editar", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "ESTE SERIAL Jï¿½ ESTA CADASTRADO!! \n, Verifique!! \n", "Erro Editar", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void atualizaTabela() {
         jButtonEditarSerial.setEnabled(false);
        jButtonExcluirSerial.setEnabled(false);
        moventradaprodserialList.clear();
        List<Moventradaprodserial> listSerial = queryCplus.listagemSerialEntrada(movEntrada.getCodmoventr());
        for (Moventradaprodserial prodserial : listSerial) {
            moventradaprodserialList.add(prodserial);
        }
    }

    public void setMovEntrada(Moventrada movEntrada) {
        this.movEntrada = movEntrada;
        atualizaTabela();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListagemSerialEntradaJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListagemSerialEntradaJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListagemSerialEntradaJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListagemSerialEntradaJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ListagemSerialEntradaJDialog dialog = new ListagemSerialEntradaJDialog(new javax.swing.JFrame(), true, managerCplus);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    static EntityManagerFactory managerCplus;
    QueryCplus queryCplus;
    Moventrada movEntrada;
    int colunaCodMovProdSerial;
    int colunaSerial;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager cplusPUEntityManager;
    private javax.swing.JButton jButtonAtualizarTabela;
    private javax.swing.JButton jButtonEditarSerial;
    private javax.swing.JButton jButtonExcluirSerial;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMovEntradaProdSerial;
    private javax.swing.JTextField jTextFieldSerial;
    private java.util.List<entidade.cplus.Moventradaprodserial> moventradaprodserialList;
    private javax.persistence.Query moventradaprodserialQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
