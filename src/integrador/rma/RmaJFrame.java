/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integrador.rma;

import entidade.cplus.Calculoicmsestado;
import entidade.cplus.Cliente;
import entidade.cplus.Fornecedor;
import entidade.cplus.Movenda;
import entidade.cplus.Movendaprod;
import entidade.cplus.Moventrada;
import entidade.cplus.Moventradaprod;
import entidade.cplus.Produto;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Tipomovimento;
import entidade.cplus.Usuario;
import entidade.integrador.EntradaSerial;
import entidade.integrador.SaidaSerial;
import entidade.integrador.SerialProduto;
import integrador.separacao.ColorirLinhaImpar;
import janela.cplus.FormataCampos;
import janela.cplus.ListagemClientesJDialog;
import janela.cplus.ListagemEntradasJDialog;
import janela.cplus.ListagemFornecedorJDialog;
import janela.cplus.ListagemOperacaoJDialog;
import janela.cplus.ListagemProdutoJDialog;
import janela.cplus.ListagemSaidasJDialog;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import jpa.cplus.CalculoicmsestadoJpaController;
import jpa.cplus.MovendaJpaController;
import jpa.cplus.MovendaprodJpaController;
import jpa.cplus.MoventradaJpaController;
import jpa.cplus.MoventradaprodJpaController;
import jpa.cplus.TipomovimentoJpaController;
import jpa.cplus.exceptions.NonexistentEntityException;
import jpa.integrador.EntradaSerialJpaController;
import jpa.integrador.SaidaSerialJpaController;
import jpa.integrador.SerialProdutoJpaController;
import produto.ProdutoCplusDigimacro;
import query.cplus.QueryCplus;
import query.integrador.QueryIntegrador;

/**
 *
 * @author leonardo
 */
public class RmaJFrame extends javax.swing.JFrame {

    /**
     * Creates new form RmaJFrame
     *
     * @param managerPrestaShop1
     * @param managerCplus1
     * @param managerIntegrador1
     * @param usuario
     */
    public RmaJFrame(EntityManagerFactory managerPrestaShop1, EntityManagerFactory managerCplus1, EntityManagerFactory managerIntegrador1, Usuario usuario) {
        initComponents();

        managerCplus = managerCplus1;
        managerIntegrador = managerIntegrador1;
        managerPrestaShop = managerPrestaShop1;
        user = usuario;
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        queryCplus = new QueryCplus(managerCplus);
        formatacaoDeCampos = new FormataCampos();
        this.listagemEntradasJDialog = new ListagemEntradasJDialog(this, true, managerCplus);
        this.listagemSaidasJDialog = new ListagemSaidasJDialog(this, true, managerCplus);
        //this.numeroNotaJDialog = new NumeroNotaJDialog(this, true);
        this.listagemClientesJDialog = new ListagemClientesJDialog(this, true, managerCplus);
        this.listagemOperacaoJDialog = new ListagemOperacaoJDialog(this, true, managerCplus);
        this.listagemFornecedorJDialog = new ListagemFornecedorJDialog(this, true, managerCplus);
        this.listagemProdutoJDialog = new ListagemProdutoJDialog(this, rootPaneCheckingEnabled, managerCplus);
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        clienteCupom = queryIntegrador.valorConfiguracao("cliente_CODIGO_PARA_CUPOM");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("integradorPU").createEntityManager();
        serialProdutoQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT ven FROM SerialProduto ven WHERE ven.serial =9999999999");
        serialProdutoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(serialProdutoQuery.getResultList());
        jPanelPesquisa = new javax.swing.JPanel();
        jComboBoxTermoPesquisa = new javax.swing.JComboBox();
        jTextFieldArgumentoPesquisa = new javax.swing.JTextField();
        jButtonPesquisar = new javax.swing.JButton();
        jScrollPaneProdutoSerial = new javax.swing.JScrollPane();
        jTableProdutoSerial = new javax.swing.JTable();
        jPanelListagemEntradas = new javax.swing.JPanel();
        jScrollPaneListagemEntradas = new javax.swing.JScrollPane();
        jTableEntradaSerial = new javax.swing.JTable();
        jPanelListagemSaidas = new javax.swing.JPanel();
        jScrollPaneListagemSaidas = new javax.swing.JScrollPane();
        jTableSaidaSerial = new javax.swing.JTable();
        jPanelManutencaoSerial = new javax.swing.JPanel();
        jLabelOqueDesejafazer = new javax.swing.JLabel();
        jComboBoxManutencao = new javax.swing.JComboBox();
        jCheckBoxDevolucao = new javax.swing.JCheckBox();
        jButtonExecutar = new javax.swing.JButton();
        jLabelEstoqueDisponivelCplus = new javax.swing.JLabel();
        jTextFieldEstoqueCplus = new javax.swing.JTextField();
        jPanelManutençãoSerial = new javax.swing.JPanel();
        jButtonEditarSerial = new javax.swing.JButton();
        jButtonExcluiSerial = new javax.swing.JButton();
        jButtonExcluiEntradaSerial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenção de RMA");

        jPanelPesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa"));
        jPanelPesquisa.setToolTipText("");

        jComboBoxTermoPesquisa.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBoxTermoPesquisa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Serial", "Nota Entrada", "Listagem Saida", "Produto" }));
        jComboBoxTermoPesquisa.setToolTipText("Selecione aqui o tipo da pesquisa que desejar!");
        jComboBoxTermoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTermoPesquisaActionPerformed(evt);
            }
        });

        jTextFieldArgumentoPesquisa.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldArgumentoPesquisa.setToolTipText("Informe o termo a ser pesquisado!");
        jTextFieldArgumentoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldArgumentoPesquisaActionPerformed(evt);
            }
        });

        jButtonPesquisar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPesquisaLayout = new javax.swing.GroupLayout(jPanelPesquisa);
        jPanelPesquisa.setLayout(jPanelPesquisaLayout);
        jPanelPesquisaLayout.setHorizontalGroup(
            jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxTermoPesquisa, 0, 297, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldArgumentoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelPesquisaLayout.setVerticalGroup(
            jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                .addGroup(jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTermoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldArgumentoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPesquisar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableProdutoSerial.setAutoCreateRowSorter(true);
        jTableProdutoSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableProdutoSerial.setColumnSelectionAllowed(true);
        jTableProdutoSerial.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, serialProdutoList, jTableProdutoSerial);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idSerial}"));
        columnBinding.setColumnName("Id Serial");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomeProduto}"));
        columnBinding.setColumnName("Nome Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${serial}"));
        columnBinding.setColumnName("Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoProduto}"));
        columnBinding.setColumnName("Codigo Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codProduto}"));
        columnBinding.setColumnName("Cod Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableProdutoSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutoSerialMouseClicked(evt);
            }
        });
        jScrollPaneProdutoSerial.setViewportView(jTableProdutoSerial);
        jTableProdutoSerial.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTableProdutoSerial.getColumnModel().getColumnCount() > 0) {
            jTableProdutoSerial.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTableProdutoSerial.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableProdutoSerial.getColumnModel().getColumn(2).setPreferredWidth(140);
            jTableProdutoSerial.getColumnModel().getColumn(3).setPreferredWidth(120);
        }

        jPanelListagemEntradas.setBorder(javax.swing.BorderFactory.createTitledBorder("listagem de Entradas Serial"));

        jTableEntradaSerial.setAutoCreateRowSorter(true);
        jTableEntradaSerial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Entrada Serial", "Nome", "Data", "CPF/CNPJ", "Num Nota", "Operação"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEntradaSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableEntradaSerial.getTableHeader().setReorderingAllowed(false);
        jTableEntradaSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEntradaSerialMouseClicked(evt);
            }
        });
        jScrollPaneListagemEntradas.setViewportView(jTableEntradaSerial);
        if (jTableEntradaSerial.getColumnModel().getColumnCount() > 0) {
            jTableEntradaSerial.getColumnModel().getColumn(1).setPreferredWidth(340);
            jTableEntradaSerial.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableEntradaSerial.getColumnModel().getColumn(3).setPreferredWidth(120);
            jTableEntradaSerial.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTableEntradaSerial.getColumnModel().getColumn(5).setPreferredWidth(300);
        }

        javax.swing.GroupLayout jPanelListagemEntradasLayout = new javax.swing.GroupLayout(jPanelListagemEntradas);
        jPanelListagemEntradas.setLayout(jPanelListagemEntradasLayout);
        jPanelListagemEntradasLayout.setHorizontalGroup(
            jPanelListagemEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemEntradas)
        );
        jPanelListagemEntradasLayout.setVerticalGroup(
            jPanelListagemEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemEntradas, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );

        jPanelListagemSaidas.setBorder(javax.swing.BorderFactory.createTitledBorder("Listagem de Saídas Serial"));

        jTableSaidaSerial.setAutoCreateRowSorter(true);
        jTableSaidaSerial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id Saida Serial", "Nome", "Data", "CPF/CNPJ", "Num Pedido", "Operaçao"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSaidaSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableSaidaSerial.getTableHeader().setReorderingAllowed(false);
        jTableSaidaSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSaidaSerialMouseClicked(evt);
            }
        });
        jScrollPaneListagemSaidas.setViewportView(jTableSaidaSerial);
        if (jTableSaidaSerial.getColumnModel().getColumnCount() > 0) {
            jTableSaidaSerial.getColumnModel().getColumn(1).setPreferredWidth(360);
            jTableSaidaSerial.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableSaidaSerial.getColumnModel().getColumn(3).setPreferredWidth(120);
            jTableSaidaSerial.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTableSaidaSerial.getColumnModel().getColumn(5).setPreferredWidth(300);
        }

        javax.swing.GroupLayout jPanelListagemSaidasLayout = new javax.swing.GroupLayout(jPanelListagemSaidas);
        jPanelListagemSaidas.setLayout(jPanelListagemSaidasLayout);
        jPanelListagemSaidasLayout.setHorizontalGroup(
            jPanelListagemSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemSaidas)
        );
        jPanelListagemSaidasLayout.setVerticalGroup(
            jPanelListagemSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemSaidas, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );

        jPanelManutencaoSerial.setBorder(javax.swing.BorderFactory.createTitledBorder("Manutencao Serial"));

        jLabelOqueDesejafazer.setText("O que deseja fazer?");

        jComboBoxManutencao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBoxManutencao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Entrada Cliente Produto COM Defeito", "Entrada Cliente Produto SEM Defeito", "Produto com defeito do Fornecedor" }));
        jComboBoxManutencao.setToolTipText("Selecione qual o tipo de RMA a ser feito");

        jCheckBoxDevolucao.setText("Devolução pelo Cliente");

        jButtonExecutar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonExecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/play.png"))); // NOI18N
        jButtonExecutar.setText("Executar");
        jButtonExecutar.setToolTipText("Sera executado o processo de RMA");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jLabelEstoqueDisponivelCplus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEstoqueDisponivelCplus.setText("Estoque Disp. C-Plus:");

        jTextFieldEstoqueCplus.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanelManutencaoSerialLayout = new javax.swing.GroupLayout(jPanelManutencaoSerial);
        jPanelManutencaoSerial.setLayout(jPanelManutencaoSerialLayout);
        jPanelManutencaoSerialLayout.setHorizontalGroup(
            jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                .addComponent(jLabelOqueDesejafazer, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                        .addComponent(jComboBoxManutencao, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addComponent(jLabelEstoqueDisponivelCplus, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jTextFieldEstoqueCplus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(327, 327, 327))
        );
        jPanelManutencaoSerialLayout.setVerticalGroup(
            jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                        .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOqueDesejafazer)
                            .addComponent(jComboBoxManutencao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExecutar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxDevolucao))
                    .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEstoqueDisponivelCplus)
                        .addComponent(jTextFieldEstoqueCplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanelManutençãoSerial.setBorder(javax.swing.BorderFactory.createTitledBorder("Manutenção Serial"));

        jButtonEditarSerial.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonEditarSerial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Edit.png"))); // NOI18N
        jButtonEditarSerial.setText("Editar Serial");
        jButtonEditarSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarSerialActionPerformed(evt);
            }
        });

        jButtonExcluiSerial.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonExcluiSerial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/delete.png"))); // NOI18N
        jButtonExcluiSerial.setText("Excluir Serial da Saída");
        jButtonExcluiSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluiSerialActionPerformed(evt);
            }
        });

        jButtonExcluiEntradaSerial.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonExcluiEntradaSerial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/delete.png"))); // NOI18N
        jButtonExcluiEntradaSerial.setText("Excluir Serial Entrada");
        jButtonExcluiEntradaSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluiEntradaSerialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelManutençãoSerialLayout = new javax.swing.GroupLayout(jPanelManutençãoSerial);
        jPanelManutençãoSerial.setLayout(jPanelManutençãoSerialLayout);
        jPanelManutençãoSerialLayout.setHorizontalGroup(
            jPanelManutençãoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutençãoSerialLayout.createSequentialGroup()
                .addGroup(jPanelManutençãoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExcluiSerial, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jButtonEditarSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExcluiEntradaSerial, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelManutençãoSerialLayout.setVerticalGroup(
            jPanelManutençãoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutençãoSerialLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jButtonExcluiEntradaSerial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditarSerial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExcluiSerial))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelListagemSaidas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelListagemEntradas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelManutencaoSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneProdutoSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelManutençãoSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneProdutoSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanelManutençãoSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelManutencaoSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelListagemEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelListagemSaidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldArgumentoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldArgumentoPesquisaActionPerformed
        tipoDePesquisa();
    }//GEN-LAST:event_jTextFieldArgumentoPesquisaActionPerformed

    private void jTableProdutoSerialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutoSerialMouseClicked
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        serial = jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaSerial).toString();
        for (SerialProduto ser : queryIntegrador.listSerialExato(serial)) {
            carregaTabelaEntradaSerial(ser);
            mostraEstoque(ser.getCodProduto());
        }
        //mostraEstoque(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaCodProd).toString());
    }//GEN-LAST:event_jTableProdutoSerialMouseClicked

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        tipoDePesquisa();
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        decisaoRma();
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonEditarSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarSerialActionPerformed
        if (jTableProdutoSerial.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar o serial para editar!!");
        } else {
            editaSerialCadastrado();
        }

    }//GEN-LAST:event_jButtonEditarSerialActionPerformed

    private void jComboBoxTermoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTermoPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTermoPesquisaActionPerformed

    private void jButtonExcluiSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluiSerialActionPerformed
        if (jTableProdutoSerial.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Saida Serial para Excluir!!");
        } else if (jTableSaidaSerial.getSelectedRow() != -1 || jTableSaidaSerial.getRowCount() == 0) {
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente Excluir o Serial Selecionado\n A AÇÃO NÃO PODE SER DISFEITA!!!", "Excluir", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                excluiSaidaSerial();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Saida Serial!!! ");
        }
    }//GEN-LAST:event_jButtonExcluiSerialActionPerformed

    private void jTableEntradaSerialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEntradaSerialMouseClicked
        int colIdEnt = jTableEntradaSerial.getColumnModel().getColumnIndex("Id Entrada Serial");
        int id = Integer.valueOf(jTableEntradaSerial.getValueAt(jTableEntradaSerial.getSelectedRow(), colIdEnt).toString());
        EntradaSerial ent = new EntradaSerialJpaController(managerIntegrador).findEntradaSerial(id);
        entrada = new MoventradaJpaController(managerCplus).findMoventrada(ent.getCodEntrada());
        entradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(ent.getCodEntradaProd());
    }//GEN-LAST:event_jTableEntradaSerialMouseClicked

    private void jTableSaidaSerialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSaidaSerialMouseClicked
        int colIdSaida = jTableSaidaSerial.getColumnModel().getColumnIndex("id Saida Serial");
        int id = Integer.valueOf(jTableSaidaSerial.getValueAt(jTableSaidaSerial.getSelectedRow(), colIdSaida).toString());
        SaidaSerial sai = new SaidaSerialJpaController(managerIntegrador).findSaidaSerial(id);
        venda = new MovendaJpaController(managerCplus).findMovenda(sai.getCodSaida());
        vendaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(sai.getCodSaidaProd());
    }//GEN-LAST:event_jTableSaidaSerialMouseClicked

    private void jButtonExcluiEntradaSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluiEntradaSerialActionPerformed
        if (jTableProdutoSerial.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Seriais Excluir!!");
        } else if (jTableProdutoSerial.getSelectedRow() != -1 || jTableProdutoSerial.getRowCount() == 0) {
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente Excluir o Serial Selecionado\n A AÇÃO NÃO PODE SER DISFEITA!!!", "Excluir", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                excluiEntradaSerial();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Seriais!!! ");
        }
    }//GEN-LAST:event_jButtonExcluiEntradaSerialActionPerformed

    private void limpaTabelas() {
        while (jTableEntradaSerial.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableEntradaSerial.getModel()).removeRow(0);
        }

        while (jTableSaidaSerial.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableSaidaSerial.getModel()).removeRow(0);
        }
    }

    private void carregaTabelaEntradaSerial(SerialProduto serial) {
        // List<Moventradaprod> moEntradaProduto = queryCplus.listagemMovEntradaProdPorEntrada(movEntrada.getCodmoventr());
        DefaultTableModel tab = (DefaultTableModel) jTableEntradaSerial.getModel();
        while (jTableEntradaSerial.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableEntradaSerial.getModel()).removeRow(0);
        }
        for (EntradaSerial e : serial.getEntradaSerialCollection()) {
            //int comp = queryIntegrador.listPorEntradaProd(e.getCodmoveprod()).size();          
            String txt = "";
            String CNPJ = "";
            entrada = new MoventradaJpaController(managerCplus).findMoventrada(e.getCodEntrada());
            if (entrada == null) {
                Moventrada ent = new Moventrada();
                ent.setData(formatacaoDeCampos.dataAtual());
                ent.setNumnota(0);
                ent.setCodtipomovimento(new TipomovimentoJpaController(managerCplus).findTipomovimento("000000001"));
                entrada = ent;
            }
            entradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(e.getCodEntradaProd());
            if (entrada.getCodForn() != null) {
                txt = entrada.getCodForn().getNomeforn();
                CNPJ = formatacaoDeCampos.mascaraCNPJ(entrada.getCodForn().getCnpj());
            } else if (entrada.getCodcli() != null) {
                txt = entrada.getCodcli().getNomecli();
                CNPJ = cpfCnpj(entrada.getCodcli());
            }
            tab.addRow(new Object[]{e.getIdEntradaSerial(), txt, formatacaoDeCampos.dataStringSoData(entrada.getData(), 0), CNPJ, entrada.getNumnota(), entrada.getCodtipomovimento().getNometipomovimento()});
            //corLinha(comp);
        }
        DefaultTableModel tab1 = (DefaultTableModel) jTableSaidaSerial.getModel();
        while (jTableSaidaSerial.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTableSaidaSerial.getModel()).removeRow(0);
        }
        for (SaidaSerial s : serial.getSaidaSerialCollection()) {
            //venda = new MovendaJpaController(managerCplus).findMovenda(e.getCodSaida());
            String txt = "";
            String CNPJ = "";
            venda = new MovendaJpaController(managerCplus).findMovenda(s.getCodSaida());
            vendaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(s.getCodSaidaProd());
            if (venda.getCodForn() != null) {
                txt = venda.getCodForn().getNomeforn();
                CNPJ = formatacaoDeCampos.mascaraCNPJ(venda.getCodForn().getCnpj());
            } else if (venda.getCodcli() != null) {
                txt = venda.getCodcli().getNomecli();
                CNPJ = cpfCnpj(venda.getCodcli());
            }
            tab1.addRow(new Object[]{s.getIdSaidaSerial(), txt, new FormataCampos().dataStringSoData(venda.getData(), 0), CNPJ, venda.getNumped(), venda.getCodtipomovimento().getNometipomovimento()});
        }
    }

    private String cpfCnpj(Cliente clienteCplus) {
        String str;
        if ("N".equals(clienteCplus.getFlagfisica().toString())) {
            //str = clienteCplus.getCnpj();
            str = new FormataCampos().mascaraCNPJ(clienteCplus.getCnpj());
        } else {
            //  str = new FormataCampos().mascaraCPF(clienteCplus.getCpf());
            str = new FormataCampos().mascaraCPF(clienteCplus.getCpf());

        }
        return str;
    }

    private void excluiEntradaSerial() {
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        String ser = jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaSerial).toString();
        List<SerialProduto> listProdSerial = queryIntegrador.listSerialExato(ser);
        if (listProdSerial.size() < 1) {
            JOptionPane.showMessageDialog(null, "O serial " + ser + " Não existe, Verifique!!!");
        } else {
            for (SerialProduto proSer : listProdSerial) {
                //List<Movendaprodserial> vendaSerial = queryCplus.listagemSaidaSerialExato(ser);
                for (EntradaSerial veSerial : proSer.getEntradaSerialCollection()) {
                    try {
                        new EntradaSerialJpaController(managerIntegrador).destroy(veSerial.getIdEntradaSerial());

                    } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao excluir o serial da Entrada!! \n" + ex);
                    }
                }
                try {
                    new SerialProdutoJpaController(managerIntegrador).destroy(proSer.getIdSerial());
                } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                    JOptionPane.showMessageDialog(null, "Houve um erro ao excluir o Serial Produto!! \n" + ex);
                }
                tipoDePesquisa();
            }//for
        }//else
    }

    private void excluiSaidaSerial() {
        int colunaId = jTableSaidaSerial.getColumnModel().getColumnIndex("id Saida Serial");
        Integer id = Integer.valueOf(jTableSaidaSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaId).toString());
        List<SaidaSerial> listProdSerial = queryIntegrador.listPorSaida(id);
        //List<Movendaprodserial> vendaSerial = queryCplus.listagemSaidaSerialExato(ser);
        for (SaidaSerial veSerial : listProdSerial) {
            try {
                new SaidaSerialJpaController(managerIntegrador).destroy(veSerial.getIdSaidaSerial());
                tipoDePesquisa();
            } catch (jpa.integrador.exceptions.NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "Houve um erro ao excluir o serial da saida!! \n" + ex);
            }
        }
    }

    private void editaSerialCadastrado() {
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        int row = jTableProdutoSerial.getSelectedRow();
        String serialNovo = jTableProdutoSerial.getValueAt(row, colunaSerial).toString();
        serialNovo = JOptionPane.showInputDialog("Digite o Serial novo! ", serialNovo);
        if (!"".equals(serialNovo) && serialNovo != null) {
            serialNovo = serialNovo.toUpperCase();
            List<SerialProduto> listProdSerialNovo = queryIntegrador.listSerialExato(serialNovo);
            if (listProdSerialNovo.isEmpty()) {
                List<SerialProduto> listProdSerialAntigo = queryIntegrador.listSerialExato(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaSerial).toString());
                for (SerialProduto serialAntigo : listProdSerialAntigo) {
                    serialAntigo.setSerial(serialNovo);
                    try {
                        new SerialProdutoJpaController(managerIntegrador).edit(serialAntigo);
                        JOptionPane.showMessageDialog(null, "Serial editado com sucesso!!");
                        jTextFieldArgumentoPesquisa.setText(serialNovo);
                        jTableProdutoSerial.setValueAt(serialNovo, row, colunaSerial);
                       // tipoDePesquisa();
                    } catch (NonexistentEntityException ex) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao editar o serial! \n!!" + ex);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao editar o serial! \n!!" + ex);
                    }
                }//FIM FOR QUE LISTA O SERIAL ANTIGO
            } else {//IF QUE VERIFICA SE NOVO SERIAL JÁ ESTÁ CADASTRADO NO BANCO
                JOptionPane.showMessageDialog(null, "O serial " + serialNovo + " Já está cadastrado, Verifique!!!");
            }
        } else {//FIM IF QUR VERIFICA SE NOVO SERIAL DIGITADO É NULLO
            if ("".equals(serialNovo)) {
                JOptionPane.showMessageDialog(null, "O serial Novo deve ser digitado!!");
            }
        }
    }

    private void mostraEstoque(String codProduto) {
        for (Produtoestoque estoque : queryCplus.listEstoquesPorProd(codProduto)) {
            double disponivel;
            double resOS = estoque.getReservadoos().doubleValue();
            double resOrcamento = estoque.getReservadoorcamento().doubleValue();
            double estoquAtual = estoque.getEstatu().doubleValue();
            disponivel = estoquAtual - resOS - resOrcamento;
            jTextFieldEstoqueCplus.setText(formatacaoDeCampos.bigDecimalParaString(new BigDecimal(disponivel), 0));
        }

    }

    /**
     * Função que atualiza o estoque no magento pelo codProduto da tabela
     * ProdutoSerial
     */
    private void atualizaEstoque(Produto prod) {
        //List<Produto> listProd = queryCplus.listProdutoSerial(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaCodProd).toString());
        //for (Produto prod : listProd) {
        new ProdutoCplusDigimacro().produtoCplusDigimacro(managerIntegrador, managerCplus, managerPrestaShop, prod);
        //}
    }

    private void decisaoRma() {
        switch (jComboBoxManutencao.getSelectedIndex()) {
            case 0:
                if (jTableSaidaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Saidas serial!!! ");
                } else if (jTableEntradaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
                } else {
                    if (entradaCliente() == false) {
                        if (saidaFornecedor(false) == false) {
                            if (jCheckBoxDevolucao.isSelected() == false) {
                                saidaClienteRma(true);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Houve um erro ao gravar saida Fornecedor verifique!!!! ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao gravar entrada cliente verifique!!!! ");
                    }
                    tipoDePesquisa();//pesquisa novamente
                }
                break;
            case 1:
                if (jTableSaidaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Saidas serial!!! ");
                } else if (jTableEntradaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
                } else {
                    if (entradaCliente() == false) {
                        if (jCheckBoxDevolucao.isSelected() == false) {
                            saidaClienteRma(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao gravar entrada cliente verifique!!!! ");
                    }
                    tipoDePesquisa();//pesquisa novamente
                }
                break;
            case 2:
                if (jTableEntradaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
                } else {
                    if (saidaFornecedor(true) == true) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao gravar saida Fornecedor verifique!!!! ");
                    }
                    tipoDePesquisa();//pesquisa novamente
                }
                break;
        }
        //jTextFieldArgumentoPesquisa.setText("");
    }

    /**
     * Essa função cria a saida para fornecedor no caso produtos com defeito
     *
     * @return false caso não haja erros
     */
    private boolean saidaFornecedor(boolean controlaEstoque) {
        boolean cancelaSaidaFornecedor = false;
        Tipomovimento movimentoSaidaFornecedor = null;
        Fornecedor fornecedor = null;
        Calculoicmsestado calculoIcmsEstado = null;
        String nomeFornecedor = "";
        // String codMovProdEntrada = "";
        //Moventradaprod entradaProd = new Moventradaprod();
        //int idEnt = Integer.valueOf(jTableEntradaSerial.getValueAt(jTableEntradaSerial.getSelectedRow(), jTableEntradaSerial.getColumnModel().getColumnIndex("CId Entrada Serial")).toString());
        //for(EntradaSerial entSer : queryIntegrador.listPorIdEntradaProd(idEnt)){
        // localização da entrada do produto
        do {//licalização calculo ICMS por estado 
            //colunaMovProdutoEntrada = jTableEntradaSerial.getColumnModel().getColumnIndex("CodMovProdutoEntrada");
            //codMovProdEntrada = jTableEntradaSerial.getValueAt(jTableEntradaSerial.getSelectedRow(), colunaMovProdutoEntrada).toString();

            //entradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(entSer.getCodEntradaProd());
            cancelaSaidaFornecedor = false;
            //colunaNomeFornecedorEntrada = jTableEntradaSerial.getColumnModel().getColumnIndex("Nome");
            nomeFornecedor = jTableEntradaSerial.getValueAt(jTableEntradaSerial.getSelectedRow(), jTableEntradaSerial.getColumnModel().getColumnIndex("Nome")).toString();
            if (!"".equals(nomeFornecedor)) {
                this.listagemFornecedorJDialog.setTermoPesquisa(nomeFornecedor);
                this.listagemFornecedorJDialog.listarFornecedorPorNome();
            }
            this.listagemFornecedorJDialog.setVisible(true);
            if (this.listagemFornecedorJDialog.isCancelamento() == false) {
                fornecedor = this.listagemFornecedorJDialog.getFornecedor();
            } else {
                cancelaSaidaFornecedor = true;
            }
            if (cancelaSaidaFornecedor == false) {
                //localização da Operação
                if (jCheckBoxDevolucao.isSelected()) {
                    this.listagemOperacaoJDialog.setDevolucao(true);
                } else {
                    this.listagemOperacaoJDialog.setDevolucao(false);
                }
                this.listagemOperacaoJDialog.setInativo(false);
                this.listagemOperacaoJDialog.setCliente(false);
                this.listagemOperacaoJDialog.setTipoMovimento("S");
                this.listagemOperacaoJDialog.pesquisas();
                this.listagemOperacaoJDialog.setVisible(true);
                if (this.listagemOperacaoJDialog.isCancelamento() == false) {
                    movimentoSaidaFornecedor = this.listagemOperacaoJDialog.getMovimento();
                } else {
                    cancelaSaidaFornecedor = true;
                }
            }
            if (cancelaSaidaFornecedor == false) {
                List<Calculoicmsestado> listIcmsPorEstado;
                String cfop = "";
                if ("RS".equals(fornecedor.getEstado())) {
                    if ("Y".equals(movimentoSaidaFornecedor.getFlagdevolucao().toString())) {
                        if ("1102".equals(entradaProd.getCodcfop().getCodcfop())) {
                            cfop = "5202";
                        } else {
                            cfop = "5411";
                        }
                    } else {
                        cfop = movimentoSaidaFornecedor.getCodcfopdentrouf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", fornecedor.getEstado(), cfop, entradaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                } else {
                    if ("Y".equals(movimentoSaidaFornecedor.getFlagdevolucao().toString())) {
                        if ("2102".equals(entradaProd.getCodcfop().getCodcfop())) {
                            cfop = "6202";
                        } else {
                            cfop = "6411";
                        }
                    } else {
                        cfop = movimentoSaidaFornecedor.getCodcfopforauf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", fornecedor.getEstado(), cfop, entradaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                }
                if (listIcmsPorEstado.size() == 1) {
                    for (Calculoicmsestado cal : listIcmsPorEstado) {
                        calculoIcmsEstado = new CalculoicmsestadoJpaController(managerCplus).findCalculoicmsestado(cal.getCodcalculoicmsestado());;
                        cancelaSaidaFornecedor = false;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não foi Possivel localizar o Calculo ICMS para o Estado " + fornecedor.getEstado() + " Como a CFOP " + cfop
                            + "\n Acerte o calculo antes de Proseguir!! \n resultados encontrados: " + listIcmsPorEstado.size());
                    cancelaSaidaFornecedor = true;
                }
                List<Movenda> listMovenda = queryCplus.listagemMovendaFornecedor(movimentoSaidaFornecedor.getCodigo(), fornecedor.getCodforn());
                if (listMovenda.isEmpty()) {//if que avisa usuario da decisão
                    int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n você criara uma nova saida! \n Para o Fornecedor: " + fornecedor.getNomeforn() + "\n Com a Operação: " + movimentoSaidaFornecedor.getNometipomovimento(), "Criar Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                    if (cancelar != JOptionPane.YES_OPTION) {
                        cancelaSaidaFornecedor = true;
                    }
                } else if (listMovenda.size() == 1) {//if que verifica se já existe uma saida
                    int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n Já existe uma saida! \n Para o Fornecedor: " + fornecedor.getNomeforn() + "\n Com a Operação: " + movimentoSaidaFornecedor.getNometipomovimento(), "Inserir Produto na Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                    if (cancelar != JOptionPane.YES_OPTION) {
                        cancelaSaidaFornecedor = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Cuidado!!! \n Já existe mais de uma saida! \n Para o Fornecedor: " + fornecedor.getNomeforn() + "\n Com a Operaçao: " + movimentoSaidaFornecedor.getNometipomovimento() + "\n Não sera possivel continuar ate resolver isso!!!");
                    cancelaSaidaFornecedor = true;
                }
            }//fim if cancelamento
        } while (cancelaSaidaFornecedor);
        // }
        if (cancelaSaidaFornecedor == false) {

            if (new SaidaFornecedorCplus().saidaFornecedorCplus(controlaEstoque, movimentoSaidaFornecedor, calculoIcmsEstado, fornecedor, entradaProd, serial, user, managerCplus, managerIntegrador) == false) {
                cancelaSaidaFornecedor = true;
            }

        }
        return cancelaSaidaFornecedor;
    }

    /**
     * Função que cuida da coleta de dados para entrada no estoque por cliente
     *
     * @return false caso não haja erros
     */
    private boolean entradaCliente() {
        boolean cancelaEntradaCliente = false;
        String codigoCliente = "";
        //String codMovProdSaida = "";
        Cliente cliente = null;
        //Movendaprod vendaProd = null;
        Tipomovimento movimentoEntradaCliente = null;
        Calculoicmsestado calculoIcmsEstado = null;
        // colunaCodClienteSaida = jTableSaidaSerial.getColumnModel().getColumnIndex("CodCliente");
        if (venda.getCodcli() != null) {
            codigoCliente = venda.getCodcli().getCodcli();
        } else {
            codigoCliente = clienteCupom;
        }
        if (clienteCupom == null ? codigoCliente == null : clienteCupom.equals(codigoCliente)) {
            //se for cupom
            this.listagemClientesJDialog.setVisible(true);
            if (this.listagemClientesJDialog.isCancelamento() == false) {
                cliente = this.listagemClientesJDialog.getCliente();
            } else {
                cancelaEntradaCliente = true;
            }
        } else {//fim if que verifica se cliente é cupom abre seleção de cliente
            int colNome = jTableSaidaSerial.getColumnModel().getColumnIndex("Nome");
            this.listagemClientesJDialog.setTermoPesquisa(jTableSaidaSerial.getValueAt(jTableSaidaSerial.getSelectedRow(), colNome).toString());
            this.listagemClientesJDialog.listarClientes();
            this.listagemClientesJDialog.setVisible(true);
            if (this.listagemClientesJDialog.isCancelamento() == false) {
                cliente = this.listagemClientesJDialog.getCliente();
            } else {
                cancelaEntradaCliente = true;
            }
        }
        if (cancelaEntradaCliente == false) {
            //localização da Operação
            if (jCheckBoxDevolucao.isSelected()) {
                this.listagemOperacaoJDialog.setDevolucao(true);
            } else {
                this.listagemOperacaoJDialog.setDevolucao(false);
            }
            this.listagemOperacaoJDialog.setInativo(false);
            this.listagemOperacaoJDialog.setCliente(true);
            this.listagemOperacaoJDialog.setTipoMovimento("E");
            this.listagemOperacaoJDialog.pesquisas();
            this.listagemOperacaoJDialog.setVisible(true);
            if (this.listagemOperacaoJDialog.isCancelamento() == false) {
                movimentoEntradaCliente = this.listagemOperacaoJDialog.getMovimento();
            } else {
                cancelaEntradaCliente = true;
            }
        }
        if (cancelaEntradaCliente == false) {
            //movimento de saida cliente
            //colunaCodMovProdutoSaida = jTableSaidaSerial.getColumnModel().getColumnIndex("Codmovprod");
            //codMovProdSaida = jTableSaidaSerial.getValueAt(jTableSaidaSerial.getSelectedRow(), colunaCodMovProdutoSaida).toString();
            //vendaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(codMovProdSaida);
        }
        if (cancelaEntradaCliente == false) {
            //licalização calculo ICMS por estado                    
            List<Calculoicmsestado> listIcmsPorEstado;
            String cfop = "";
            if ("RS".equals(cliente.getEstado())) {
                if (jCheckBoxDevolucao.isSelected()) {
                    if ("5102".equals(vendaProd.getCodcfop().getCodcfop())) {
                        cfop = "1202";
                    } else {
                        cfop = "1411";
                    }
                } else {
                    cfop = movimentoEntradaCliente.getCodcfopdentrouf();
                }
                listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol(cliente.getEstado(), "RS", cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
            } else {
                if (jCheckBoxDevolucao.isSelected()) {
                    if ("6102".equals(vendaProd.getCodcfop().getCodcfop())) {
                        cfop = "2202";
                    } else {
                        cfop = "2411";
                    }
                } else {
                    cfop = movimentoEntradaCliente.getCodcfopforauf();
                }
                listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol(cliente.getEstado(), "RS", cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
            }
            if (listIcmsPorEstado.size() == 1) {
                for (Calculoicmsestado cal : listIcmsPorEstado) {
                    calculoIcmsEstado = new CalculoicmsestadoJpaController(managerCplus).findCalculoicmsestado(cal.getCodcalculoicmsestado());;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não foi Possivel localizar o Calculo ICMS para essa Operação verifique no C-Plus \n resultados encontrados: " + listIcmsPorEstado.size());
                cancelaEntradaCliente = true;
            }
        }//fim if cancelamento                     
        //Cliente clien = new ClienteJpaController(managerCplus).findCliente(codigoCliente);
        if (cancelaEntradaCliente == false) {

            if (new EntradaClienteCplus().entradaClienteCplus(movimentoEntradaCliente, calculoIcmsEstado, cliente, vendaProd, serial, user, managerCplus, managerIntegrador) == false) {
                cancelaEntradaCliente = true;
            }

        }
        return cancelaEntradaCliente;
    }

    /**
     * Função que coleta dados e cria saida para cliente, essa função tambem
     * diminui estoque
     */
    private void saidaClienteRma(boolean controlaEstoque) {
        boolean cancelaSaidaCliente = false;
        String codigoCliente = "";
        // String codMovProdSaida = "";
        Cliente cliente = null;
        //Movendaprod vendaProd = null;
        Tipomovimento movimentoSaidaCliente = null;
        Calculoicmsestado calculoIcmsEstado = null;

        //colunaCodClienteSaida = jTableSaidaSerial.getColumnModel().getColumnIndex("CodCliente");
        if (venda.getCodcli() != null) {
            codigoCliente = venda.getCodcli().getCodcli();
        } else {
            codigoCliente = clienteCupom;
        }
        do {
            if (clienteCupom == null ? codigoCliente == null : clienteCupom.equals(codigoCliente)) {
                //se for cupom
                this.listagemClientesJDialog.setVisible(true);
                if (this.listagemClientesJDialog.isCancelamento() == false) {
                    cliente = this.listagemClientesJDialog.getCliente();
                } else {
                    cancelaSaidaCliente = true;
                }
            } else {//fim if que verifica se cliente é cupom abre seleção de cliente
                int colNome = jTableSaidaSerial.getColumnModel().getColumnIndex("Nome");
                this.listagemClientesJDialog.setTermoPesquisa(jTableSaidaSerial.getValueAt(jTableSaidaSerial.getSelectedRow(), colNome).toString());
                this.listagemClientesJDialog.listarClientes();
                this.listagemClientesJDialog.setVisible(true);
                if (this.listagemClientesJDialog.isCancelamento() == false) {
                    cliente = this.listagemClientesJDialog.getCliente();
                } else {
                    cancelaSaidaCliente = true;
                }
            }
            //localizção da Operação           
            this.listagemOperacaoJDialog.setDevolucao(false);
            this.listagemOperacaoJDialog.setInativo(false);
            this.listagemOperacaoJDialog.setCliente(true);
            this.listagemOperacaoJDialog.setTipoMovimento("S");
            this.listagemOperacaoJDialog.pesquisas();
            this.listagemOperacaoJDialog.setVisible(true);
            if (this.listagemOperacaoJDialog.isCancelamento() == false) {
                movimentoSaidaCliente = this.listagemOperacaoJDialog.getMovimento();
            } else {
                cancelaSaidaCliente = true;
            }
            //if (cancelaSaidaCliente == false) {
            //movimento de saida cliente
            //colunaCodMovProdutoSaida = jTableSaidaSerial.getColumnModel().getColumnIndex("id Saida Serial");
            //codMovProdSaida = jTableSaidaSerial.getValueAt(jTableSaidaSerial.getSelectedRow(), colunaCodMovProdutoSaida).toString();
            // vendaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(codMovProdSaida);
            //}
            if (cancelaSaidaCliente == false) {
                //licalização calculo ICMS por estado                    
                List<Calculoicmsestado> listIcmsPorEstado;
                String cfop = "";
                if ("RS".equals(cliente.getEstado())) {
                    if ("Y".equals(movimentoSaidaCliente.getFlagdevolucao().toString())) {
                        if ("5102".equals(vendaProd.getCodcfop().getCodcfop())) {
                            cfop = "5202";
                        } else {
                            cfop = "5411";
                        }
                    } else {
                        cfop = movimentoSaidaCliente.getCodcfopdentrouf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", cliente.getEstado(), cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                } else {
                    if ("Y".equals(movimentoSaidaCliente.getFlagdevolucao().toString())) {
                        if ("6102".equals(vendaProd.getCodcfop().getCodcfop())) {
                            cfop = "6202";
                        } else {
                            cfop = "6411";
                        }
                    } else {
                        cfop = movimentoSaidaCliente.getCodcfopforauf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", cliente.getEstado(), cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                }
                if (listIcmsPorEstado.size() == 1) {
                    for (Calculoicmsestado cal : listIcmsPorEstado) {
                        calculoIcmsEstado = new CalculoicmsestadoJpaController(managerCplus).findCalculoicmsestado(cal.getCodcalculoicmsestado());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não foi Possivel localizar o Calculo ICMS para essa Operação verifique no C-Plus \n resultados encontrados: " + listIcmsPorEstado.size());
                    cancelaSaidaCliente = true;
                }
            }//fim if cancelamento   
            List<Movenda> listMovenda = queryCplus.listagemMovendaCliente(movimentoSaidaCliente.getCodigo(), cliente.getCodcli());
            if (listMovenda.isEmpty()) {//if que avisa usuario da decisão
                int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n você criara uma nova saida! \n Para o Cliente: " + cliente.getNomecli() + "\n Com a Operação: " + movimentoSaidaCliente.getNometipomovimento(), "Criar Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                if (cancelar != JOptionPane.YES_OPTION) {
                    cancelaSaidaCliente = true;
                }
            } else if (listMovenda.size() == 1) {//if que verifica se já existe uma saida
                String numPed = "";
                for (Movenda ven : listMovenda) {
                    numPed = numPed + String.valueOf(ven.getNumped());
                }
                int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n Já existe uma saida! \n Para o Cliente: " + cliente.getNomecli() + "\n Com a Operção: " + movimentoSaidaCliente.getNometipomovimento()
                        + "\n Numero Pedido(s): " + numPed + ", ", "Inserir Produto na Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                if (cancelar != JOptionPane.YES_OPTION) {
                    cancelaSaidaCliente = true;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Cuidado!!! \n Já existe mais de uma saida! \n Para o Cliente: " + cliente.getNomecli() + "\n Com a Operação: " + movimentoSaidaCliente.getNometipomovimento() + "\n Nï¿½o sera possivel continuar ate resolver isso!!!");
                cancelaSaidaCliente = true;
            }
        } while (cancelaSaidaCliente);
        if (cancelaSaidaCliente == false) {
            if (new SaidaClienteCplus().saidaClienteCplus(controlaEstoque, movimentoSaidaCliente, calculoIcmsEstado, cliente, vendaProd, serial, user, managerCplus, managerIntegrador) == false) {
                cancelaSaidaCliente = true;
            } else {
                atualizaEstoque(vendaProd.getCodprod());
            }
        }
    }

    /**
     * Função que combina o combo Box e carrega resultados
     */
    private void tipoDePesquisa() {
        serialProdutoList.clear();
        List<SerialProduto> listProdSerial;
        limpaTabelas();
        switch (jComboBoxTermoPesquisa.getSelectedIndex()) {
            case 0:
                serialProdutoList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    listProdSerial = queryIntegrador.listSerialLike(jTextFieldArgumentoPesquisa.getText());
                    for (SerialProduto p : listProdSerial) {
                        serialProdutoList.add(p);
                        //colore as linhas da tabela
                        TableCellRenderer renderer = new ColorirLinhaImpar();
                        for (int c = 0; c < jTableProdutoSerial.getColumnCount(); c++) {
                            jTableProdutoSerial.setDefaultRenderer(jTableProdutoSerial.getColumnClass(c), renderer);
                        }
                        //**********************
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;
            case 1:
                serialProdutoList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    if (this.listagemEntradasJDialog.isCancelamento() == false) {
                        this.listagemEntradasJDialog.setTermoPesquisa(jTextFieldArgumentoPesquisa.getText(), 0);
                        this.listagemEntradasJDialog.setVisible(true);
                        entrada = this.listagemEntradasJDialog.getMovEntrada();
                        //int cod = Integer.valueOf(jTextFieldArgumentoPesquisa.getText());
                        if (entrada != null) {
                            List<EntradaSerial> listEnt = new ArrayList<>();
                            for (Moventradaprod p : entrada.getMoventradaprodCollection()) {
                                listEnt = queryIntegrador.listPorEntradaProd(p.getCodmoveprod());
                                for (EntradaSerial e : listEnt) {
                                    serialProdutoList.add(e.getIdSerial());
                                    //colore as linhas da tabela
                                    TableCellRenderer renderer = new ColorirLinhaImpar();
                                    for (int c = 0; c < jTableProdutoSerial.getColumnCount(); c++) {
                                        jTableProdutoSerial.setDefaultRenderer(jTableProdutoSerial.getColumnClass(c), renderer);
                                    }
                                    //**********************
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;
            case 2:
                serialProdutoList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    if (this.listagemSaidasJDialog.isCancelamento() == false) {
                        this.listagemSaidasJDialog.setTermoPesquisa(jTextFieldArgumentoPesquisa.getText());
                        this.listagemSaidasJDialog.setVisible(true);
                        Movenda cod = this.listagemSaidasJDialog.getMoVenda();
                        if (cod != null) {
                            List<SaidaSerial> listSaida = new ArrayList<>();
                            for (Movendaprod p : queryCplus.listMovendaProd(cod.getCodmovenda())) {
                                listSaida = queryIntegrador.listPorSaidaProd(p.getCodmovprod());
                                for (SaidaSerial e : listSaida) {
                                    serialProdutoList.add(e.getIdSerial());
                                    //colore as linhas da tabela
                                    TableCellRenderer renderer = new ColorirLinhaImpar();
                                    for (int c = 0; c < jTableProdutoSerial.getColumnCount(); c++) {
                                        jTableProdutoSerial.setDefaultRenderer(jTableProdutoSerial.getColumnClass(c), renderer);
                                    }
                                    //**********************
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;
            case 3:
                serialProdutoList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    if (this.listagemProdutoJDialog.isCancelamento() == false) {
                        this.listagemProdutoJDialog.setTermoPesquisa(jTextFieldArgumentoPesquisa.getText());
                        this.listagemProdutoJDialog.setVisible(true);
                        Produto cod = this.listagemProdutoJDialog.getProduto();
                        if (cod != null) {
                            for (SerialProduto sp : queryIntegrador.listCodProdSemSaida(cod.getCodprod())) {
                                serialProdutoList.add(sp);
                                //colore as linhas da tabela
                                TableCellRenderer renderer = new ColorirLinhaImpar();
                                for (int c = 0; c < jTableProdutoSerial.getColumnCount(); c++) {
                                    jTableProdutoSerial.setDefaultRenderer(jTableProdutoSerial.getColumnClass(c), renderer);
                                }
                                //**********************
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;           
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RmaJFrame(managerPrestaShop, managerCplus, managerIntegrador, user).setVisible(true);
            }
        });
    }

    private final ListagemEntradasJDialog listagemEntradasJDialog;
    private final ListagemSaidasJDialog listagemSaidasJDialog;
    private final ListagemClientesJDialog listagemClientesJDialog;
    private final ListagemOperacaoJDialog listagemOperacaoJDialog;
    private final ListagemFornecedorJDialog listagemFornecedorJDialog;
    private final ListagemProdutoJDialog listagemProdutoJDialog;
    private int colunaSerial;
    private static EntityManagerFactory managerCplus;
    private static EntityManagerFactory managerPrestaShop;
    private static EntityManagerFactory managerIntegrador;
    private final QueryIntegrador queryIntegrador;
    private final QueryCplus queryCplus;
    private final FormataCampos formatacaoDeCampos;
    private String serial;
    private Moventrada entrada;
    private Moventradaprod entradaProd;
    private Movenda venda;
    private Movendaprod vendaProd;
    //int colunaCodClienteSaida;
    //int colunaCodFornecedorEntrada;
    //int colunaCodMovProdutoSaida;
    //int colunaCodMovendaProdutoSerial;
    //int colunaMovProdutoEntrada;
    //int colunaNomeFornecedorEntrada;
    //int colunaNomeClienteSaida;
    //int colunaCodProd;
    private final String clienteCupom;

    //private final NumeroNotaJDialog numeroNotaJDialog;
    static Usuario user;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButtonEditarSerial;
    private javax.swing.JButton jButtonExcluiEntradaSerial;
    private javax.swing.JButton jButtonExcluiSerial;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JCheckBox jCheckBoxDevolucao;
    private javax.swing.JComboBox jComboBoxManutencao;
    private javax.swing.JComboBox jComboBoxTermoPesquisa;
    private javax.swing.JLabel jLabelEstoqueDisponivelCplus;
    private javax.swing.JLabel jLabelOqueDesejafazer;
    private javax.swing.JPanel jPanelListagemEntradas;
    private javax.swing.JPanel jPanelListagemSaidas;
    private javax.swing.JPanel jPanelManutencaoSerial;
    private javax.swing.JPanel jPanelManutençãoSerial;
    private javax.swing.JPanel jPanelPesquisa;
    private javax.swing.JScrollPane jScrollPaneListagemEntradas;
    private javax.swing.JScrollPane jScrollPaneListagemSaidas;
    private javax.swing.JScrollPane jScrollPaneProdutoSerial;
    private javax.swing.JTable jTableEntradaSerial;
    private javax.swing.JTable jTableProdutoSerial;
    private javax.swing.JTable jTableSaidaSerial;
    private javax.swing.JTextField jTextFieldArgumentoPesquisa;
    private javax.swing.JTextField jTextFieldEstoqueCplus;
    private java.util.List<entidade.integrador.SerialProduto> serialProdutoList;
    private javax.persistence.Query serialProdutoQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
