/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integrador.rma;

import entidade.cplus.Calculoicmsestado;
import entidade.cplus.Cliente;
import entidade.cplus.Fornecedor;
import entidade.cplus.Movenda;
import entidade.cplus.Movendaprod;
import entidade.cplus.Movendaprodserial;
import entidade.cplus.Moventradaprod;
import entidade.cplus.Moventradaprodserial;
import entidade.cplus.Orcamentoprodserial;
import entidade.cplus.Produto;
import entidade.cplus.Produtoestoque;
import entidade.cplus.Produtoserial;
import entidade.cplus.Tipomovimento;
import entidade.cplus.Usuario;
import janela.cplus.FormataCampos;
import janela.cplus.ListagemClientesJDialog;
import janela.cplus.ListagemEntradasJDialog;
import janela.cplus.ListagemFornecedorJDialog;
import janela.cplus.ListagemOperacaoJDialog;
import janela.cplus.ListagemSaidasJDialog;
import query.cplus.QueryCplus;
import integrador.render.RenderNumeroNFCe;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import jpa.cplus.CalculoicmsestadoJpaController;
import jpa.cplus.MovendaprodJpaController;
import jpa.cplus.MoventradaprodJpaController;
import jpa.cplus.MoventradaprodserialJpaController;
import jpa.cplus.OrcamentoprodserialJpaController;
import jpa.cplus.ProdutoserialJpaController;
import jpa.cplus.exceptions.IllegalOrphanException;
import jpa.cplus.exceptions.NonexistentEntityException;
import produto.ProdutoCplusDigimacro;
import query.integrador.QueryIntegrador;
import query.prestaShop.QueryPrestaShop;

/**
 *
 * @author leonardo
 */
public class RmaJFrame extends javax.swing.JFrame {

    /**
     * Creates new form RmaJFrame
     *
     * @param managerPrestaShop1
     * @param managerCplus1
     * @param managerIntegrador1
     * @param usuario
     */
    public RmaJFrame(EntityManagerFactory managerPrestaShop1, EntityManagerFactory managerCplus1, EntityManagerFactory managerIntegrador1, Usuario usuario) {
        initComponents();

        managerCplus = managerCplus1;
        managerIntegrador = managerIntegrador1;
        managerPrestaShop = managerPrestaShop1;
        user = usuario;
        queryIntegrador = new QueryIntegrador(managerIntegrador);
        queryCplus = new QueryCplus(managerCplus);
        queryPrestaShop = new QueryPrestaShop(managerPrestaShop);
        formatacaoDeCampos = new FormataCampos();
        this.listagemEntradasJDialog = new ListagemEntradasJDialog(this, true, managerCplus);
        this.listagemSaidasJDialog = new ListagemSaidasJDialog(this, true, managerCplus);
        this.numeroNotaJDialog = new NumeroNotaJDialog(this, true);
        this.listagemClientesJDialog = new ListagemClientesJDialog(this, true, managerCplus);
        this.listagemOperacaoJDialog = new ListagemOperacaoJDialog(this, true, managerCplus);
        this.listagemFornecedorJDialog = new ListagemFornecedorJDialog(this, true, managerCplus);
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        colunaCodMovProdutoSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("Codmovprod");
        colunaCodClienteSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("CodCliente");
        colunaCodFornecedorEntrada = jTableListagemEntradaSerial.getColumnModel().getColumnIndex("codFornecedor");
        colunaNomeFornecedorEntrada = jTableListagemEntradaSerial.getColumnModel().getColumnIndex("Nome Fornecedor");
        colunaNomeClienteSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("Nome Cliente");
        colunaMovProdutoEntrada = jTableListagemEntradaSerial.getColumnModel().getColumnIndex("CodMovProdutoEntrada");
        colunaCodProd = jTableProdutoSerial.getColumnModel().getColumnIndex("Codprod");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icones/logo.png")));
        // new RenderNumeroNFCe();
        clienteCupom = queryIntegrador.valorConfiguracao("cliente_CODIGO_PARA_CUPOM");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        cplusPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("cplusPU").createEntityManager();
        produtoserialQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT p FROM Produtoserial p WHERE p.serial = \"7777777\"").setMaxResults(200);
        produtoserialList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(produtoserialQuery.getResultList());
        moventradaprodserialQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT ven FROM Movendaprodserial ven WHERE ven.codmovendaprodserial = \"9999\"");
        moventradaprodserialList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(moventradaprodserialQuery.getResultList());
        movendaprodserialQuery = java.beans.Beans.isDesignTime() ? null : cplusPUEntityManager.createQuery("SELECT ven FROM Movendaprodserial ven WHERE ven.codmovendaprodserial = \"99999\"");
        movendaprodserialList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(movendaprodserialQuery.getResultList());
        jPanelPesquisa = new javax.swing.JPanel();
        jComboBoxTermoPesquisa = new javax.swing.JComboBox();
        jTextFieldArgumentoPesquisa = new javax.swing.JTextField();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonListagemEntradas = new javax.swing.JButton();
        jScrollPaneProdutoSerial = new javax.swing.JScrollPane();
        jTableProdutoSerial = new javax.swing.JTable();
        jPanelListagemEntradas = new javax.swing.JPanel();
        jScrollPaneListagemEntradas = new javax.swing.JScrollPane();
        jTableListagemEntradaSerial = new javax.swing.JTable();
        jPanelListagemSaidas = new javax.swing.JPanel();
        jScrollPaneListagemSaidas = new javax.swing.JScrollPane();
        jTableListagemSaidasSerial = new javax.swing.JTable();
        jPanelManutencaoSerial = new javax.swing.JPanel();
        jLabelOqueDesejafazer = new javax.swing.JLabel();
        jComboBoxManutencao = new javax.swing.JComboBox();
        jCheckBoxDevolucao = new javax.swing.JCheckBox();
        jButtonExecutar = new javax.swing.JButton();
        jLabelEstoqueDisponivelCplus = new javax.swing.JLabel();
        jTextFieldEstoqueCplus = new javax.swing.JTextField();
        jPanelManutençãoSerial = new javax.swing.JPanel();
        jButtonEditarSerial = new javax.swing.JButton();
        jButtonExcluiSerial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenção de RMA");

        jPanelPesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa"));
        jPanelPesquisa.setToolTipText("");

        jComboBoxTermoPesquisa.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBoxTermoPesquisa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Serial", "Nota Entrada", "Pedido Saida" }));
        jComboBoxTermoPesquisa.setToolTipText("Selecione aqui o tipo da pesquisa que desejar!");
        jComboBoxTermoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTermoPesquisaActionPerformed(evt);
            }
        });

        jTextFieldArgumentoPesquisa.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextFieldArgumentoPesquisa.setToolTipText("Informe o termo a ser pesquisado!");
        jTextFieldArgumentoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldArgumentoPesquisaActionPerformed(evt);
            }
        });

        jButtonPesquisar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jButtonListagemEntradas.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonListagemEntradas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/info.png"))); // NOI18N
        jButtonListagemEntradas.setText("Listagem Entradas");
        jButtonListagemEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListagemEntradasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPesquisaLayout = new javax.swing.GroupLayout(jPanelPesquisa);
        jPanelPesquisa.setLayout(jPanelPesquisaLayout);
        jPanelPesquisaLayout.setHorizontalGroup(
            jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPesquisaLayout.createSequentialGroup()
                .addComponent(jComboBoxTermoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldArgumentoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonListagemEntradas, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelPesquisaLayout.setVerticalGroup(
            jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPesquisaLayout.createSequentialGroup()
                .addGroup(jPanelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTermoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldArgumentoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPesquisar)
                    .addComponent(jButtonListagemEntradas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableProdutoSerial.setAutoCreateRowSorter(true);
        jTableProdutoSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableProdutoSerial.setColumnSelectionAllowed(true);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, produtoserialList, jTableProdutoSerial);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.codigo}"));
        columnBinding.setColumnName("Cod Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.nomeprod}"));
        columnBinding.setColumnName("Descrição");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dataentrada}"));
        columnBinding.setColumnName("Data de Entrada");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${serial}"));
        columnBinding.setColumnName("Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial}"));
        columnBinding.setColumnName("Cod Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprod.codprod}"));
        columnBinding.setColumnName("Codprod");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTableProdutoSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutoSerialMouseClicked(evt);
            }
        });
        jScrollPaneProdutoSerial.setViewportView(jTableProdutoSerial);
        jTableProdutoSerial.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTableProdutoSerial.getColumnModel().getColumnCount() > 0) {
            jTableProdutoSerial.getColumnModel().getColumn(0).setMinWidth(60);
            jTableProdutoSerial.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTableProdutoSerial.getColumnModel().getColumn(0).setMaxWidth(240);
            jTableProdutoSerial.getColumnModel().getColumn(1).setMinWidth(250);
            jTableProdutoSerial.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableProdutoSerial.getColumnModel().getColumn(1).setMaxWidth(500);
            jTableProdutoSerial.getColumnModel().getColumn(2).setMinWidth(80);
            jTableProdutoSerial.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableProdutoSerial.getColumnModel().getColumn(2).setMaxWidth(150);
            jTableProdutoSerial.getColumnModel().getColumn(3).setMinWidth(100);
            jTableProdutoSerial.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTableProdutoSerial.getColumnModel().getColumn(3).setMaxWidth(250);
        }

        jPanelListagemEntradas.setBorder(javax.swing.BorderFactory.createTitledBorder("listagem de Entradas Serial"));

        jTableListagemEntradaSerial.setAutoCreateRowSorter(true);
        jTableListagemEntradaSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, moventradaprodserialList, jTableListagemEntradaSerial);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.serial}"));
        columnBinding.setColumnName("Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.codForn.nomeforn}"));
        columnBinding.setColumnName("Nome Fornecedor");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.codForn.estado}"));
        columnBinding.setColumnName("UF Forn.");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.codcli.nomecli}"));
        columnBinding.setColumnName("Nome Cliente");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.numnota}"));
        columnBinding.setColumnName("Numero Nota");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.data}"));
        columnBinding.setColumnName("Data Entrada");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.codtipomovimento.nometipomovimento}"));
        columnBinding.setColumnName("Operação");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoventradaprodserial}"));
        columnBinding.setColumnName("Codmoventradaprodserial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoveprod}"));
        columnBinding.setColumnName("CodMovProdutoEntrada");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codmoventr.codForn.codforn}"));
        columnBinding.setColumnName("codFornecedor");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmoveprod.codcfop.codcfop}"));
        columnBinding.setColumnName("CFOP");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPaneListagemEntradas.setViewportView(jTableListagemEntradaSerial);
        if (jTableListagemEntradaSerial.getColumnModel().getColumnCount() > 0) {
            jTableListagemEntradaSerial.getColumnModel().getColumn(0).setMinWidth(80);
            jTableListagemEntradaSerial.getColumnModel().getColumn(0).setPreferredWidth(140);
            jTableListagemEntradaSerial.getColumnModel().getColumn(0).setMaxWidth(240);
            jTableListagemEntradaSerial.getColumnModel().getColumn(1).setMinWidth(150);
            jTableListagemEntradaSerial.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableListagemEntradaSerial.getColumnModel().getColumn(1).setMaxWidth(450);
            jTableListagemEntradaSerial.getColumnModel().getColumn(4).setMinWidth(10);
            jTableListagemEntradaSerial.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTableListagemEntradaSerial.getColumnModel().getColumn(4).setMaxWidth(150);
            jTableListagemEntradaSerial.getColumnModel().getColumn(5).setMinWidth(50);
            jTableListagemEntradaSerial.getColumnModel().getColumn(5).setPreferredWidth(120);
            jTableListagemEntradaSerial.getColumnModel().getColumn(5).setMaxWidth(200);
            jTableListagemEntradaSerial.getColumnModel().getColumn(6).setMinWidth(100);
            jTableListagemEntradaSerial.getColumnModel().getColumn(6).setPreferredWidth(250);
            jTableListagemEntradaSerial.getColumnModel().getColumn(6).setMaxWidth(500);
        }

        javax.swing.GroupLayout jPanelListagemEntradasLayout = new javax.swing.GroupLayout(jPanelListagemEntradas);
        jPanelListagemEntradas.setLayout(jPanelListagemEntradasLayout);
        jPanelListagemEntradasLayout.setHorizontalGroup(
            jPanelListagemEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemEntradas)
        );
        jPanelListagemEntradasLayout.setVerticalGroup(
            jPanelListagemEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemEntradas, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );

        jPanelListagemSaidas.setBorder(javax.swing.BorderFactory.createTitledBorder("Listagem de Saídas Serial"));

        jTableListagemSaidasSerial.setAutoCreateRowSorter(true);
        jTableListagemSaidasSerial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, movendaprodserialList, jTableListagemSaidasSerial);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.serial}"));
        columnBinding.setColumnName("Serial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.codcli.nomecli}"));
        columnBinding.setColumnName("Nome Cliente");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.codForn.nomeforn}"));
        columnBinding.setColumnName("Nome Fornecedor");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.datalancamento}"));
        columnBinding.setColumnName("Data Saida");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.numped}"));
        columnBinding.setColumnName("Num. Pedido");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.numnota}"));
        columnBinding.setColumnName("Num. Nota");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.numcupom}"));
        columnBinding.setColumnName("Num Cupom");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.nfceletronicaCollection}"));
        columnBinding.setColumnName("NFC-e");
        columnBinding.setColumnClass(java.util.Collection.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.codtipomovimento.nometipomovimento}"));
        columnBinding.setColumnName("Operação");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.codcli.cnpj}"));
        columnBinding.setColumnName("CNPJ Cliemte");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.codvended.nomevended}"));
        columnBinding.setColumnName("Vendedor");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovendaprodserial}"));
        columnBinding.setColumnName("Codmovendaprodserial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovprod}"));
        columnBinding.setColumnName("Codmovprod");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codprodutoserial.codprodutoserial}"));
        columnBinding.setColumnName("Codprodutoserial");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codmovprod.codmovenda.codcli.codcli}"));
        columnBinding.setColumnName("CodCliente");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPaneListagemSaidas.setViewportView(jTableListagemSaidasSerial);
        if (jTableListagemSaidasSerial.getColumnModel().getColumnCount() > 0) {
            jTableListagemSaidasSerial.getColumnModel().getColumn(0).setMinWidth(80);
            jTableListagemSaidasSerial.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTableListagemSaidasSerial.getColumnModel().getColumn(0).setMaxWidth(240);
            jTableListagemSaidasSerial.getColumnModel().getColumn(1).setMinWidth(120);
            jTableListagemSaidasSerial.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTableListagemSaidasSerial.getColumnModel().getColumn(1).setMaxWidth(450);
            jTableListagemSaidasSerial.getColumnModel().getColumn(3).setMinWidth(50);
            jTableListagemSaidasSerial.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableListagemSaidasSerial.getColumnModel().getColumn(3).setMaxWidth(200);
            jTableListagemSaidasSerial.getColumnModel().getColumn(3).setCellRenderer(new integrador.render.RenderDataEHora());
            jTableListagemSaidasSerial.getColumnModel().getColumn(7).setCellRenderer(new RenderNumeroNFCe());
            jTableListagemSaidasSerial.getColumnModel().getColumn(8).setMinWidth(100);
            jTableListagemSaidasSerial.getColumnModel().getColumn(8).setPreferredWidth(250);
            jTableListagemSaidasSerial.getColumnModel().getColumn(8).setMaxWidth(500);
            jTableListagemSaidasSerial.getColumnModel().getColumn(9).setMinWidth(50);
            jTableListagemSaidasSerial.getColumnModel().getColumn(9).setPreferredWidth(140);
            jTableListagemSaidasSerial.getColumnModel().getColumn(9).setMaxWidth(250);
        }

        javax.swing.GroupLayout jPanelListagemSaidasLayout = new javax.swing.GroupLayout(jPanelListagemSaidas);
        jPanelListagemSaidas.setLayout(jPanelListagemSaidasLayout);
        jPanelListagemSaidasLayout.setHorizontalGroup(
            jPanelListagemSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemSaidas)
        );
        jPanelListagemSaidasLayout.setVerticalGroup(
            jPanelListagemSaidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneListagemSaidas, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );

        jPanelManutencaoSerial.setBorder(javax.swing.BorderFactory.createTitledBorder("Manutencao Serial"));

        jLabelOqueDesejafazer.setText("O que deseja fazer?");

        jComboBoxManutencao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBoxManutencao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Entrada Cliente Produto COM Defeito", "Entrada Cliente Produto SEM Defeito", "Produto com defeito do Fornecedor", "Item 4" }));
        jComboBoxManutencao.setToolTipText("Selecione qual o tipo de RMA a ser feito");

        jCheckBoxDevolucao.setText("Devolução pelo Cliente");

        jButtonExecutar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonExecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/play.png"))); // NOI18N
        jButtonExecutar.setText("Executar");
        jButtonExecutar.setToolTipText("Sera executado o processo de RMA");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jLabelEstoqueDisponivelCplus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEstoqueDisponivelCplus.setText("Estoque Disp. C-Plus:");

        jTextFieldEstoqueCplus.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanelManutencaoSerialLayout = new javax.swing.GroupLayout(jPanelManutencaoSerial);
        jPanelManutencaoSerial.setLayout(jPanelManutencaoSerialLayout);
        jPanelManutencaoSerialLayout.setHorizontalGroup(
            jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                .addComponent(jLabelOqueDesejafazer, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                        .addComponent(jComboBoxManutencao, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addComponent(jLabelEstoqueDisponivelCplus, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jTextFieldEstoqueCplus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(327, 327, 327))
        );
        jPanelManutencaoSerialLayout.setVerticalGroup(
            jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelManutencaoSerialLayout.createSequentialGroup()
                        .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOqueDesejafazer)
                            .addComponent(jComboBoxManutencao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExecutar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxDevolucao))
                    .addGroup(jPanelManutencaoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEstoqueDisponivelCplus)
                        .addComponent(jTextFieldEstoqueCplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanelManutençãoSerial.setBorder(javax.swing.BorderFactory.createTitledBorder("Manutenção Serial"));

        jButtonEditarSerial.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButtonEditarSerial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Edit.png"))); // NOI18N
        jButtonEditarSerial.setText("Editar Serial");
        jButtonEditarSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarSerialActionPerformed(evt);
            }
        });

        jButtonExcluiSerial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/delete.png"))); // NOI18N
        jButtonExcluiSerial.setText("Excluir Serial");
        jButtonExcluiSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluiSerialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelManutençãoSerialLayout = new javax.swing.GroupLayout(jPanelManutençãoSerial);
        jPanelManutençãoSerial.setLayout(jPanelManutençãoSerialLayout);
        jPanelManutençãoSerialLayout.setHorizontalGroup(
            jPanelManutençãoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutençãoSerialLayout.createSequentialGroup()
                .addComponent(jButtonEditarSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExcluiSerial, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );
        jPanelManutençãoSerialLayout.setVerticalGroup(
            jPanelManutençãoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutençãoSerialLayout.createSequentialGroup()
                .addGroup(jPanelManutençãoSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEditarSerial)
                    .addComponent(jButtonExcluiSerial))
                .addGap(0, 91, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelListagemSaidas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelListagemEntradas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelManutencaoSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneProdutoSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelManutençãoSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneProdutoSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanelManutençãoSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelManutencaoSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelListagemEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelListagemSaidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldArgumentoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldArgumentoPesquisaActionPerformed
        tipoDePesquisa();
    }//GEN-LAST:event_jTextFieldArgumentoPesquisaActionPerformed

    private void jTableProdutoSerialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutoSerialMouseClicked
        movendaprodserialList.clear();
        moventradaprodserialList.clear();
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        colunaCodProd = jTableProdutoSerial.getColumnModel().getColumnIndex("Codprod");
        serial = jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaSerial).toString();
        List<Moventradaprodserial> listEntradaSerial = queryCplus.listagemEntradaSerial(serial);
        for (Moventradaprodserial entSerial : listEntradaSerial) {
            moventradaprodserialList.add(entSerial);
        }
        List<Movendaprodserial> listSaidaSerial = queryCplus.listagemSaidaSerialExato(serial);
        for (Movendaprodserial saidaSerial : listSaidaSerial) {
            movendaprodserialList.add(saidaSerial);
        }
        mostraEstoque(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaCodProd).toString());
    }//GEN-LAST:event_jTableProdutoSerialMouseClicked

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        tipoDePesquisa();
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        decisaoRma();
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonListagemEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListagemEntradasActionPerformed
        this.listagemEntradasJDialog.setVisible(true);
    }//GEN-LAST:event_jButtonListagemEntradasActionPerformed

    private void jButtonEditarSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarSerialActionPerformed
        if (jTableProdutoSerial.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar o serial para editar!!");
        } else {
            verificaSerialCadastrado();
        }

    }//GEN-LAST:event_jButtonEditarSerialActionPerformed

    private void jComboBoxTermoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTermoPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTermoPesquisaActionPerformed

    private void jButtonExcluiSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluiSerialActionPerformed
        if (jTableProdutoSerial.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar o serial para Excluir!!");
        } else if (jTableListagemEntradaSerial.getSelectedRow() != -1 || jTableListagemEntradaSerial.getRowCount() == 0) {
            int cancelar = JOptionPane.showConfirmDialog(null, " Deseja realmente Excluir o Serial Selecionado\n A AÇÃO NÃO PODE SER DISFEITA!!!", "Excluir", JOptionPane.YES_NO_CANCEL_OPTION);
            if (cancelar == JOptionPane.YES_OPTION) {
                excluiSerial();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vocïê deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
        }
    }//GEN-LAST:event_jButtonExcluiSerialActionPerformed

    private void excluiSerial() {
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        String ser = jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaSerial).toString();
        List<Produtoserial> listProdSerial = queryCplus.pesquisaSerialExato(ser);
        if (listProdSerial.size() < 1) {
            JOptionPane.showMessageDialog(null, "O serial " + ser + " Não existe, Verifique!!!");
        } else {
            for (Produtoserial proSer : listProdSerial) {
                List<Movendaprodserial> vendaSerial = queryCplus.listagemSaidaSerialExato(ser);
                if (vendaSerial.isEmpty()) {
                    //List<Moventradaprodserial> entradaSerial = querySerial.listagemEntradaSerial(ser);
                    for (Moventradaprodserial entSer : proSer.getMoventradaprodserialCollection()) {
                        try {
                            new MoventradaprodserialJpaController(managerCplus).destroy(entSer.getCodmoventradaprodserial());
                        } catch (NonexistentEntityException ex) {
                            JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir Entrada Serial \n" + ex);
                        }
                    }//for
                    for (Orcamentoprodserial orSer : proSer.getOrcamentoprodserialCollection()) {
                        try {
                            new OrcamentoprodserialJpaController(managerCplus).destroy(orSer.getCodorcprodser());
                        } catch (NonexistentEntityException ex) {
                            JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir Orï¿½amento Serial \n" + ex);
                        }
                    }//for
                    try {
                        new ProdutoserialJpaController(managerCplus).destroy(proSer.getCodprodutoserial());
                        tipoDePesquisa();
                    } catch (IllegalOrphanException | NonexistentEntityException ex) {
                        JOptionPane.showMessageDialog(null, "Houve um Erro ao Excluir Produto Serial \n" + ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "O serial " + ser + " Não pode ser Excluido pois já tem Saida, Verifique!!!");
                }//else
            }//for
        }//else
    }

    private void verificaSerialCadastrado() {
        colunaSerial = jTableProdutoSerial.getColumnModel().getColumnIndex("Serial");
        int codSerialProd = jTableProdutoSerial.getColumnModel().getColumnIndex("Cod Serial");
        String serialNovo = "";
        serialNovo = JOptionPane.showInputDialog("Digite o Serial novo! ").toUpperCase();
        if (!"".equals(serialNovo)) {
            List<Produtoserial> listProdSerialNovo = queryCplus.pesquisaSerialExato(serialNovo);
            if (listProdSerialNovo.isEmpty()) {
                // List<Produtoserial> listProdSerialAntigo = queryCplus.pesquisaSerialExato(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaSerial).toString());
                List<Produtoserial> listProdSerialAntigo = queryCplus.pesquisaCodProdutoSerial(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), codSerialProd).toString());
                for (Produtoserial serialAntigo : listProdSerialAntigo) {
                    serialAntigo.setSerial(serialNovo);
                    try {
                        new ProdutoserialJpaController(managerCplus).edit(serialAntigo);
                        JOptionPane.showMessageDialog(null, "Serial editado com sucesso!!");
                        jTextFieldArgumentoPesquisa.setText(serialNovo);
                        tipoDePesquisa();
                    } catch (NonexistentEntityException ex) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao editar o serial! \n!!" + ex);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao editar o serial! \n!!" + ex);
                    }
                }//FIM FOR QUE LISTA O SERIAL ANTIGO
            } else {//IF QUE VERIFICA SE NOVO SERIAL JÁ ESTÁ CADASTRADO NO BANCO
                JOptionPane.showMessageDialog(null, "O serial " + serialNovo + " Já está cadastrado, Verifique!!!");
            }
        } else {//FIM IF QUR VERIFICA SE NOVO SERIAL DIGITADO É NULLO
            JOptionPane.showMessageDialog(null, "O serial Novo deve ser digitado!!");
        }
    }

    private void mostraEstoque(String codProduto) {
        for (Produtoestoque estoque : queryCplus.resultTodosEstoques(codProduto)) {
            double disponivel;
            double resOS = estoque.getReservadoos().doubleValue();
            double resOrcamento = estoque.getReservadoorcamento().doubleValue();
            double estoquAtual = estoque.getEstatu().doubleValue();
            disponivel = estoquAtual - resOS - resOrcamento;
            jTextFieldEstoqueCplus.setText(formatacaoDeCampos.bigDecimalParaString(new BigDecimal(disponivel), 0));
        }

    }

    /**
     * Função que atualiza o estoque no magento pelo codProduto da tabela
     * ProdutoSerial
     */
    private void atualizaEstoque() {
        List<Produto> listProd = queryCplus.listProdutoSerial(jTableProdutoSerial.getValueAt(jTableProdutoSerial.getSelectedRow(), colunaCodProd).toString());
        for (Produto prodestoque : listProd) {
            new ProdutoCplusDigimacro().produtoCplusDigimacro(managerIntegrador, managerCplus, managerPrestaShop, prodestoque);
        }
    }

    private void decisaoRma() {
        switch (jComboBoxManutencao.getSelectedIndex()) {
            case 0:
                if (jTableListagemSaidasSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Saidas serial!!! ");
                } else if (jTableListagemEntradaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
                } else {
                    if (entradaCliente() == false) {
                        if (saidaFornecedor(false) == false) {
                            if (jCheckBoxDevolucao.isSelected() == false) {
                                saidaClienteRma(true);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Houve um erro ao gravar saida Fornecedor verifique!!!! ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao gravar entrada cliente verifique!!!! ");
                    }
                    tipoDePesquisa();//pesquisa novamente
                }
                break;
            case 1:
                if (jTableListagemSaidasSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Saidas serial!!! ");
                } else if (jTableListagemEntradaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
                } else {
                    if (entradaCliente() == false) {
                        if (jCheckBoxDevolucao.isSelected() == false) {
                            saidaClienteRma(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao gravar entrada cliente verifique!!!! ");
                    }
                    tipoDePesquisa();//pesquisa novamente
                }
                break;
            case 2:
                if (jTableListagemEntradaSerial.getSelectedRow() == -1) {
                    JOptionPane.showMessageDialog(null, "Você deve selecionar uma linha na tabela Listagem de Entrada serial!!! ");
                } else {
                    if (saidaFornecedor(true) == true) {
                        JOptionPane.showMessageDialog(null, "Houve um erro ao gravar saida Fornecedor verifique!!!! ");
                    }
                    tipoDePesquisa();//pesquisa novamente
                }
                break;
        }
        //jTextFieldArgumentoPesquisa.setText("");
    }

    /**
     * Essa função cria a saida para fornecedor no caso produtos com defeito
     *
     * @return false caso não haja erros
     */
    private boolean saidaFornecedor(boolean controlaEstoque) {
        boolean cancelaSaidaFornecedor = false;
        // boolean achou = true;
        Tipomovimento movimentoSaidaFornecedor = null;
        Fornecedor fornecedor = null;
        Calculoicmsestado calculoIcmsEstado = null;
        //Moventradaprod entradaProd ;
        String nomeFornecedor = "";
        String codMovProdEntrada = "";
        Moventradaprod entradaProd;
        // localização da entrada do produto
        do {//licalização calculo ICMS por estado 
            colunaMovProdutoEntrada = jTableListagemEntradaSerial.getColumnModel().getColumnIndex("CodMovProdutoEntrada");
            codMovProdEntrada = jTableListagemEntradaSerial.getValueAt(jTableListagemEntradaSerial.getSelectedRow(), colunaMovProdutoEntrada).toString();
            entradaProd = new MoventradaprodJpaController(managerCplus).findMoventradaprod(codMovProdEntrada);

            cancelaSaidaFornecedor = false;
            colunaNomeFornecedorEntrada = jTableListagemEntradaSerial.getColumnModel().getColumnIndex("Nome Fornecedor");
            //colunaCodFornecedorEntrada = jTableListagemEntradaSerial.getColumnModel().getColumnIndex("codFornecedor");
            nomeFornecedor = jTableListagemEntradaSerial.getValueAt(jTableListagemEntradaSerial.getSelectedRow(), colunaNomeFornecedorEntrada).toString();
            if (!"".equals(nomeFornecedor)) {
                this.listagemFornecedorJDialog.setTermoPesquisa(nomeFornecedor);
                this.listagemFornecedorJDialog.listarFornecedorPorNome();
            }
            this.listagemFornecedorJDialog.setVisible(true);
            if (this.listagemFornecedorJDialog.isCancelamento() == false) {
                fornecedor = this.listagemFornecedorJDialog.getFornecedor();
            } else {
                cancelaSaidaFornecedor = true;
            }
            if (cancelaSaidaFornecedor == false) {
                //localização da Operação
                if (jCheckBoxDevolucao.isSelected()) {
                    this.listagemOperacaoJDialog.setDevolucao(true);
                } else {
                    this.listagemOperacaoJDialog.setDevolucao(false);
                }
                this.listagemOperacaoJDialog.setInativo(false);
                this.listagemOperacaoJDialog.setCliente(false);
                this.listagemOperacaoJDialog.setTipoMovimento("S");
                this.listagemOperacaoJDialog.pesquisas();
                this.listagemOperacaoJDialog.setVisible(true);
                if (this.listagemOperacaoJDialog.isCancelamento() == false) {
                    movimentoSaidaFornecedor = this.listagemOperacaoJDialog.getMovimento();
                } else {
                    cancelaSaidaFornecedor = true;
                }
            }
            if (cancelaSaidaFornecedor == false) {
                List<Calculoicmsestado> listIcmsPorEstado;
                String cfop = "";
                if ("RS".equals(fornecedor.getEstado())) {
                    if ("Y".equals(movimentoSaidaFornecedor.getFlagdevolucao().toString())) {
                        if ("1102".equals(entradaProd.getCodcfop().getCodcfop())) {
                            cfop = "5202";
                        } else {
                            cfop = "5411";
                        }
                    } else {
                        cfop = movimentoSaidaFornecedor.getCodcfopdentrouf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", fornecedor.getEstado(), cfop, entradaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                } else {
                    if ("Y".equals(movimentoSaidaFornecedor.getFlagdevolucao().toString())) {
                        if ("2102".equals(entradaProd.getCodcfop().getCodcfop())) {
                            cfop = "6202";
                        } else {
                            cfop = "6411";
                        }
                    } else {
                        cfop = movimentoSaidaFornecedor.getCodcfopforauf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", fornecedor.getEstado(), cfop, entradaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                }
                if (listIcmsPorEstado.size() == 1) {
                    for (Calculoicmsestado cal : listIcmsPorEstado) {
                        calculoIcmsEstado = new CalculoicmsestadoJpaController(managerCplus).findCalculoicmsestado(cal.getCodcalculoicmsestado());;
                        cancelaSaidaFornecedor = false;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não foi Possivel localizar o Calculo ICMS para o Estado " + fornecedor.getEstado() + " Como a CFOP " + cfop
                            + "\n Acerte o calculo antes de Proseguir!! \n resultados encontrados: " + listIcmsPorEstado.size());
                    cancelaSaidaFornecedor = true;
                }
                List<Movenda> listMovenda = queryCplus.listagemMovendaFornecedor(movimentoSaidaFornecedor.getCodigo(), fornecedor.getCodforn());
                if (listMovenda.isEmpty()) {//if que avisa usuario da decisão
                    int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n você criara uma nova saida! \n Para o Fornecedor: " + fornecedor.getNomeforn() + "\n Com a Operação: " + movimentoSaidaFornecedor.getNometipomovimento(), "Criar Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                    if (cancelar != JOptionPane.YES_OPTION) {
                        cancelaSaidaFornecedor = true;
                    }
                } else if (listMovenda.size() == 1) {//if que verifica se já existe uma saida
                    int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n Já existe uma saida! \n Para o Fornecedor: " + fornecedor.getNomeforn() + "\n Com a Operação: " + movimentoSaidaFornecedor.getNometipomovimento(), "Inserir Produto na Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                    if (cancelar != JOptionPane.YES_OPTION) {
                        cancelaSaidaFornecedor = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Cuidado!!! \n Já existe mais de uma saida! \n Para o Fornecedor: " + fornecedor.getNomeforn() + "\n Com a Operaçao: " + movimentoSaidaFornecedor.getNometipomovimento() + "\n Não sera possivel continuar ate resolver isso!!!");
                    cancelaSaidaFornecedor = true;
                }
            }//fim if cancelamento
        } while (cancelaSaidaFornecedor);
        if (cancelaSaidaFornecedor == false) {
            if (new SaidaFornecedorCplus().saidaFornecedorCplus(controlaEstoque, movimentoSaidaFornecedor, calculoIcmsEstado, fornecedor, entradaProd, serial, user, managerCplus, managerIntegrador) == false) {
                cancelaSaidaFornecedor = true;
            }
        }
        return cancelaSaidaFornecedor;
    }

    /**
     * Função que cuida da coleta de dados para entrada no estoque por cliente
     *
     * @return false caso não haja erros
     */
    private boolean entradaCliente() {
        boolean cancelaEntradaCliente = false;
        String codigoCliente = "";
        String codMovProdSaida = "";
        Cliente cliente = null;
        Movendaprod vendaProd = null;
        Tipomovimento movimentoEntradaCliente = null;
        Calculoicmsestado calculoIcmsEstado = null;
        colunaCodClienteSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("CodCliente");
        if (jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaCodClienteSaida) != null) {
            codigoCliente = jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaCodClienteSaida).toString();
        } else {
            codigoCliente = clienteCupom;
        }
        if (clienteCupom == null ? codigoCliente == null : clienteCupom.equals(codigoCliente)) {
            //se for cupom
            this.listagemClientesJDialog.setVisible(true);
            if (this.listagemClientesJDialog.isCancelamento() == false) {
                cliente = this.listagemClientesJDialog.getCliente();
            } else {
                cancelaEntradaCliente = true;
            }
        } else {//fim if que verifica se cliente é cupom abre seleção de cliente
            colunaNomeClienteSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("Nome Cliente");
            this.listagemClientesJDialog.setTermoPesquisa(jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaNomeClienteSaida).toString());
            this.listagemClientesJDialog.listarClientes();
            this.listagemClientesJDialog.setVisible(true);
            if (this.listagemClientesJDialog.isCancelamento() == false) {
                cliente = this.listagemClientesJDialog.getCliente();
            } else {
                cancelaEntradaCliente = true;
            }
        }
        if (cancelaEntradaCliente == false) {
            //localização da Operação
            if (jCheckBoxDevolucao.isSelected()) {
                this.listagemOperacaoJDialog.setDevolucao(true);
            } else {
                this.listagemOperacaoJDialog.setDevolucao(false);
            }
            this.listagemOperacaoJDialog.setInativo(false);
            this.listagemOperacaoJDialog.setCliente(true);
            this.listagemOperacaoJDialog.setTipoMovimento("E");
            this.listagemOperacaoJDialog.pesquisas();
            this.listagemOperacaoJDialog.setVisible(true);
            if (this.listagemOperacaoJDialog.isCancelamento() == false) {
                movimentoEntradaCliente = this.listagemOperacaoJDialog.getMovimento();
            } else {
                cancelaEntradaCliente = true;
            }
        }
        if (cancelaEntradaCliente == false) {
            //movimento de saida cliente
            colunaCodMovProdutoSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("Codmovprod");
            codMovProdSaida = jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaCodMovProdutoSaida).toString();
            vendaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(codMovProdSaida);
        }
        if (cancelaEntradaCliente == false) {
            //licalização calculo ICMS por estado                    
            List<Calculoicmsestado> listIcmsPorEstado;
            String cfop = "";
            if ("RS".equals(cliente.getEstado())) {
                if (jCheckBoxDevolucao.isSelected()) {
                    if ("5102".equals(vendaProd.getCodcfop().getCodcfop())) {
                        cfop = "1202";
                    } else {
                        cfop = "1411";
                    }
                } else {
                    cfop = movimentoEntradaCliente.getCodcfopdentrouf();
                }
                listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol(cliente.getEstado(), "RS", cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
            } else {
                if (jCheckBoxDevolucao.isSelected()) {
                    if ("6102".equals(vendaProd.getCodcfop().getCodcfop())) {
                        cfop = "2202";
                    } else {
                        cfop = "2411";
                    }
                } else {
                    cfop = movimentoEntradaCliente.getCodcfopforauf();
                }
                listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol(cliente.getEstado(), "RS", cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
            }
            if (listIcmsPorEstado.size() == 1) {
                for (Calculoicmsestado cal : listIcmsPorEstado) {
                    calculoIcmsEstado = new CalculoicmsestadoJpaController(managerCplus).findCalculoicmsestado(cal.getCodcalculoicmsestado());;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não foi Possivel localizar o Calculo ICMS para essa Operação verifique no C-Plus \n resultados encontrados: " + listIcmsPorEstado.size());
                cancelaEntradaCliente = true;
            }
        }//fim if cancelamento                     
        //Cliente clien = new ClienteJpaController(managerCplus).findCliente(codigoCliente);
        if (cancelaEntradaCliente == false) {
            if (new EntradaClienteCplus().entradaClienteCplus(movimentoEntradaCliente, calculoIcmsEstado, cliente, vendaProd, serial, user, managerCplus, managerIntegrador) == false) {
                cancelaEntradaCliente = true;
            }
        }
        return cancelaEntradaCliente;
    }

    /**
     * Função que coleta dados e cria saida para cliente, essa função tambem
     * diminui estoque
     */
    private void saidaClienteRma(boolean controlaEstoque) {
        boolean cancelaSaidaCliente = false;
        String codigoCliente = "";
        String codMovProdSaida = "";
        Cliente cliente = null;
        Movendaprod vendaProd = null;
        Tipomovimento movimentoSaidaCliente = null;
        Calculoicmsestado calculoIcmsEstado = null;

        colunaCodClienteSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("CodCliente");
        if (jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaCodClienteSaida) != null) {
            codigoCliente = jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaCodClienteSaida).toString();
        } else {
            codigoCliente = clienteCupom;
        }
        do {
            if (clienteCupom == null ? codigoCliente == null : clienteCupom.equals(codigoCliente)) {
                //se for cupom
                this.listagemClientesJDialog.setVisible(true);
                if (this.listagemClientesJDialog.isCancelamento() == false) {
                    cliente = this.listagemClientesJDialog.getCliente();
                } else {
                    cancelaSaidaCliente = true;
                }
            } else {//fim if que verifica se cliente é cupom abre seleção de cliente
                colunaNomeClienteSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("Nome Cliente");
                this.listagemClientesJDialog.setTermoPesquisa(jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaNomeClienteSaida).toString());
                this.listagemClientesJDialog.listarClientes();
                this.listagemClientesJDialog.setVisible(true);
                if (this.listagemClientesJDialog.isCancelamento() == false) {
                    cliente = this.listagemClientesJDialog.getCliente();
                } else {
                    cancelaSaidaCliente = true;
                }
            }
            //localizção da Operação           
            this.listagemOperacaoJDialog.setDevolucao(false);
            this.listagemOperacaoJDialog.setInativo(false);
            this.listagemOperacaoJDialog.setCliente(true);
            this.listagemOperacaoJDialog.setTipoMovimento("S");
            this.listagemOperacaoJDialog.pesquisas();
            this.listagemOperacaoJDialog.setVisible(true);
            if (this.listagemOperacaoJDialog.isCancelamento() == false) {
                movimentoSaidaCliente = this.listagemOperacaoJDialog.getMovimento();
            } else {
                cancelaSaidaCliente = true;
            }
            if (cancelaSaidaCliente == false) {
                //movimento de saida cliente
                colunaCodMovProdutoSaida = jTableListagemSaidasSerial.getColumnModel().getColumnIndex("Codmovprod");
                codMovProdSaida = jTableListagemSaidasSerial.getValueAt(jTableListagemSaidasSerial.getSelectedRow(), colunaCodMovProdutoSaida).toString();
                vendaProd = new MovendaprodJpaController(managerCplus).findMovendaprod(codMovProdSaida);
            }
            if (cancelaSaidaCliente == false) {
                //licalização calculo ICMS por estado                    
                List<Calculoicmsestado> listIcmsPorEstado;
                String cfop = "";
                if ("RS".equals(cliente.getEstado())) {
                    if ("Y".equals(movimentoSaidaCliente.getFlagdevolucao().toString())) {
                        if ("5102".equals(vendaProd.getCodcfop().getCodcfop())) {
                            cfop = "5202";
                        } else {
                            cfop = "5411";
                        }
                    } else {
                        cfop = movimentoSaidaCliente.getCodcfopdentrouf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", cliente.getEstado(), cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                } else {
                    if ("Y".equals(movimentoSaidaCliente.getFlagdevolucao().toString())) {
                        if ("6102".equals(vendaProd.getCodcfop().getCodcfop())) {
                            cfop = "6202";
                        } else {
                            cfop = "6411";
                        }
                    } else {
                        cfop = movimentoSaidaCliente.getCodcfopforauf();
                    }
                    listIcmsPorEstado = queryCplus.listcalculoIcmsEstadol("RS", cliente.getEstado(), cfop, vendaProd.getCodprod().getCodcalculoicms().getCodcalculoicms());
                }
                if (listIcmsPorEstado.size() == 1) {
                    for (Calculoicmsestado cal : listIcmsPorEstado) {
                        calculoIcmsEstado = new CalculoicmsestadoJpaController(managerCplus).findCalculoicmsestado(cal.getCodcalculoicmsestado());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não foi Possivel localizar o Calculo ICMS para essa Operação verifique no C-Plus \n resultados encontrados: " + listIcmsPorEstado.size());
                    cancelaSaidaCliente = true;
                }
            }//fim if cancelamento   
            List<Movenda> listMovenda = queryCplus.listagemMovendaCliente(movimentoSaidaCliente.getCodigo(), cliente.getCodcli());
            if (listMovenda.isEmpty()) {//if que avisa usuario da decisão
                int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n você criara uma nova saida! \n Para o Cliente: " + cliente.getNomecli() + "\n Com a Operação: " + movimentoSaidaCliente.getNometipomovimento(), "Criar Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                if (cancelar != JOptionPane.YES_OPTION) {
                    cancelaSaidaCliente = true;
                }
            } else if (listMovenda.size() == 1) {//if que verifica se já existe uma saida
                String numPed = "";
                for (Movenda ven : listMovenda) {
                    numPed = numPed + String.valueOf(ven.getNumped());
                }
                int cancelar = JOptionPane.showConfirmDialog(null, "Cuidado!!! \n Já existe uma saida! \n Para o Cliente: " + cliente.getNomecli() + "\n Com a Operção: " + movimentoSaidaCliente.getNometipomovimento()
                        + "\n Numero Pedido(s): " + numPed + ", ", "Inserir Produto na Saida Fornecedor", JOptionPane.YES_NO_CANCEL_OPTION);
                if (cancelar != JOptionPane.YES_OPTION) {
                    cancelaSaidaCliente = true;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Cuidado!!! \n Já existe mais de uma saida! \n Para o Cliente: " + cliente.getNomecli() + "\n Com a Operação: " + movimentoSaidaCliente.getNometipomovimento() + "\n Nï¿½o sera possivel continuar ate resolver isso!!!");
                cancelaSaidaCliente = true;
            }
        } while (cancelaSaidaCliente);
        if (cancelaSaidaCliente == false) {
            if (new SaidaClienteCplus().saidaClienteCplus(controlaEstoque, movimentoSaidaCliente, calculoIcmsEstado, cliente, vendaProd, serial, user, managerCplus, managerIntegrador) == false) {
                cancelaSaidaCliente = true;
            } else {
                atualizaEstoque();
            }
        }
    }

    /**
     * Função que combina o combo Box e carrega resultados
     */
    private void tipoDePesquisa() {
        movendaprodserialList.clear();
        moventradaprodserialList.clear();
        produtoserialList.clear();
        List<Produtoserial> listProdSerial;
        switch (jComboBoxTermoPesquisa.getSelectedIndex()) {
            case 0:
                produtoserialList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    listProdSerial = queryCplus.resultadoSerialLike(jTextFieldArgumentoPesquisa.getText());
                    for (Produtoserial p : listProdSerial) {
                        produtoserialList.add(p);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;
            case 1:
                produtoserialList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    if (this.listagemEntradasJDialog.isCancelamento() == false) {
                        this.listagemEntradasJDialog.setTermoPesquisa(jTextFieldArgumentoPesquisa.getText());
                        this.listagemEntradasJDialog.setVisible(true);
                        String cod = this.listagemEntradasJDialog.getMovEntrada().getCodmoventr();

                        if (cod != null) {
                            listProdSerial = queryCplus.resultadoPorCodigoEntrada(cod);
                            for (Produtoserial p : listProdSerial) {
                                produtoserialList.add(p);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;
            case 2:
                produtoserialList.clear();
                if (!"".equals(jTextFieldArgumentoPesquisa.getText())) {
                    if (this.listagemSaidasJDialog.isCancelamento() == false) {
                        this.listagemSaidasJDialog.setTermoPesquisa(jTextFieldArgumentoPesquisa.getText());
                        this.listagemSaidasJDialog.setVisible(true);
                        String cod = this.listagemSaidasJDialog.getMoVenda().getCodmovenda();

                        if (cod != null) {
                            listProdSerial = queryCplus.resultadoPorCodigoSaida(cod);
                            for (Produtoserial p : listProdSerial) {
                                produtoserialList.add(p);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Não há valor para pesquisa!!! ");
                }
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RmaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RmaJFrame(managerPrestaShop, managerCplus, managerIntegrador, user).setVisible(true);
            }
        });
    }

    private final ListagemEntradasJDialog listagemEntradasJDialog;
    private final ListagemSaidasJDialog listagemSaidasJDialog;
    private final ListagemClientesJDialog listagemClientesJDialog;
    private final ListagemOperacaoJDialog listagemOperacaoJDialog;
    private final ListagemFornecedorJDialog listagemFornecedorJDialog;
    int colunaSerial;
    static EntityManagerFactory managerCplus;
    static EntityManagerFactory managerPrestaShop;
    // static EntityManagerFactory managerLegiao;
    static EntityManagerFactory managerIntegrador;
    private final QueryIntegrador queryIntegrador;
    private final QueryCplus queryCplus;
    private final QueryPrestaShop queryPrestaShop;
    FormataCampos formatacaoDeCampos;
    String serial;
    int colunaCodClienteSaida;
    int colunaCodFornecedorEntrada;
    int colunaCodMovProdutoSaida;
    int colunaCodMovendaProdutoSerial;
    int colunaMovProdutoEntrada;
    int colunaNomeFornecedorEntrada;
    int colunaNomeClienteSaida;
    int colunaCodProd;
    private final String clienteCupom;

    private final NumeroNotaJDialog numeroNotaJDialog;
    static Usuario user;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager cplusPUEntityManager;
    private javax.swing.JButton jButtonEditarSerial;
    private javax.swing.JButton jButtonExcluiSerial;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonListagemEntradas;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JCheckBox jCheckBoxDevolucao;
    private javax.swing.JComboBox jComboBoxManutencao;
    private javax.swing.JComboBox jComboBoxTermoPesquisa;
    private javax.swing.JLabel jLabelEstoqueDisponivelCplus;
    private javax.swing.JLabel jLabelOqueDesejafazer;
    private javax.swing.JPanel jPanelListagemEntradas;
    private javax.swing.JPanel jPanelListagemSaidas;
    private javax.swing.JPanel jPanelManutencaoSerial;
    private javax.swing.JPanel jPanelManutençãoSerial;
    private javax.swing.JPanel jPanelPesquisa;
    private javax.swing.JScrollPane jScrollPaneListagemEntradas;
    private javax.swing.JScrollPane jScrollPaneListagemSaidas;
    private javax.swing.JScrollPane jScrollPaneProdutoSerial;
    private javax.swing.JTable jTableListagemEntradaSerial;
    private javax.swing.JTable jTableListagemSaidasSerial;
    private javax.swing.JTable jTableProdutoSerial;
    private javax.swing.JTextField jTextFieldArgumentoPesquisa;
    private javax.swing.JTextField jTextFieldEstoqueCplus;
    private java.util.List<entidade.cplus.Movendaprodserial> movendaprodserialList;
    private javax.persistence.Query movendaprodserialQuery;
    private java.util.List<entidade.cplus.Moventradaprodserial> moventradaprodserialList;
    private javax.persistence.Query moventradaprodserialQuery;
    private java.util.List<entidade.cplus.Produtoserial> produtoserialList;
    private javax.persistence.Query produtoserialQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
